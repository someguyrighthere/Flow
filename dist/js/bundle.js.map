{
  "version": 3,
  "sources": ["../../js/utils.js", "../../js/pages/login.js", "../../js/pages/register.js", "../../js/pages/dashboard.js", "../../js/pages/checklists.js", "../../js/pages/admin.js", "../../js/pages/account.js", "../../js/pages/documents.js", "../../js/pages/hiring.js", "../../js/pages/scheduling.js", "../../js/pages/apply.js", "../../js/pages/onboardingView.js", "../../js/pages/suiteHub.js", "../../js/pages/pricing.js", "../../js/app.js"],
  "sourcesContent": ["// js/utils.js\r\n\r\n// This should be the full URL of your deployed backend.\r\nconst API_BASE_URL = 'https://flow-gz1r.onrender.com';\r\n\r\n/**\r\n * Displays a custom modal message to the user.\r\n * @param {string} message The message to display.\r\n * @param {boolean} [isError=false] Whether the message is an error.\r\n */\r\nexport function showModalMessage(message, isError = false) {\r\n    const modalOverlay = document.getElementById(\"modal-message\");\r\n    const modalMessageText = document.getElementById(\"modal-text\");\r\n    const modalOkButton = document.getElementById(\"modal-ok-button\");\r\n\r\n    if (modalOverlay && modalMessageText && modalOkButton) {\r\n        const hideModal = () => { modalOverlay.style.display = \"none\"; };\r\n        const hideModalOutside = (event) => { \r\n            if (event.target === modalOverlay) hideModal(); \r\n        };\r\n\r\n        modalOkButton.removeEventListener(\"click\", hideModal);\r\n        modalOverlay.removeEventListener(\"click\", hideModalOutside);\r\n\r\n        modalMessageText.textContent = message;\r\n        modalMessageText.style.color = isError ? \"#ff8a80\" : \"var(--text-light)\";\r\n        modalOverlay.style.display = \"flex\";\r\n\r\n        modalOkButton.addEventListener(\"click\", hideModal);\r\n        modalOverlay.addEventListener(\"click\", hideModalOutside);\r\n\r\n    } else {\r\n        console.error(\"Modal elements not found for showModalMessage:\", message);\r\n    }\r\n}\r\n\r\n/**\r\n * Displays a confirmation modal to the user.\r\n * @param {string} message The confirmation message.\r\n * @param {string} [confirmButtonText=\"Confirm\"] The text for the confirm button.\r\n * @returns {Promise<boolean>} A promise that resolves to true if confirmed, false otherwise.\r\n */\r\nexport function showConfirmModal(message, confirmButtonText = \"Confirm\") {\r\n    return new Promise(resolve => {\r\n        const confirmModalOverlay = document.getElementById(\"confirm-modal\");\r\n        const confirmModalMessage = document.getElementById(\"confirm-modal-text\");\r\n        const modalConfirmButton = document.getElementById(\"confirm-modal-confirm\");\r\n        const modalCancelButton = document.getElementById(\"confirm-modal-cancel\");\r\n\r\n        if (!confirmModalOverlay || !confirmModalMessage || !modalConfirmButton || !modalCancelButton) {\r\n            console.error(\"Confirmation modal elements not found. Falling back to browser's confirm.\");\r\n            resolve(window.confirm(message));\r\n            return;\r\n        }\r\n\r\n        confirmModalMessage.innerHTML = message;\r\n        modalConfirmButton.textContent = confirmButtonText;\r\n        confirmModalOverlay.style.display = \"flex\";\r\n\r\n        const handleConfirm = () => {\r\n            cleanup();\r\n            resolve(true);\r\n        };\r\n\r\n        const handleCancel = () => {\r\n            cleanup();\r\n            resolve(false);\r\n        };\r\n\r\n        const handleClickOutside = (event) => {\r\n            if (event.target === confirmModalOverlay) {\r\n                cleanup();\r\n                resolve(false);\r\n            }\r\n        };\r\n\r\n        const cleanup = () => {\r\n            modalConfirmButton.removeEventListener('click', handleConfirm);\r\n            modalCancelButton.removeEventListener('click', handleCancel);\r\n            confirmModalOverlay.removeEventListener('click', handleClickOutside);\r\n            confirmModalOverlay.style.display = 'none';\r\n        };\r\n\r\n        modalConfirmButton.addEventListener('click', handleConfirm);\r\n        modalCancelButton.addEventListener('click', handleCancel);\r\n        confirmModalOverlay.addEventListener('click', handleClickOutside);\r\n    });\r\n}\r\n\r\n/**\r\n * Handles API requests to the backend.\r\n * @param {string} method The HTTP method (e.g., \"GET\", \"POST\").\r\n * @param {string} path The API endpoint path (e.g., \"/login\").\r\n * @param {object} [body=null] The request body for POST/PUT requests.\r\n * @param {boolean} [isFormData=false] Whether the body is FormData.\r\n * @returns {Promise<any>} The JSON response from the API.\r\n */\r\nexport async function apiRequest(method, path, body = null, isFormData = false) {\r\n    const token = localStorage.getItem('authToken');\r\n    const endpoint = `${API_BASE_URL}${path}`;\r\n\r\n    const handleAuthError = (errorMessage) => {\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userRole');\r\n        localStorage.removeItem('userId');\r\n        showModalMessage(errorMessage, true);\r\n        setTimeout(() => { window.location.href = 'login.html?sessionExpired=true'; }, 1500); \r\n    };\r\n\r\n    const options = { \r\n        method, \r\n        headers: {},\r\n        // DEFINITIVE FIX: Tells the browser to always fetch a fresh copy from the server.\r\n        cache: 'no-cache' \r\n    };\r\n\r\n    if (token) {\r\n        options.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    if (body) {\r\n        if (isFormData) {\r\n            options.body = body;\r\n        } else {\r\n            options.headers['Content-Type'] = 'application/json';\r\n            options.body = JSON.stringify(body);\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(endpoint, options);\r\n        \r\n        if (response.status === 401 || response.status === 403) {\r\n            handleAuthError('Your session has expired. Please log in again.');\r\n            throw new Error('Authentication failed.');\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({ error: response.statusText }));\r\n            throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        if (response.status === 204) {\r\n            return null; // No content\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        showModalMessage(error.message, true);\r\n        throw error;\r\n    }\r\n}\r\n", "// js/pages/login.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the login page.\r\n */\r\nexport function handleLoginPage() {\r\n    const loginForm = document.getElementById(\"login-form\");\r\n    const errorMessage = document.getElementById(\"error-message\"); // Get error message element\r\n\r\n    // If login form is not found, exit the function\r\n    if (!loginForm) return;\r\n\r\n    // Check for session expired message in URL and display modal if present\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has('sessionExpired')) {\r\n        showModalMessage(\"Your session has expired. Please log in again.\", true);\r\n        // Clean the URL to remove the query parameter after displaying the message\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n    }\r\n\r\n    // Add event listener for the login form submission\r\n    loginForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        const email = document.getElementById(\"email\").value.trim();\r\n        const password = document.getElementById(\"password\").value;\r\n        \r\n        // Clear previous error messages\r\n        errorMessage.textContent = \"\";\r\n        errorMessage.classList.remove(\"visible\"); // Hide the error message element\r\n\r\n        // Basic client-side validation\r\n        if (!email || !password) {\r\n            errorMessage.textContent = \"Email and password are required.\";\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Send login credentials to the backend API\r\n            const data = await apiRequest(\"POST\", \"/api/login\", { email, password });\r\n            \r\n            // If login is successful and a token is received\r\n            if (data && data.token) {\r\n                localStorage.setItem(\"authToken\", data.token); // Store authentication token\r\n                localStorage.setItem(\"userRole\", data.role);   // Store user role\r\n                // Debugging: Log what's being stored\r\n                console.log('[login.js] Login successful. Stored authToken and userRole.');\r\n                console.log('[login.js] Stored Role:', data.role);\r\n                console.log('[login.js] Stored Token (first 20 chars):', data.token.substring(0, 20) + '...');\r\n\r\n\r\n                // Redirect based on user role\r\n                const destination = (data.role === \"super_admin\" || data.role === \"location_admin\") \r\n                                    ? \"suite-hub.html\" // Admins go to the app hub\r\n                                    : \"new-hire-view.html\"; // Regular employees go to their onboarding view\r\n                window.location.href = destination;\r\n            } else {\r\n                 // If no data or token, throw a generic login failed error\r\n                 throw new Error(\"Login failed. Please check your credentials.\");\r\n            }\r\n        } catch (error) {\r\n            // Display API error message or a generic one if no specific message\r\n            errorMessage.textContent = `Login Failed: ${error.message}`;\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            console.error('Login error:', error);\r\n        }\r\n    });\r\n}\r\n", "// js/pages/register.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the registration page.\r\n */\r\nexport function handleRegisterPage() {\r\n    const registerForm = document.getElementById(\"register-form\");\r\n    const errorMessage = document.getElementById(\"error-message\"); // Get error message element\r\n\r\n    // If register form is not found, exit the function\r\n    if (!registerForm) return;\r\n\r\n    // Add event listener for the registration form submission\r\n    registerForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        const companyName = document.getElementById(\"company-name\").value.trim();\r\n        const fullName = document.getElementById(\"full-name\").value.trim();\r\n        const email = document.getElementById(\"email\").value.trim();\r\n        const password = document.getElementById(\"password\").value;\r\n        \r\n        // Clear previous error messages\r\n        errorMessage.textContent = \"\";\r\n        errorMessage.classList.remove(\"visible\"); // Hide the error message element\r\n\r\n        // Basic client-side validation\r\n        if (!companyName || !fullName || !email || !password) {\r\n            errorMessage.textContent = \"All fields are required.\";\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Send registration data to the backend API\r\n            const data = await apiRequest(\"POST\", \"/api/register\", { companyName, fullName, email, password });\r\n            \r\n            // If registration is successful\r\n            if (data && data.message) {\r\n                showModalMessage(data.message, false); // Show success message\r\n                // Redirect to login page after a short delay\r\n                setTimeout(() => {\r\n                    window.location.href = \"login.html\";\r\n                }, 2000); // 2-second delay before redirecting\r\n            } else {\r\n                // If no data or message, throw a generic registration failed error\r\n                throw new Error(\"Registration failed. Please try again.\");\r\n            }\r\n        } catch (error) {\r\n            // Display API error message or a generic one if no specific message\r\n            errorMessage.textContent = `Registration Failed: ${error.message}`;\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            console.error('Registration error:', error);\r\n        }\r\n    });\r\n}\r\n", "import { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the dashboard page.\r\n */\r\nexport function handleDashboardPage() {\r\n    // Security check\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Elements ---\r\n    const onboardUserModal = document.getElementById('onboard-user-modal');\r\n    const onboardUserForm = document.getElementById('onboard-user-form');\r\n    const showOnboardModalBtn = document.getElementById('show-onboard-modal');\r\n    const modalCancelBtn = document.getElementById('modal-cancel-onboard');\r\n    const existingEmployeeSelect = document.getElementById('existing-employee-select');\r\n    const assignedTaskListInfo = document.getElementById('assigned-task-list-info');\r\n    const onboardModalStatusMessage = document.getElementById('onboard-modal-status-message');\r\n\r\n    const pendingCountEl = document.getElementById('pending-onboards-count');\r\n    const inProgressCountEl = document.getElementById('in-progress-count');\r\n    const completedCountEl = document.getElementById('completed-count');\r\n    const activityListEl = document.getElementById('activity-list');\r\n    \r\n    // --- State Variables ---\r\n    let allUsers = [];\r\n    let allChecklists = [];\r\n\r\n    // --- Helper Functions ---\r\n    const displayStatusMessage = (element, message, isError = false) => {\r\n        if (!element) return;\r\n        element.textContent = message;\r\n        element.className = isError ? 'error' : 'success';\r\n        setTimeout(() => element.textContent = '', 5000);\r\n    };\r\n\r\n    // --- Data Loading ---\r\n    async function loadDashboardData() {\r\n        try {\r\n            const [users, checklists, tasks] = await Promise.all([\r\n                apiRequest('GET', '/api/users'),\r\n                apiRequest('GET', '/api/checklists'),\r\n                apiRequest('GET', '/api/onboarding-tasks')\r\n            ]);\r\n            \r\n            allUsers = users;\r\n            allChecklists = checklists;\r\n\r\n            // Update stats and activity feed\r\n            updateStats(tasks);\r\n            updateActivityFeed(tasks);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error loading dashboard data:\", error);\r\n            showModalMessage(\"Could not load all dashboard data.\", true);\r\n        }\r\n    }\r\n\r\n    function updateStats(tasks) {\r\n        const userTasks = {};\r\n        tasks.forEach(task => {\r\n            if (!userTasks[task.user_id]) {\r\n                userTasks[task.user_id] = { total: 0, completed: 0 };\r\n            }\r\n            userTasks[task.user_id].total++;\r\n            if (task.completed) {\r\n                userTasks[task.user_id].completed++;\r\n            }\r\n        });\r\n\r\n        let pending = 0, inProgress = 0, completed = 0;\r\n        Object.values(userTasks).forEach(status => {\r\n            if (status.completed === 0) pending++;\r\n            else if (status.completed === status.total) completed++;\r\n            else inProgress++;\r\n        });\r\n        \r\n        if(pendingCountEl) pendingCountEl.textContent = pending;\r\n        if(inProgressCountEl) inProgressCountEl.textContent = inProgress;\r\n        if(completedCountEl) completedCountEl.textContent = completed;\r\n    }\r\n\r\n    function updateActivityFeed(tasks) {\r\n        if (!activityListEl) return;\r\n        activityListEl.innerHTML = '';\r\n        const recentTasks = tasks\r\n            .filter(t => t.completed)\r\n            .sort((a, b) => new Date(b.completed_at) - new Date(a.completed_at))\r\n            .slice(0, 5);\r\n        \r\n        if(recentTasks.length === 0) {\r\n            const placeholder = document.getElementById('activity-feed-placeholder');\r\n            if(placeholder) placeholder.style.display = 'block';\r\n        } else {\r\n             recentTasks.forEach(task => {\r\n                const li = document.createElement('li');\r\n                li.innerHTML = `<strong>${task.user_name}</strong> completed task: \"${task.description}\"`;\r\n                activityListEl.appendChild(li);\r\n            });\r\n        }\r\n    }\r\n    \r\n    async function populateEmployeeDropdown() {\r\n        if (!existingEmployeeSelect) return;\r\n        // Filter for users who are employees and not yet fully onboarded.\r\n        const unassignedUsers = allUsers.filter(user => user.role === 'employee');\r\n        \r\n        existingEmployeeSelect.innerHTML = '<option value=\"\">Select an employee...</option>';\r\n        unassignedUsers.forEach(user => {\r\n            const option = new Option(user.full_name, user.user_id);\r\n            existingEmployeeSelect.add(option);\r\n        });\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n    if (showOnboardModalBtn) {\r\n        showOnboardModalBtn.addEventListener('click', () => {\r\n            populateEmployeeDropdown();\r\n            if (onboardUserModal) onboardUserModal.style.display = 'flex';\r\n        });\r\n    }\r\n\r\n    if (modalCancelBtn) {\r\n        modalCancelBtn.addEventListener('click', () => {\r\n            if (onboardUserModal) onboardUserModal.style.display = 'none';\r\n        });\r\n    }\r\n\r\n    if (existingEmployeeSelect) {\r\n        existingEmployeeSelect.addEventListener('change', () => {\r\n            if (!assignedTaskListInfo) return;\r\n            const selectedUserId = existingEmployeeSelect.value;\r\n            const selectedEmployee = allUsers.find(user => String(user.user_id) === String(selectedUserId));\r\n            const position = selectedEmployee ? selectedEmployee.position : null;\r\n            \r\n            if (position) {\r\n                const matchingChecklist = allChecklists.find(c => c.position && c.position.toLowerCase() === position.toLowerCase());\r\n                assignedTaskListInfo.textContent = matchingChecklist \r\n                    ? `Will be assigned: \"${matchingChecklist.title}\"`\r\n                    : `No task list found for position: \"${position}\"`;\r\n            } else {\r\n                assignedTaskListInfo.textContent = 'Selected employee has no position set.';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Submit onboard employee form\r\n    if (onboardUserForm) {\r\n        onboardUserForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n\r\n            const selectedUserId = existingEmployeeSelect.value;\r\n            if (!selectedUserId) {\r\n                displayStatusMessage(onboardModalStatusMessage, 'Please select an employee.', true);\r\n                return;\r\n            }\r\n\r\n            const selectedEmployee = allUsers.find(user => String(user.user_id) === String(selectedUserId));\r\n            if (!selectedEmployee) {\r\n                displayStatusMessage(onboardModalStatusMessage, 'Selected employee not found. Please try again.', true);\r\n                return;\r\n            }\r\n\r\n            const employeePosition = selectedEmployee.position;\r\n            if (!employeePosition) {\r\n                displayStatusMessage(onboardModalStatusMessage, `This employee does not have a position set and cannot be assigned a task list.`, true);\r\n                return;\r\n            }\r\n\r\n            const matchingChecklist = allChecklists.find(checklist => \r\n                checklist.position && \r\n                checklist.position.toLowerCase() === employeePosition.toLowerCase()\r\n            );\r\n\r\n            if (!matchingChecklist) {\r\n                displayStatusMessage(onboardModalStatusMessage, `No task list found for position: \"${employeePosition}\". Please create one in Admin Settings > Task Lists.`, true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await apiRequest('POST', '/api/onboarding-tasks', {\r\n                    user_id: selectedUserId,\r\n                    checklist_id: matchingChecklist.id\r\n                }); \r\n\r\n                displayStatusMessage(onboardModalStatusMessage, `Task list \"${matchingChecklist.title}\" assigned to ${selectedEmployee.full_name} successfully!`, false);\r\n                onboardUserForm.reset(); \r\n                assignedTaskListInfo.textContent = ''; \r\n                \r\n                setTimeout(() => {\r\n                    if (onboardUserModal) onboardUserModal.style.display = 'none';\r\n                }, 1500);\r\n\r\n                loadDashboardData();\r\n\r\n            } catch (error) {\r\n                displayStatusMessage(onboardModalStatusMessage, `Error assigning task list: ${error.message}`, true);\r\n                console.error('Error assigning task list:', error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // --- Initial Load ---\r\n    loadDashboardData();\r\n}", "import { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\nexport function handleChecklistsPage() {\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    const addTaskBtn = document.getElementById('add-task-btn');\r\n    const tasksInputArea = document.getElementById('tasks-input-area');\r\n    const newChecklistForm = document.getElementById('new-checklist-form');\r\n    const checklistListDiv = document.getElementById('checklist-list');\r\n\r\n    // NEW: Modal elements for attaching documents\r\n    const attachDocumentModalOverlay = document.getElementById('attach-document-modal-overlay');\r\n    const attachDocumentListDiv = document.getElementById('attach-document-list');\r\n    const attachDocumentCancelBtn = document.getElementById('attach-document-cancel-btn');\r\n\r\n    let taskCounter = 0;\r\n    let currentTaskElement = null; // To keep track of which task's attach button was clicked\r\n\r\n    /**\r\n     * Adds a new task input field to the form.\r\n     */\r\n    const addNewTaskField = () => {\r\n        if (!tasksInputArea) return;\r\n\r\n        const taskGroup = document.createElement('div');\r\n        taskGroup.className = 'form-group task-input-group';\r\n        const inputId = `task-input-${taskCounter++}`;\r\n\r\n        taskGroup.innerHTML = `\r\n            <div style=\"display: flex; align-items: flex-end; gap: 10px;\">\r\n                <div style=\"flex-grow: 1;\">\r\n                    <label for=\"${inputId}\">Task Description</label>\r\n                    <input type=\"text\" id=\"${inputId}\" class=\"task-description-input\" required placeholder=\"Enter a task\">\r\n                </div>\r\n                <div class=\"task-actions\" style=\"display: flex; align-items: flex-end; gap: 5px; margin-bottom: 0;\">\r\n                    <button type=\"button\" class=\"btn btn-secondary btn-sm attach-file-btn\">Attach</button>\r\n                    <button type=\"button\" class=\"btn btn-secondary btn-sm remove-task-btn\">Remove</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"attached-document-info\" style=\"font-size: 0.8rem; color: var(--text-medium); margin-top: 5px; height: 1.2em;\"></div>\r\n        `;\r\n\r\n        tasksInputArea.appendChild(taskGroup);\r\n\r\n        // Add event listener for remove button\r\n        taskGroup.querySelector('.remove-task-btn').addEventListener('click', () => {\r\n            if (tasksInputArea.children.length > 1) {\r\n                taskGroup.remove();\r\n            } else {\r\n                showModalMessage(\"A task list must have at least one task.\", true);\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Loads existing checklists from the API and renders them.\r\n     */\r\n    const loadChecklists = async () => {\r\n        if (!checklistListDiv) return;\r\n        checklistListDiv.innerHTML = `<p style=\"color: var(--text-medium);\">Loading...</p>`;\r\n        try {\r\n            const checklists = await apiRequest('GET', '/api/checklists');\r\n            checklistListDiv.innerHTML = '';\r\n            if (checklists && checklists.length > 0) {\r\n                checklists.forEach(checklist => {\r\n                    const item = document.createElement('div');\r\n                    item.className = 'list-item';\r\n                    item.innerHTML = `<span><strong>${checklist.title}</strong> (For: ${checklist.position})</span>`;\r\n                    checklistListDiv.appendChild(item);\r\n                });\r\n            } else {\r\n                checklistListDiv.innerHTML = `<p style=\"color: var(--text-medium);\">No task lists created yet.</p>`;\r\n            }\r\n        } catch (e) {\r\n            checklistListDiv.innerHTML = `<p style=\"color:red;\">Could not load task lists: ${e.message}</p>`;\r\n            console.error('Error loading checklists:', e);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches documents from the API and populates the attach document modal.\r\n     */\r\n    const loadDocumentsForAttachModal = async () => {\r\n        if (!attachDocumentListDiv) return;\r\n        attachDocumentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading documents...</p>';\r\n        try {\r\n            const documents = await apiRequest('GET', '/api/documents');\r\n            attachDocumentListDiv.innerHTML = '';\r\n\r\n            if (documents && documents.length > 0) {\r\n                documents.forEach(doc => {\r\n                    const docItem = document.createElement('div');\r\n                    docItem.className = 'document-list-item';\r\n                    docItem.dataset.documentId = doc.document_id;\r\n                    docItem.dataset.documentName = doc.file_name; // Use file_name for actual attachment\r\n                    docItem.innerHTML = `\r\n                        <span>${doc.title} (<small>${doc.file_name}</small>)</span>\r\n                        <button class=\"btn btn-primary btn-sm select-document-btn\">Select</button>\r\n                    `;\r\n                    attachDocumentListDiv.appendChild(docItem);\r\n                });\r\n\r\n                // Add event listeners to select buttons\r\n                attachDocumentListDiv.querySelectorAll('.select-document-btn').forEach(button => {\r\n                    button.addEventListener('click', (e) => {\r\n                        const selectedDocItem = e.target.closest('.document-list-item');\r\n                        const documentId = selectedDocItem.dataset.documentId;\r\n                        const documentName = selectedDocItem.dataset.documentName;\r\n                        attachDocumentToTask(documentId, documentName);\r\n                        attachDocumentModalOverlay.style.display = 'none'; // Hide modal after selection\r\n                    });\r\n                });\r\n            } else {\r\n                attachDocumentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No documents available to attach. Upload some in the Documents section.</p>';\r\n            }\r\n        } catch (error) {\r\n            attachDocumentListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading documents: ${error.message}</p>`;\r\n            console.error('Error loading documents for modal:', error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Attaches a selected document to the current task being edited.\r\n     * @param {string} documentId - The ID of the document.\r\n     * @param {string} documentName - The name of the document file.\r\n     */\r\n    const attachDocumentToTask = (documentId, documentName) => {\r\n        if (currentTaskElement) {\r\n            // Store document info directly on the taskGroup element for later retrieval on form submit\r\n            currentTaskElement.dataset.attachedDocumentId = documentId;\r\n            currentTaskElement.dataset.attachedDocumentName = documentName;\r\n\r\n            // Update the display for the user\r\n            const infoDiv = currentTaskElement.querySelector('.attached-document-info');\r\n            if (infoDiv) {\r\n                infoDiv.innerHTML = `Attached: <a href=\"/uploads/${encodeURIComponent(documentName)}\" target=\"_blank\" style=\"color: var(--primary-accent);\">${documentName}</a>`;\r\n            }\r\n        }\r\n    };\r\n\r\n    // --- Event Listeners ---\r\n\r\n    if (addTaskBtn) {\r\n        addTaskBtn.addEventListener('click', addNewTaskField);\r\n    }\r\n\r\n    // NEW: Event delegation for dynamically added 'Attach' buttons\r\n    if (tasksInputArea) {\r\n        tasksInputArea.addEventListener('click', (e) => {\r\n            const attachButton = e.target.closest('.attach-file-btn');\r\n            if (attachButton) {\r\n                currentTaskElement = attachButton.closest('.task-input-group'); // Store reference to the parent task group\r\n                if (attachDocumentModalOverlay) {\r\n                    attachDocumentModalOverlay.style.display = 'flex'; // Show the modal\r\n                    loadDocumentsForAttachModal(); // Load documents every time modal is opened\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // NEW: Close attach document modal\r\n    if (attachDocumentCancelBtn) {\r\n        attachDocumentCancelBtn.addEventListener('click', () => {\r\n            if (attachDocumentModalOverlay) {\r\n                attachDocumentModalOverlay.style.display = 'none';\r\n            }\r\n        });\r\n    }\r\n\r\n    if (newChecklistForm) {\r\n        newChecklistForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const tasks = [];\r\n            document.querySelectorAll('.task-input-group').forEach(taskGroup => {\r\n                const descriptionInput = taskGroup.querySelector('.task-description-input');\r\n                if (descriptionInput && descriptionInput.value.trim()) {\r\n                    const task = { description: descriptionInput.value.trim() };\r\n                    // Check if a document was attached to this specific task input group\r\n                    if (taskGroup.dataset.attachedDocumentId) {\r\n                        task.documentId = taskGroup.dataset.attachedDocumentId;\r\n                        task.documentName = taskGroup.dataset.attachedDocumentName;\r\n                    }\r\n                    tasks.push(task);\r\n                }\r\n            });\r\n\r\n            if (tasks.length === 0) {\r\n                showModalMessage(\"Please add at least one task description.\", true);\r\n                return;\r\n            }\r\n\r\n            const payload = {\r\n                title: document.getElementById('new-checklist-title').value.trim(),\r\n                position: document.getElementById('new-checklist-position').value.trim(),\r\n                tasks,\r\n                // Add structure_type and time_group_count to payload if needed by backend\r\n                // structure_type: document.getElementById('structure-type-select').value,\r\n                // time_group_count: document.getElementById('time-group-count').value,\r\n            };\r\n\r\n            try {\r\n                await apiRequest('POST', '/api/checklists', payload);\r\n                showModalMessage('Task list created successfully!', false);\r\n                newChecklistForm.reset();\r\n                tasksInputArea.innerHTML = ''; // Clear all task input fields\r\n                addNewTaskField(); // Add one fresh task input field\r\n                loadChecklists(); // Reload the list of checklists\r\n            } catch (error) {\r\n                showModalMessage(`Error: ${error.message}`, true);\r\n                console.error('Error creating task list:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initial page load\r\n    if (tasksInputArea && tasksInputArea.childElementCount === 0) {\r\n        addNewTaskField();\r\n    }\r\n    loadChecklists();\r\n}\r\n", "// js/pages/admin.js\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n// SVG icon for the delete button, extracted to a constant for cleaner template literals\r\nconst DELETE_SVG_ICON = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>`;\r\n\r\n/**\r\n * Handles all logic for the admin settings page.\r\n */\r\nexport function handleAdminPage() {\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem('userRole');\r\n\r\n    if (!authToken || (userRole !== 'super_admin' && userRole !== 'location_admin')) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Hide sections based on user role for UI consistency (backend also enforces this)\r\n    if (userRole === 'location_admin') {\r\n        const inviteAdminCard = document.getElementById('invite-admin-card');\r\n        if (inviteAdminCard) {\r\n            inviteAdminCard.style.display = 'none';\r\n        }\r\n        const manageLocationsCard = document.getElementById('manage-locations-card');\r\n        if (manageLocationsCard) {\r\n            manageLocationsCard.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // --- DOM Element Selection ---\r\n    const locationListDiv = document.getElementById('location-list');\r\n    const newLocationForm = document.getElementById('new-location-form');\r\n    const newLocationNameInput = document.getElementById('new-location-name');\r\n    const newLocationAddressInput = document.getElementById('new-location-address');\r\n    const newLocationStatusMessage = document.getElementById('new-location-status-message');\r\n    const userListDiv = document.getElementById('user-list');\r\n    const inviteAdminForm = document.getElementById('invite-admin-form');\r\n    const adminLocationSelect = document.getElementById('admin-location-select');\r\n    const inviteAdminStatusMessage = document.getElementById('invite-admin-status-message');\r\n    const inviteEmployeeForm = document.getElementById('invite-employee-form');\r\n    const employeeLocationSelect = document.getElementById('employee-location-select'); \r\n    const employeeAvailabilityGrid = document.getElementById('employee-availability-grid');\r\n    const inviteEmployeeStatusMessage = document.getElementById('invite-employee-status-message');\r\n\r\n    // Business Settings Form Elements\r\n    const businessSettingsForm = document.getElementById('business-settings-form');\r\n    const operatingHoursStartInput = document.getElementById('operating-hours-start');\r\n    const operatingHoursEndInput = document.getElementById('operating-hours-end');\r\n    const currentOperatingHoursDisplay = document.getElementById('current-operating-hours-display');\r\n    const businessSettingsStatusMessage = document.getElementById('business-settings-status-message');\r\n\r\n\r\n    // Default business hours for availability generation, fetched from backend if available\r\n    let businessOperatingStartHour = 0; // Default to 00:00 (midnight)\r\n    let businessOperatingEndHour = 24; // Default to 24:00 (midnight next day)\r\n\r\n    // --- Helper function to display local status messages ---\r\n    /**\r\n     * Displays a status message on a specified DOM element.\r\n     * @param {HTMLElement} element - The DOM element to display the message in.\r\n     * @param {string} message - The message text.\r\n     * @param {boolean} [isError=false] - True if the message is an error, false for success.\r\n     */\r\n    function displayStatusMessage(element, message, isError = false) {\r\n        if (!element) return;\r\n        element.innerHTML = message;\r\n        element.classList.remove('success', 'error'); // Clear previous states\r\n        element.classList.add(isError ? 'error' : 'success');\r\n        setTimeout(() => {\r\n            element.textContent = '';\r\n            element.classList.remove('success', 'error');\r\n        }, 5000); // Clear message after 5 seconds\r\n    }\r\n\r\n    // NEW: Helper function to convert 24-hour time string to 12-hour format\r\n    function convertTo12Hour(time24) {\r\n        if (!time24) return 'N/A';\r\n        const [hour, minute] = time24.split(':');\r\n        const h = parseInt(hour, 10);\r\n        const ampm = h >= 12 ? 'PM' : 'AM';\r\n        const displayHour = h % 12 === 0 ? 12 : h % 12;\r\n        return `${displayHour}:${minute} ${ampm}`;\r\n    }\r\n\r\n    // --- Data Loading Functions ---\r\n\r\n    /**\r\n     * Fetches and displays existing locations.\r\n     */\r\n    async function loadLocations() {\r\n        if (!locationListDiv) return;\r\n        locationListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading locations...</p>'; // Show loading state\r\n        try {\r\n            // API call to get locations (backend filters by location_admin role)\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            locationListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const listItem = document.createElement('div');\r\n                    listItem.className = 'list-item';\r\n                    listItem.innerHTML = `\r\n                        <span><strong>${loc.location_name}</strong> (${loc.location_address})</span>\r\n                        <button class=\"btn-delete\" data-id=\"${loc.location_id}\" data-type=\"location\" title=\"Delete Location\">\r\n                            ${DELETE_SVG_ICON}\r\n                        </button>\r\n                    `;\r\n                    locationListDiv.appendChild(listItem);\r\n                });\r\n            } else {\r\n                locationListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No locations added yet.</p>';\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading locations: ${error.message}`, true); \r\n            console.error('Error loading locations:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populates the location dropdowns for inviting new admins and employees.\r\n     */\r\n    async function populateLocationDropdowns() {\r\n        if (!adminLocationSelect || !employeeLocationSelect) return;\r\n        try {\r\n            // API call to get locations (backend filters by location_admin role)\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            \r\n            adminLocationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n            employeeLocationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const adminOption = new Option(loc.location_name, loc.location_id);\r\n                    const employeeOption = new Option(loc.location_name, loc.location_id);\r\n                    adminLocationSelect.add(adminOption);\r\n                    employeeLocationSelect.add(employeeOption);\r\n                });\r\n            } else {\r\n                adminLocationSelect.innerHTML = '<option value=\"\">No locations available</option>';\r\n                employeeLocationSelect.innerHTML = '<option value=\"\">No locations available</option>';\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to populate location dropdowns:\", error);\r\n            // Display a message to the user if dropdowns can't be loaded\r\n            showModalMessage('Failed to load locations for dropdowns. Please try again.', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches and displays all users (admins and employees).\r\n     */\r\n    async function loadUsers() {\r\n        if (!userListDiv) return;\r\n        userListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading users...</p>'; // Show loading state\r\n        try {\r\n            // API call to get users (backend filters by location_admin role)\r\n            const users = await apiRequest('GET', '/api/users');\r\n            userListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (users && users.length > 0) {\r\n                const userGroups = {\r\n                    super_admin: [],\r\n                    location_admin: [],\r\n                    employee: []\r\n                };\r\n\r\n                // Categorize users by role\r\n                users.forEach(user => {\r\n                    if (userGroups[user.role]) {\r\n                        userGroups[user.role].push(user);\r\n                    }\r\n                });\r\n\r\n                const groupOrder = ['super_admin', 'location_admin', 'employee'];\r\n                const groupTitles = {\r\n                    super_admin: 'Super Admins',\r\n                    location_admin: 'Location Admins',\r\n                    employee: 'Employees'\r\n                };\r\n\r\n                // Render users grouped by role\r\n                groupOrder.forEach(role => {\r\n                    const group = userGroups[role];\r\n                    if (group.length > 0) {\r\n                        const groupHeader = document.createElement('h4');\r\n                        groupHeader.textContent = groupTitles[role];\r\n                        userListDiv.appendChild(groupHeader);\r\n                        \r\n                        group.forEach(user => {\r\n                            let userDisplayTitle;\r\n                            // Determine the title to display based on role or position\r\n                            // NEW LOGIC: Use role for Super Admin and Location Admin\r\n                            if (user.role === 'super_admin') {\r\n                                userDisplayTitle = 'Super Admin';\r\n                            } else if (user.role === 'location_admin') {\r\n                                userDisplayTitle = 'Location Admin';\r\n                            } else { // employee role\r\n                                userDisplayTitle = (user.position && user.position.trim() !== '') ? user.position : 'N/A';\r\n                            }\r\n\r\n                            const userLocationDisplay = (user.location_name && user.location_name.trim() !== '') \r\n                                ? `<br><small style=\"color:var(--text-medium);\">Location: ${user.location_name}</small>` \r\n                                : ''; // Only display location line if location_name exists\r\n\r\n                            const listItem = document.createElement('div');\r\n                            listItem.className = 'list-item';\r\n                            listItem.innerHTML = `\r\n                                <span>\r\n                                    <strong>${user.full_name}</strong> (${userDisplayTitle}) \r\n                                    ${userLocationDisplay}\r\n                                </span>\r\n                                <button class=\"btn-delete\" data-id=\"${user.user_id}\" data-type=\"user\" title=\"Delete User\">\r\n                                    ${DELETE_SVG_ICON}\r\n                                </button>\r\n                            `;\r\n                            userListDiv.appendChild(listItem);\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                userListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No users found.</p>';\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading users: ${error.message}`, true);\r\n            console.error('Error loading users:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches business operating hours to set the range for availability inputs.\r\n     * Also displays current hours.\r\n     */\r\n    async function fetchBusinessHours() {\r\n        if (!currentOperatingHoursDisplay || !operatingHoursStartInput || !operatingHoursEndInput) return;\r\n\r\n        currentOperatingHoursDisplay.textContent = 'Loading current hours...';\r\n        try {\r\n            const settings = await apiRequest('GET', '/api/settings/business');\r\n            if (settings) {\r\n                // Update internal variables for availability generation\r\n                businessOperatingStartHour = parseInt((settings.operating_hours_start || '00:00').split(':')[0], 10);\r\n                businessOperatingEndHour = parseInt((settings.operating_hours_end || '24:00').split(':')[0], 10);\r\n                \r\n                // Set the form input values (still 24-hour format for input type=\"time\")\r\n                operatingHoursStartInput.value = settings.operating_hours_start || '';\r\n                operatingHoursEndInput.value = settings.operating_hours_end || '';\r\n\r\n                // Display current hours in 12-hour format\r\n                const displayStart = convertTo12Hour(settings.operating_hours_start);\r\n                const displayEnd = convertTo12Hour(settings.operating_hours_end);\r\n                currentOperatingHoursDisplay.textContent = `Current: ${displayStart} - ${displayEnd}`;\r\n                currentOperatingHoursDisplay.style.color = 'var(--text-light)'; // Reset color if it was an error before\r\n\r\n                generateAvailabilityInputs(); // Regenerate inputs with correct hours\r\n            } else {\r\n                currentOperatingHoursDisplay.textContent = 'Current hours: Not set';\r\n                currentOperatingHoursDisplay.style.color = 'var(--text-medium)';\r\n                generateAvailabilityInputs(); // Use defaults if no settings\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch business hours, using defaults:\", error);\r\n            currentOperatingHoursDisplay.textContent = `Error loading current hours: ${error.message}`;\r\n            currentOperatingHoursDisplay.style.color = '#ff8a80'; // Error color\r\n            generateAvailabilityInputs(); // Continue with default 0-24 hours if fetch fails\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates time input dropdowns for weekly availability.\r\n     */\r\n    function generateAvailabilityInputs() {\r\n        if (!employeeAvailabilityGrid) return;\r\n        employeeAvailabilityGrid.innerHTML = ''; // Clear existing inputs\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        \r\n        days.forEach(day => {\r\n            const dayId = day.toLowerCase();\r\n            const availabilityHtml = `\r\n                <label for=\"avail-${dayId}-start\">${day}</label>\r\n                <div class=\"time-range\">\r\n                    <select id=\"avail-${dayId}-start\" data-day=\"${dayId}\" data-type=\"start\">\r\n                        ${generateTimeOptions(businessOperatingStartHour, businessOperatingEndHour)}\r\n                    </select>\r\n                    <span>-</span>\r\n                    <select id=\"avail-${dayId}-end\" data-day=\"${dayId}\" data-type=\"end\">\r\n                        ${generateTimeOptions(businessOperatingStartHour, businessOperatingEndHour)}\r\n                    </select>\r\n                </div>\r\n            `;\r\n            const div = document.createElement('div');\r\n            div.className = 'availability-day';\r\n            div.innerHTML = availabilityHtml;\r\n            employeeAvailabilityGrid.appendChild(div);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates <option> tags for time select dropdowns.\r\n     * @param {number} startHour - The starting hour (0-23).\r\n     * @param {number} endHour - The ending hour (0-24, where 24 means end of day).\r\n     * @returns {string} HTML string of option tags.\r\n     */\r\n    function generateTimeOptions(startHour = 0, endHour = 24) {\r\n        let options = '<option value=\"\">Not Available</option>'; // Default \"Not Available\"\r\n        for (let i = startHour; i <= endHour; i++) { // Include endHour for full range, e.g., 17:00\r\n            const hour24 = i;\r\n            const displayHour = hour24 % 12 === 0 ? 12 : hour24 % 12;\r\n            const ampm = hour24 < 12 ? 'AM' : 'PM';\r\n            const timeValue = `${String(hour24).padStart(2, '0')}:00`; // Value for input type=\"time\" (24-hour)\r\n            const displayText = `${displayHour}:00 ${ampm}`; // Text for display (12-hour)\r\n            options += `<option value=\"${timeValue}\">${displayText}</option>`;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Handle new location form submission\r\n    if (newLocationForm) {\r\n        newLocationForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const locationData = {\r\n                location_name: newLocationNameInput.value.trim(),\r\n                location_address: newLocationAddressInput.value.trim()\r\n            };\r\n            if (!locationData.location_name || !locationData.location_address) {\r\n                return displayStatusMessage(newLocationStatusMessage, 'Location name and address are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/locations', locationData);\r\n                displayStatusMessage(newLocationStatusMessage, 'Location created successfully!', false);\r\n                newLocationForm.reset(); // Clear the form\r\n                loadLocations(); // Reload location list\r\n                populateLocationDropdowns(); // Update dropdowns\r\n            } catch (error) {\r\n                displayStatusMessage(newLocationStatusMessage, `Error creating location: ${error.message}`, true);\r\n                console.error('Error creating location:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle delete actions for locations and users using event delegation\r\n    const handleDelete = async (e) => {\r\n        const deleteBtn = e.target.closest('.btn-delete');\r\n        if (deleteBtn) {\r\n            const id = deleteBtn.dataset.id;\r\n            const type = deleteBtn.dataset.type; // 'user' or 'location'\r\n            \r\n            let confirmMessage = `Are you sure you want to delete this ${type}? This action cannot be undone.`;\r\n            if (type === 'location') {\r\n                confirmMessage = `Are you sure you want to delete this location? All users associated with this location must be reassigned or deleted first. This cannot be undone.`;\r\n            } else if (type === 'user') {\r\n                 confirmMessage = `Are you sure you want to delete this user? This will also remove any onboarding tasks assigned to them. This cannot be undone.`;\r\n            }\r\n\r\n            const confirmed = await showConfirmModal(confirmMessage);\r\n            if (confirmed) {\r\n                try {\r\n                    await apiRequest('DELETE', `/api/${type}s/${id}`); // Call the generic delete endpoint\r\n                    showModalMessage(`${type.charAt(0).toUpperCase() + type.slice(1)} deleted successfully.`, false);\r\n                    if (type === 'location') {\r\n                        loadLocations(); // Reload locations\r\n                        populateLocationDropdowns(); // Update dropdowns\r\n                    } else if (type === 'user') {\r\n                        loadUsers(); // Reload users\r\n                    }\r\n                } catch (error) {\r\n                    showModalMessage(`Error deleting ${type}: ${error.message}`, true);\r\n                    console.error(`Error deleting ${type}:`, error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Attach delegated event listeners to the parent containers\r\n    if (locationListDiv) locationListDiv.addEventListener('click', handleDelete);\r\n    if (userListDiv) userListDiv.addEventListener('click', handleDelete);\r\n\r\n    // Handle invite new admin form submission\r\n    if (inviteAdminForm) {\r\n        inviteAdminForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const adminData = {\r\n                full_name: document.getElementById('admin-name').value.trim(),\r\n                email: document.getElementById('admin-email').value.trim(),\r\n                password: document.getElementById('admin-password').value,\r\n                location_id: adminLocationSelect.value || null\r\n            };\r\n            if (!adminData.full_name || !adminData.email || !adminData.password || !adminData.location_id) {\r\n                return displayStatusMessage(inviteAdminStatusMessage, 'Full name, email, password, and location are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/invite-admin', adminData);\r\n                displayStatusMessage(inviteAdminStatusMessage, 'Admin invited successfully!', false);\r\n                inviteAdminForm.reset(); // Clear the form\r\n                loadUsers(); // Reload user list to show new admin\r\n            } catch (error) {\r\n                displayStatusMessage(inviteAdminStatusMessage, `Error: ${error.message}`, true);\r\n                console.error('Error inviting admin:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle invite new employee form submission\r\n    if (inviteEmployeeForm) {\r\n        inviteEmployeeForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const availability = {};\r\n            // Collect availability data from generated selects\r\n            document.querySelectorAll('#employee-availability-grid select').forEach(select => {\r\n                const day = select.dataset.day;\r\n                const type = select.dataset.type; // 'start' or 'end'\r\n                if (select.value) { // Only add if a time is selected (not \"Not Available\")\r\n                    if (!availability[day]) availability[day] = {};\r\n                    availability[day][type] = select.value;\r\n                }\r\n            });\r\n\r\n            const employeeData = {\r\n                full_name: document.getElementById('employee-name').value.trim(),\r\n                email: document.getElementById('employee-email').value.trim(),\r\n                password: document.getElementById('employee-password').value,\r\n                position: document.getElementById('employee-position').value.trim(),\r\n                employee_id: document.getElementById('employee-id').value.trim(),\r\n                employment_type: document.getElementById('employee-type').value,\r\n                location_id: employeeLocationSelect.value || null,\r\n                availability: Object.keys(availability).length > 0 ? availability : null // Send as JSON object or null\r\n            };\r\n\r\n            if (!employeeData.full_name || !employeeData.email || !employeeData.password || !employeeData.location_id) {\r\n                return displayStatusMessage(inviteEmployeeStatusMessage, 'Name, email, password, and location are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/invite-employee', employeeData);\r\n                displayStatusMessage(inviteEmployeeStatusMessage, 'Employee invited successfully!', false);\r\n                inviteEmployeeForm.reset(); // Clear the form\r\n                generateAvailabilityInputs(); // Regenerate default availability inputs\r\n                loadUsers(); // Reload user list to show new employee\r\n            } catch (error) {\r\n                displayStatusMessage(inviteEmployeeStatusMessage, `Error: ${error.message}`, true);\r\n                console.error('Error inviting employee:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle business settings form submission\r\n    if (businessSettingsForm) {\r\n        businessSettingsForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const start_time = operatingHoursStartInput.value;\r\n            const end_time = operatingHoursEndInput.value;\r\n\r\n            if (!start_time || !end_time) {\r\n                displayStatusMessage(businessSettingsStatusMessage, 'Both start and end times are required.', true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Send update request to backend\r\n                await apiRequest('PUT', '/api/settings/business', {\r\n                    operating_hours_start: start_time,\r\n                    operating_hours_end: end_time\r\n                });\r\n                displayStatusMessage(businessSettingsStatusMessage, 'Operating hours updated successfully!', false);\r\n                fetchBusinessHours(); // Refresh displayed hours and availability inputs\r\n            } catch (error) {\r\n                displayStatusMessage(businessSettingsStatusMessage, `Error updating hours: ${error.message}`, true);\r\n                console.error('Error updating business settings:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    // Fetch business hours first to correctly set availability input ranges\r\n    fetchBusinessHours().then(() => {\r\n        // Then load other data that might depend on business hours or just needs to be loaded\r\n        loadLocations();\r\n        populateLocationDropdowns();\r\n        loadUsers();\r\n    });\r\n}\r\n", "// js/pages/account.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the account page.\r\n */\r\nexport function handleAccountPage() {\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Get elements from the DOM\r\n    const displaySubscriptionPlan = document.getElementById('display-subscription-plan');\r\n    const updateProfileForm = document.getElementById('update-profile-form');\r\n    const profileNameInput = document.getElementById('profile-name');\r\n    const profileEmailInput = document.getElementById('profile-email');\r\n    const currentPasswordInput = document.getElementById('current-password');\r\n    const newPasswordInput = document.getElementById('new-password');\r\n\r\n    /**\r\n     * Fetches the current user's profile data and populates the form and display elements.\r\n     */\r\n    async function loadProfile() {\r\n        // Set loading text while fetching\r\n        if (profileNameInput) profileNameInput.value = 'Loading...';\r\n        if (profileEmailInput) profileEmailInput.value = 'Loading...';\r\n\r\n        try {\r\n            // Assumes an API endpoint like '/users/me' to get the current user's data\r\n            const user = await apiRequest('GET', '/api/users/me'); \r\n            if (user) {\r\n                if (profileNameInput) profileNameInput.value = user.full_name;\r\n                if (profileEmailInput) profileEmailInput.value = user.email;\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading profile: ${error.message}`, true);\r\n            console.error('Error loading profile:', error);\r\n            if (profileNameInput) profileNameInput.value = 'Error loading data';\r\n            if (profileEmailInput) profileEmailInput.value = 'Error loading data';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches and displays the user's subscription plan.\r\n     */\r\n    async function loadSubscriptionPlan() {\r\n        if (!displaySubscriptionPlan) return;\r\n        displaySubscriptionPlan.textContent = 'Loading...'; // Show loading state\r\n        try {\r\n            // Fetch subscription status from the backend\r\n            const response = await apiRequest('GET', '/api/subscription-status');\r\n            if (response && response.plan) {\r\n                displaySubscriptionPlan.textContent = response.plan;\r\n            } else {\r\n                displaySubscriptionPlan.textContent = 'N/A';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading subscription plan:', error);\r\n            displaySubscriptionPlan.textContent = 'Error';\r\n            showModalMessage(`Error loading subscription plan: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    // Add event listener for the profile update form\r\n    if (updateProfileForm) {\r\n        updateProfileForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n\r\n            const fullName = profileNameInput.value.trim();\r\n            const email = profileEmailInput.value.trim();\r\n            const currentPassword = currentPasswordInput.value;\r\n            const newPassword = newPasswordInput.value;\r\n\r\n            const updateData = {\r\n                full_name: fullName,\r\n                email: email\r\n            };\r\n\r\n            // Only include password fields if the user has entered a new password.\r\n            // The backend should require the current password for security.\r\n            if (newPassword) {\r\n                if (!currentPassword) {\r\n                     showModalMessage('To change your password, you must provide your current password.', true);\r\n                     return;\r\n                }\r\n                updateData.current_password = currentPassword;\r\n                updateData.new_password = newPassword;\r\n            }\r\n\r\n            try {\r\n                // Send PUT request to update the user's profile\r\n                await apiRequest('PUT', '/api/users/me', updateData); \r\n                showModalMessage('Profile updated successfully!', false);\r\n                \r\n                // Clear password fields after successful submission\r\n                if(currentPasswordInput) currentPasswordInput.value = '';\r\n                if(newPasswordInput) newPasswordInput.value = '';\r\n\r\n                // Reload profile to reflect updated info (e.g., if email changed)\r\n                loadProfile(); \r\n            } catch (error) {\r\n                showModalMessage(`Error updating profile: ${error.message}`, true);\r\n                console.error('Error updating profile:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    loadProfile(); // Load user profile data when the page loads\r\n    loadSubscriptionPlan(); // Load subscription plan when the page loads\r\n}\r\n", "// js/pages/documents.js\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the documents page.\r\n */\r\nexport function handleDocumentsPage() {\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Get elements from the DOM\r\n    const uploadForm = document.getElementById('upload-document-form');\r\n    const documentListDiv = document.getElementById('document-list');\r\n    const progressContainer = document.getElementById('upload-progress-container');\r\n    const progressFill = document.getElementById('upload-progress-fill');\r\n    const progressText = document.getElementById('upload-progress-text');\r\n\r\n    /**\r\n     * Fetches all documents from the API and renders them in the list.\r\n     */\r\n    async function loadDocuments() {\r\n        if (!documentListDiv) return;\r\n        documentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading documents...</p>'; // Show loading state\r\n\r\n        try {\r\n            const documents = await apiRequest('GET', '/api/documents'); // Fetch documents from backend\r\n            documentListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (documents && documents.length > 0) {\r\n                documents.forEach(doc => {\r\n                    const docItem = document.createElement('div');\r\n                    docItem.className = 'document-item';\r\n                    docItem.innerHTML = `\r\n                        <h4>${doc.title}</h4>\r\n                        <p><strong>File:</strong> ${doc.file_name}</p>\r\n                        <p><strong>Description:</strong> ${doc.description || 'N/A'}</p>\r\n                        <p style=\"font-size: 0.8em; color: var(--text-medium);\">Uploaded by: ${doc.uploaded_by_name || 'Unknown'}</p>\r\n                        <p style=\"font-size: 0.8em; color: var(--text-medium);\">Uploaded: ${new Date(doc.uploaded_at).toLocaleDateString()}</p>\r\n                        <div class=\"actions\">\r\n                            <a href=\"/uploads/${encodeURIComponent(doc.file_name)}\" target=\"_blank\" class=\"btn btn-secondary btn-sm\" title=\"Download Document\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"/>\r\n                                    <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"/>\r\n                                </svg>\r\n                            </a>\r\n                            <button class=\"btn-delete\" data-doc-id=\"${doc.document_id}\" title=\"Delete Document\">\r\n                               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 1 0 0 1-2 2H5a2 1 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>\r\n                            </button>\r\n                        </div>\r\n                    `;\r\n                    documentListDiv.appendChild(docItem);\r\n                });\r\n            } else {\r\n                documentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No documents uploaded yet.</p>';\r\n            }\r\n        } catch (error) {\r\n            documentListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading documents: ${error.message}</p>`;\r\n            console.error('Error loading documents:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of a document.\r\n     * @param {string} documentId - The ID of the document to delete.\r\n     */\r\n    async function deleteDocument(documentId) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to delete this document? This cannot be undone and will permanently remove the file.', 'Delete');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/documents/${documentId}`); // Call backend delete endpoint\r\n                showModalMessage('Document deleted successfully!', false);\r\n                loadDocuments(); // Refresh the document list\r\n            } catch (error) {\r\n                showModalMessage(`Error deleting document: ${error.message}`, true);\r\n                console.error('Error deleting document:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Event listener for the document list (uses event delegation for delete buttons)\r\n    if (documentListDiv) {\r\n        documentListDiv.addEventListener('click', (event) => {\r\n            const deleteButton = event.target.closest('.btn-delete');\r\n            if (deleteButton) {\r\n                const documentId = deleteButton.dataset.docId;\r\n                deleteDocument(documentId);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Event listener for the upload form submission\r\n    if (uploadForm) {\r\n        uploadForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            \r\n            const title = document.getElementById('document-title').value;\r\n            const description = document.getElementById('document-description').value;\r\n            const fileInput = document.getElementById('document-file');\r\n            const file = fileInput.files[0];\r\n\r\n            if (!file || !title) {\r\n                showModalMessage('Please provide a title and select a file.', true);\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('title', title);\r\n            formData.append('description', description);\r\n            formData.append('document', file); // 'document' must match the field name in multer upload.single()\r\n\r\n            // Show and reset the progress bar\r\n            if (progressContainer) progressContainer.style.display = 'block';\r\n            if (progressText) progressText.style.display = 'block';\r\n            if (progressFill) progressFill.style.width = '0%';\r\n            if (progressText) progressText.textContent = '0%';\r\n\r\n            try {\r\n                // Use apiRequest with isFormData=true and onProgress callback\r\n                await apiRequest('POST', '/api/documents', formData, true, (event) => {\r\n                    // This is the onProgress callback for apiRequest\r\n                    if (event.lengthComputable) {\r\n                        const percentComplete = Math.round((event.loaded / event.total) * 100);\r\n                        if (progressFill) progressFill.style.width = `${percentComplete}%`;\r\n                        if (progressText) progressText.textContent = `${percentComplete}%`;\r\n                    }\r\n                });\r\n                showModalMessage('Document uploaded successfully!', false);\r\n                uploadForm.reset(); // Clear the form fields\r\n                loadDocuments(); // Refresh the list to show the newly uploaded document\r\n            } catch (error) {\r\n                showModalMessage(`Upload failed: ${error.message}`, true);\r\n                console.error('Error uploading document:', error);\r\n            } finally {\r\n                // Hide the progress bar after completion or failure\r\n                if (progressContainer) progressContainer.style.display = 'none';\r\n                if (progressText) progressText.style.display = 'none';\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load ---\r\n    loadDocuments(); // Load documents when the page loads\r\n}\r\n", "// js/pages/hiring.js - MASTER SOLUTION VERSION\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the hiring page.\r\n */\r\nexport function handleHiringPage() {\r\n    // Security check: Redirect if not logged in\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Elements ---\r\n    const newJobPostingForm = document.getElementById('new-job-posting-form');\r\n    const jobTitleInput = document.getElementById('job-title');\r\n    const jobDescriptionTextarea = document.getElementById('job-description');\r\n    const jobRequirementsTextarea = document.getElementById('job-requirements');\r\n    const jobLocationSelect = document.getElementById('job-location-select');\r\n    const jobPostingStatusMessage = document.getElementById('job-posting-status-message');\r\n\r\n    const jobPostingsListDiv = document.getElementById('job-postings-list');\r\n    const applicantsListDiv = document.getElementById('applicants-list');\r\n\r\n    // --- Helper function for local status messages ---\r\n    /**\r\n     * Displays a status message on a specified DOM element.\r\n     * @param {HTMLElement} element - The DOM element to display the message in.\r\n     * @param {string} message - The message text.\r\n     * @param {boolean} [isError=false] - True if the message is an error, false for success.\r\n     */\r\n    function displayStatusMessage(element, message, isError = false) {\r\n        if (!element) return;\r\n        element.innerHTML = message;\r\n        element.classList.remove('success', 'error'); // Clear previous states\r\n        element.classList.add(isError ? 'error' : 'success');\r\n        setTimeout(() => {\r\n            element.textContent = '';\r\n            element.classList.remove('success', 'error');\r\n        }, 5000); // Clear message after 5 seconds\r\n    }\r\n\r\n    // --- Data Loading Functions ---\r\n\r\n    /**\r\n     * Loads locations from the API and populates the job posting form's location dropdown.\r\n     */\r\n    async function loadLocationsForJobPostingForm() {\r\n        if (!jobLocationSelect) return;\r\n        jobLocationSelect.innerHTML = '<option value=\"\">Loading locations...</option>'; // Show loading state\r\n        try {\r\n            const locations = await apiRequest('GET', '/api/locations'); \r\n            jobLocationSelect.innerHTML = '<option value=\"\">Select Location</option>'; // Default empty option\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const option = new Option(loc.location_name, loc.location_id);\r\n                    jobLocationSelect.add(option);\r\n                });\r\n            } else {\r\n                jobLocationSelect.innerHTML = '<option value=\"\">No locations available</p>'; // Ensure a closing tag\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading locations for job posting form:', error);\r\n            jobLocationSelect.innerHTML = '<option value=\"\">Error loading locations</option>';\r\n            displayStatusMessage(jobPostingStatusMessage, `Error loading locations: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches current job postings from the API and renders them into the job postings list.\r\n     */\r\n    async function loadCurrentJobPostings() {\r\n        if (!jobPostingsListDiv) return;\r\n        jobPostingsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading job postings...</p>'; // Show loading state\r\n        try {\r\n            const jobPostings = await apiRequest('GET', '/api/job-postings'); \r\n            jobPostingsListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (jobPostings && jobPostings.length > 0) {\r\n                jobPostings.forEach(post => {\r\n                    const postItem = document.createElement('div');\r\n                    postItem.className = 'job-posting-item';\r\n                    postItem.innerHTML = `\r\n                        <h4>${post.title}</h4>\r\n                        <p style=\"font-size: 0.8em; color: var(--text-medium);\">\r\n                            Location: ${post.location_name || 'Company Wide'}<br>\r\n                            Posted: ${new Date(post.created_at).toLocaleDateString()}\r\n                        </p>\r\n                        <div class=\"job-posting-actions\">\r\n                            <a href=\"apply.html?jobId=${post.id}\" class=\"btn btn-secondary btn-sm\" target=\"_blank\">View Public Ad</a>\r\n                            <button class=\"btn btn-secondary btn-sm btn-delete-job-posting\" data-id=\"${post.id}\">Delete</button>\r\n                        </div>\r\n                    `;\r\n                    jobPostingsListDiv.appendChild(postItem);\r\n                });\r\n                // Attach event listeners for dynamically created delete buttons\r\n                jobPostingsListDiv.querySelectorAll('.btn-delete-job-posting').forEach(button => {\r\n                    button.addEventListener('click', (e) => deleteJobPosting(e.target.dataset.id));\r\n                });\r\n            } else {\r\n                jobPostingsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No job postings found.</p>';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading job postings:', error);\r\n            jobPostingsListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading job postings: ${error.message}</p>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches recent applicants from the API and renders them into the applicants list.\r\n     */\r\n    async function loadRecentApplicants() {\r\n        if (!applicantsListDiv) return;\r\n        applicantsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading applicants...</p>'; // Show loading state\r\n        try {\r\n            const applicants = await apiRequest('GET', '/api/applicants'); \r\n            applicantsListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (applicants && applicants.length > 0) {\r\n                applicants.forEach(applicant => {\r\n                    const applicantItem = document.createElement('div');\r\n                    applicantItem.className = 'applicant-item'; \r\n                    applicantItem.innerHTML = `\r\n                        <div>\r\n                            <h4>${applicant.name} <span style=\"font-size:0.8em; color:var(--text-medium);\">(${applicant.job_title || 'N/A'})</span></h4>\r\n                            <p style=\"font-size: 0.8em; color: var(--text-medium); margin-bottom: 5px;\">Email: ${applicant.email}</p>\r\n                            ${applicant.phone ? `<p style=\"font-size: 0.8em; color: var(--text-medium); margin-bottom: 5px;\">Phone: ${applicant.phone}</p>` : ''}\r\n                            <p style=\"font-size: 0.8em; color: var(--text-medium);\">Applied: ${new Date(applicant.applied_at).toLocaleDateString()}</p>\r\n                        </div>\r\n                        <div class=\"job-posting-actions\"> \r\n                            <button class=\"btn btn-secondary btn-sm btn-delete-applicant\" data-id=\"${applicant.id}\">Archive</button>\r\n                        </div>\r\n                    `;\r\n                    applicantsListDiv.appendChild(applicantItem);\r\n                });\r\n                // Attach event listeners for dynamically created archive (delete) buttons\r\n                applicantsListDiv.querySelectorAll('.btn-delete-applicant').forEach(button => {\r\n                    button.addEventListener('click', (e) => deleteApplicant(e.target.dataset.id));\r\n                });\r\n            } else {\r\n                applicantsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No recent applicants.</p>';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading applicants:', error);\r\n            applicantsListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading applicants: ${error.message}</p>`;\r\n        }\r\n    }\r\n\r\n    // --- Event Handlers ---\r\n\r\n    /**\r\n     * Handles the submission of the new job posting form.\r\n     * @param {Event} e - The submit event.\r\n     */\r\n    async function createJobPosting(e) {\r\n        e.preventDefault(); \r\n\r\n        const jobData = {\r\n            title: jobTitleInput.value.trim(),\r\n            description: jobDescriptionTextarea.value.trim(),\r\n            requirements: jobRequirementsTextarea.value.trim(),\r\n            location_id: jobLocationSelect.value || null \r\n        };\r\n\r\n        // Basic validation\r\n        if (!jobData.title || !jobData.description || !jobData.location_id) {\r\n            displayStatusMessage(jobPostingStatusMessage, 'Job title, description, and location are required.', true);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await apiRequest('POST', '/api/job-postings', jobData); \r\n            displayStatusMessage(jobPostingStatusMessage, 'Job posting created successfully!', false);\r\n            newJobPostingForm.reset(); \r\n            loadCurrentJobPostings(); \r\n        } catch (error) {\r\n            displayStatusMessage(jobPostingStatusMessage, `Error creating job posting: ${error.message}`, true);\r\n            console.error('Error creating job posting:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of a job posting.\r\n     * @param {string} id - The ID of the job posting to delete.\r\n     */\r\n    async function deleteJobPosting(id) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to delete this job posting? This cannot be undone.', 'Delete');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/job-postings/${id}`); \r\n                showModalMessage('Job posting deleted successfully!', false);\r\n                loadCurrentJobPostings(); \r\n            } catch (error) {\r\n                showModalMessage(`Error deleting job posting: ${error.message}`, true);\r\n                console.error('Error deleting job posting:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles archiving/deletion of an applicant.\r\n     * @param {string} id - The ID of the applicant to delete.\r\n     */\r\n    async function deleteApplicant(id) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to archive this applicant? This cannot be undone.', 'Archive');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/applicants/${id}`);\r\n                showModalMessage('Applicant archived successfully!', false);\r\n                loadRecentApplicants(); \r\n            } catch (error) {\r\n                showModalMessage(`Error archiving applicant: ${error.message}`, true);\r\n                console.error('Error archiving applicant:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Attach Event Listeners ---\r\n    if (newJobPostingForm) {\r\n        newJobPostingForm.addEventListener('submit', createJobPosting);\r\n    }\r\n    \r\n    // --- Initial Page Load Actions ---\r\n    loadLocationsForJobPostingForm(); \r\n    loadCurrentJobPostings(); \r\n    loadRecentApplicants(); \r\n}", "// js/pages/scheduling.js - MASTER SOLUTION: Final Version\r\n\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the NEW \"Classic Week\" scheduling page.\r\n * This version includes logic to display employee names on shifts.\r\n */\r\nexport function handleSchedulingPage() {\r\n    // --- Security & Role Check ---\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem('userRole');\r\n    if (!authToken) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Element References ---\r\n    const currentWeekDisplay = document.getElementById('current-week-display');\r\n    const prevWeekBtn = document.getElementById('prev-week-btn');\r\n    const nextWeekBtn = document.getElementById('next-week-btn');\r\n    const calendarGridWrapper = document.getElementById('calendar-grid-wrapper');\r\n    const employeeSelect = document.getElementById('employee-select');\r\n    const locationSelect = document.getElementById('location-select');\r\n    const createShiftForm = document.getElementById('create-shift-form');\r\n    const locationSelectorContainer = document.getElementById('location-selector-container');\r\n    const locationSelector = document.getElementById('location-selector');\r\n    \r\n    const startDateInput = document.getElementById('start-date-input');\r\n    const startTimeSelect = document.getElementById('start-time-select');\r\n    const endDateInput = document.getElementById('end-date-input');\r\n    const endTimeSelect = document.getElementById('end-time-select');\r\n\r\n\r\n    // --- State Management ---\r\n    let currentStartDate = new Date();\r\n    currentStartDate.setDate(currentStartDate.getDate() - currentStartDate.getDay());\r\n    currentStartDate.setHours(0, 0, 0, 0);\r\n    let currentLocationId = null; // Will be set during initialization based on user role or selection\r\n\r\n    // --- Constants ---\r\n    const PIXELS_PER_HOUR = 60;\r\n    const START_HOUR = 0;  // Display calendar from 00:00 (12 AM)\r\n    const END_HOUR = 24;   // Display calendar until 24:00 (end of day, effectively covers up to 11:59 PM)\r\n\r\n    // Key for storing Super Admin's preferred location in localStorage\r\n    const SUPER_ADMIN_PREF_LOCATION_KEY = 'superAdminPrefLocationId';\r\n\r\n    /**\r\n     * Helper function to robustly parse an ISO 8601 string (with or without 'Z') into a Date object.\r\n     * With backend returning 'Z' suffix, this becomes straightforward.\r\n     * @param {string} dateTimeString - The ISO 8601 date-time string from the database (e.g., \"YYYY-MM-DDTHH:MM:SS.MSZ\").\r\n     * @returns {Date} A Date object, or an Invalid Date if parsing fails.\r\n     */\r\n    const parseISODateString = (dateTimeString) => {\r\n        const date = new Date(dateTimeString);\r\n        if (isNaN(date.getTime())) {\r\n            console.error(`Failed to parse ISO date string \"${dateTimeString}\". Resulted in Invalid Date.`);\r\n        }\r\n        return date;\r\n    };\r\n\r\n\r\n    /**\r\n     * Main function to initialize and render the calendar for a specific location and week.\r\n     */\r\n    const loadAndRenderWeeklySchedule = async (locationId) => {\r\n        // Essential check: If no locationId is provided or set, display a message and exit.\r\n        if (!locationId) {\r\n            currentWeekDisplay.textContent = 'Select a location';\r\n            calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please select a location to view the schedule.</p>';\r\n            return;\r\n        }\r\n        \r\n        currentLocationId = locationId; // Update the module-level state variable for the current location\r\n        currentWeekDisplay.textContent = 'Loading...';\r\n        calendarGridWrapper.innerHTML = ''; // Clear previous grid\r\n\r\n        try {\r\n            // Fetch users and shifts for the *currently selected* location\r\n            const [users, shifts, allLocations] = await Promise.all([\r\n                apiRequest('GET', `/api/users?location_id=${currentLocationId}`),\r\n                apiRequest('GET', `/api/shifts?startDate=${getApiDate(currentStartDate)}&endDate=${getApiDate(getEndDate(currentStartDate))}&location_id=${currentLocationId}`),\r\n                apiRequest('GET', '/api/locations') // Fetch all locations for dropdowns\r\n            ]);\r\n\r\n            populateSidebarDropdowns(users, allLocations);\r\n            renderCalendarGrid();\r\n            renderShifts(shifts);\r\n\r\n        } catch (error) {\r\n            showModalMessage(`Error loading schedule: ${error.message}`, true);\r\n            console.error(\"Error loading schedule data:\", error);\r\n            currentWeekDisplay.textContent = 'Error';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Populates the Employee and Location dropdowns in the sidebar.\r\n     */\r\n    const populateSidebarDropdowns = (users, locations) => {\r\n        // Populate the Employee dropdown\r\n        employeeSelect.innerHTML = '<option value=\"\">Select Employee</option>';\r\n        if (users) {\r\n            // Filter for 'employee' or 'location_admin' roles, as these can be assigned shifts.\r\n            users.filter(u => u.role === 'employee' || u.role === 'location_admin').forEach(user => {\r\n                employeeSelect.add(new Option(user.full_name, user.user_id));\r\n            });\r\n        }\r\n\r\n        // Populate the top 'View Schedule For' location dropdown (only visible for super_admin)\r\n        if (locationSelectorContainer && locationSelectorContainer.style.display !== 'none' && locationSelector) {\r\n            locationSelector.innerHTML = '<option value=\"\">Select a Location</option>';\r\n            if (locations) {\r\n                locations.forEach(loc => {\r\n                    locationSelector.add(new Option(loc.location_name, loc.location_id));\r\n                });\r\n            }\r\n            // Ensure the displayed location selector matches the current schedule's location\r\n            if (currentLocationId) {\r\n                locationSelector.value = currentLocationId;\r\n            }\r\n        }\r\n\r\n        // Populate the 'Create New Shift' form's Location dropdown\r\n        locationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n        if (locations) {\r\n            locations.forEach(loc => {\r\n                locationSelect.add(new Option(loc.location_name, loc.location_id));\r\n            });\r\n        }\r\n        // If currentLocationId is set, pre-select it in the create shift form's location dropdown\r\n        if (currentLocationId) {\r\n            locationSelect.value = currentLocationId;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates and populates the time dropdowns with 15-minute increments.\r\n     */\r\n    const populateTimeSelects = () => {\r\n        let optionsHtml = '<option value=\"\">Select Time</option>';\r\n        for (let hour = 0; hour < 24; hour++) {\r\n            for (let minute = 0; minute < 60; minute += 15) {\r\n                const timeValue = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n                const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n                const ampm = hour < 12 ? 'AM' : 'PM';\r\n                const displayText = `${displayHour}:${String(minute).padStart(2, '0')} ${ampm}`;\r\n                optionsHtml += `<option value=\"${timeValue}\">${displayText}</option>`;\r\n            }\r\n        }\r\n        startTimeSelect.innerHTML = optionsHtml;\r\n        endTimeSelect.innerHTML = optionsHtml;\r\n    };\r\n\r\n    /**\r\n     * Renders the main calendar grid structure (headers, time slots, day columns).\r\n     */\r\n    const renderCalendarGrid = () => {\r\n        const weekDates = getWeekDates(currentStartDate);\r\n        const dateRangeString = `${weekDates[0].toLocaleDateString(undefined, {month: 'short', day: 'numeric'})} - ${weekDates[6].toLocaleDateString(undefined, {month: 'short', day: 'numeric'})}`;\r\n        currentWeekDisplay.textContent = dateRangeString;\r\n\r\n        const grid = document.createElement('div');\r\n        grid.className = 'calendar-grid';\r\n\r\n        // Add empty header for time column, then headers for days\r\n        grid.innerHTML += `<div class=\"grid-header time-slot-header\"></div>`;\r\n        weekDates.forEach(date => {\r\n            grid.innerHTML += `<div class=\"grid-header\">${date.toLocaleDateString(undefined, {weekday: 'short', day: 'numeric'})}</div>`;\r\n        });\r\n\r\n        // Add time slots to the first column\r\n        for (let hour = START_HOUR; hour < END_HOUR; hour++) {\r\n            const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n            const ampm = hour < 12 ? 'AM' : 'PM';\r\n            grid.innerHTML += `<div class=\"time-slot\">${displayHour} ${ampm}</div>`;\r\n        }\r\n\r\n        // Add empty day columns for shift placement\r\n        for (let i = 0; i < 7; i++) {\r\n            const dayCol = document.createElement('div');\r\n            dayCol.className = 'day-column';\r\n            // Grid column starts at 2 because the first column is for time slots\r\n            dayCol.style.gridColumn = `${i + 2}`;\r\n            // Grid row starts at 2 because the first row is for day headers\r\n            dayCol.style.gridRow = `2 / span ${END_HOUR - START_HOUR}`;\r\n            dayCol.dataset.dayIndex = i; // Store day index for identifying column\r\n            grid.appendChild(dayCol);\r\n        }\r\n\r\n        calendarGridWrapper.innerHTML = ''; // Clear existing content\r\n        calendarGridWrapper.appendChild(grid); // Append the newly created grid\r\n    };\r\n\r\n    /**\r\n     * Renders the shift blocks onto the calendar grid.\r\n     * @param {Array} shifts - An array of shift objects.\r\n     */\r\n    const renderShifts = (shifts) => {\r\n        if (!shifts || shifts.length === 0) {\r\n            console.log(\"No shifts to render or shifts array is empty.\");\r\n            return;\r\n        }\r\n\r\n        shifts.forEach(shift => {\r\n            // Use the updated parser for ISO 8601 'Z' suffixed strings from backend\r\n            const shiftStart = parseISODateString(shift.start_time);\r\n            const shiftEnd = parseISODateString(shift.end_time);\r\n\r\n            // Check if dates are valid after parsing\r\n            if (isNaN(shiftStart.getTime()) || isNaN(shiftEnd.getTime())) {\r\n                console.warn(`Shift for ${shift.employee_name} (ID: ${shift.id}) not rendered: Invalid date format from DB. Start: \"${shift.start_time}\", End: \"${shift.end_time}\"`);\r\n                return; // Skip rendering this problematic shift\r\n            }\r\n\r\n            // Get day index based on the local time of the shift start\r\n            const dayIndex = shiftStart.getDay(); \r\n            \r\n            // Find the correct day column in the rendered grid\r\n            const targetColumn = document.querySelector(`.day-column[data-day-index=\"${dayIndex}\"]`);\r\n\r\n            if (targetColumn) {\r\n                // Calculate position and height of the shift block using local time components\r\n                // These are now reliably derived from the 'Z' suffixed ISO strings\r\n                const startHourLocal = shiftStart.getHours();\r\n                const startMinuteLocal = shiftStart.getMinutes();\r\n                const endHourLocal = shiftEnd.getHours();\r\n                const endMinuteLocal = shiftEnd.getMinutes();\r\n\r\n                const totalStartMinutesFromMidnight = startHourLocal * 60 + startMinuteLocal;\r\n                const totalEndMinutesFromMidnight = endHourLocal * 60 + endMinuteLocal;\r\n\r\n                // Handle shifts that span across midnight (e.g., 10 PM - 2 AM)\r\n                let durationMinutes = totalEndMinutesFromMidnight - totalStartMinutesFromMidnight;\r\n                if (durationMinutes < 0) {\r\n                    durationMinutes += (24 * 60); // Add 24 hours (1440 minutes) to duration if it crosses midnight\r\n                }\r\n\r\n                const calendarDisplayStartMinutes = START_HOUR * 60; \r\n\r\n                // The `top` position is relative to START_HOUR (which is 00:00).\r\n                const top = (totalStartMinutesFromMidnight - calendarDisplayStartMinutes) / 60 * PIXELS_PER_HOUR;\r\n                const height = durationMinutes / 60 * PIXELS_PER_HOUR;\r\n\r\n                // Check for valid height (must be positive) and top (must be within grid bounds)\r\n                if (height > 0 && top >= 0 && (top + height) <= ((END_HOUR - START_HOUR) * PIXELS_PER_HOUR)) {\r\n                    const shiftBlock = document.createElement('div');\r\n                    shiftBlock.className = 'shift-block';\r\n                    shiftBlock.style.top = `${top}px`;\r\n                    shiftBlock.style.height = `${height}px`;\r\n                    shiftBlock.innerHTML = `<strong>${shift.employee_name}</strong><br><small>${shift.location_name}</small>`;\r\n                    \r\n                    // Format title to show local times as they appear in the database\r\n                    const formattedStartTime = shiftStart.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });\r\n                    const formattedEndTime = shiftEnd.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });\r\n                    shiftBlock.title = `Shift for ${shift.employee_name} at ${shift.location_name} from ${formattedStartTime} to ${formattedEndTime}. Notes: ${shift.notes || 'None'}`;\r\n                    \r\n                    targetColumn.appendChild(shiftBlock);\r\n                } else {\r\n                    console.warn(`Shift for ${shift.employee_name} (ID: ${shift.id}) not rendered due to invalid calculated rendering size. Start: ${formattedStartTime}, End: ${formattedEndTime}. Calculated top: ${top}, height: ${height}`);\r\n                }\r\n            } else {\r\n                console.warn(`Could not find target column for dayIndex: ${dayIndex} for shift ID: ${shift.id}. (Shift might be on a different day than the displayed week)`);\r\n            }\r\n        });\r\n    };\r\n\r\n    // --- Helper Functions for Dates ---\r\n    const getWeekDates = (startDate) => Array.from({ length: 7 }).map((_, i) => {\r\n        const date = new Date(startDate);\r\n        date.setDate(date.getDate() + i);\r\n        return date;\r\n    });\r\n\r\n    const getEndDate = (startDate) => {\r\n        const endDate = new Date(startDate);\r\n        endDate.setDate(endDate.getDate() + 7); // Get date 7 days from start (exclusive end for API)\r\n        return endDate;\r\n    };\r\n    \r\n    // Formats a Date object into 'YYYY-MM-DD' for API requests\r\n    const getApiDate = (d) => d.toISOString().split('T')[0];\r\n\r\n    // --- Event Handlers ---\r\n    const handleWeekChange = (days) => {\r\n        currentStartDate.setDate(currentStartDate.getDate() + days);\r\n        // Ensure currentLocationId is valid before trying to load a new week\r\n        if (currentLocationId) {\r\n            loadAndRenderWeeklySchedule(currentLocationId);\r\n        } else {\r\n            showModalMessage('Please select a location first.', true);\r\n        }\r\n    };\r\n\r\n    prevWeekBtn.addEventListener('click', () => handleWeekChange(-7));\r\n    nextWeekBtn.addEventListener('click', () => handleWeekChange(7));\r\n\r\n    // Event listener for creating a new shift\r\n    createShiftForm.addEventListener('submit', async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n        \r\n        const startDate = startDateInput.value;\r\n        const startTime = startTimeSelect.value;\r\n        const endDate = endDateInput.value;\r\n        const endTime = endTimeSelect.value;\r\n\r\n        if (!startDate || !startTime || !endDate || !endTime) {\r\n            return showModalMessage('Please provide all date and time fields for the shift.', true); // More specific message\r\n        }\r\n\r\n        // Combine date and time inputs into full ISO format strings (without Z for UTC)\r\n        // These will be saved to the database as `timestamp without time zone`\r\n        const shiftStartDateTimeString = `${startDate}T${startTime}:00`; \r\n        const shiftEndDateTimeString = `${endDate}T${endTime}:00`; \r\n        \r\n        // Basic validation: Ensure end time is after start time\r\n        if (new Date(shiftStartDateTimeString).getTime() >= new Date(shiftEndDateTimeString).getTime()) {\r\n             showModalMessage('Shift end time must be after start time.', true);\r\n             return;\r\n        }\r\n\r\n        const shiftData = {\r\n            employee_id: employeeSelect.value,\r\n            location_id: locationSelect.value,\r\n            start_time: shiftStartDateTimeString,\r\n            end_time: shiftEndDateTimeString,\r\n            notes: document.getElementById('notes-input').value\r\n        };\r\n\r\n        if (!shiftData.employee_id || !shiftData.location_id) {\r\n            return showModalMessage('Please select an employee and location for the shift.', true); // More specific message\r\n        }\r\n        \r\n        try {\r\n            await apiRequest('POST', '/api/shifts', shiftData);\r\n            showModalMessage('Shift created successfully!', false);\r\n            createShiftForm.reset(); // Clear the form\r\n            // Crucial: After successful creation, re-render the schedule for the current location\r\n            // This will fetch the newly created shift and display it.\r\n            loadAndRenderWeeklySchedule(currentLocationId); \r\n        } catch (error) {\r\n            showModalMessage(`Error creating shift: ${error.message}`, true);\r\n        }\r\n    });\r\n    \r\n    // Event listener for the top 'View Schedule For' location selector (for super_admin)\r\n    if (locationSelector) {\r\n        locationSelector.addEventListener('change', () => {\r\n            const newLocationId = locationSelector.value;\r\n            // Store selected location ID in localStorage for Super Admin persistence\r\n            if (newLocationId) {\r\n                localStorage.setItem(SUPER_ADMIN_PREF_LOCATION_KEY, newLocationId);\r\n                currentLocationId = newLocationId; // Update the module-level state\r\n                loadAndRenderWeeklySchedule(newLocationId);\r\n            } else {\r\n                 localStorage.removeItem(SUPER_ADMIN_PREF_LOCATION_KEY); // Clear preference if \"Select Location\" is chosen\r\n                 currentLocationId = null;\r\n                 currentWeekDisplay.textContent = 'Select a location';\r\n                 calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please select a location to view the schedule.</p>';\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load ---\r\n    const initializePage = async () => {\r\n        populateTimeSelects(); // Populate time dropdowns on page load\r\n\r\n        try {\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            \r\n            if (userRole === 'super_admin') {\r\n                if(locationSelectorContainer) locationSelectorContainer.style.display = 'block';\r\n                if (locationSelector) {\r\n                    locationSelector.innerHTML = '<option value=\"\">Select a Location</option>';\r\n                    if (locations && locations.length > 0) {\r\n                        locations.forEach(loc => {\r\n                            locationSelector.add(new Option(loc.location_name, loc.location_id));\r\n                        });\r\n\r\n                        // Attempt to retrieve Super Admin's preferred location from localStorage\r\n                        const savedLocationId = localStorage.getItem(SUPER_ADMIN_PREF_LOCATION_KEY);\r\n                        let initialLocationId = null;\r\n\r\n                        if (savedLocationId && locations.some(loc => String(loc.location_id) === savedLocationId)) {\r\n                            // Use saved location if it exists and is still a valid location\r\n                            initialLocationId = savedLocationId;\r\n                        } else {\r\n                            // Otherwise, default to the first available location\r\n                            initialLocationId = locations[0].location_id; \r\n                        }\r\n                        \r\n                        locationSelector.value = initialLocationId; // Pre-select in the top dropdown\r\n                        currentLocationId = initialLocationId; // Set the module-level state variable\r\n                        loadAndRenderWeeklySchedule(initialLocationId); // Load schedule for this initial location\r\n\r\n                    } else {\r\n                        currentWeekDisplay.textContent = 'No Locations';\r\n                        calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please create a location in Admin Settings.</p>';\r\n                    }\r\n                }\r\n            } else { // For location_admin role\r\n                if(locationSelectorContainer) locationSelectorContainer.style.display = 'none'; // Hide location selector for location_admin\r\n                const user = await apiRequest('GET', '/api/users/me'); // Get the location_admin's assigned location\r\n                if (user && user.location_id) {\r\n                    currentLocationId = user.location_id; // Set the module-level state\r\n                    loadAndRenderWeeklySchedule(user.location_id); // Load schedule for their assigned location\r\n                } else {\r\n                    showModalMessage('Your account is not assigned to a location. Please contact your administrator.', true);\r\n                    currentWeekDisplay.textContent = 'No Location Assigned';\r\n                }\r\n            }\r\n        } catch (error) {\r\n             showModalMessage(`Failed to initialize scheduling page: ${error.message}`, true);\r\n             console.error('Failed to initialize scheduling page:', error);\r\n        }\r\n    };\r\n\r\n    initializePage(); // Call the initialization function when the script loads\r\n}", "// js/pages/apply.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the job application page.\r\n */\r\nexport function handleApplyPage() {\r\n    const jobDetailsContainer = document.getElementById('job-details-container');\r\n    const applyForm = document.getElementById('apply-form');\r\n    const applyCard = document.getElementById('apply-card');\r\n\r\n    // Debugging logs to confirm elements are found\r\n    console.log(\"[apply.js] Elements found:\", { jobDetailsContainer, applyForm, applyCard });\r\n    \r\n    // Get the jobId from the URL query parameters\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const jobId = urlParams.get('jobId');\r\n\r\n    // If no jobId is provided in the URL, display an error and exit\r\n    if (!jobId) {\r\n        if (jobDetailsContainer) {\r\n            jobDetailsContainer.innerHTML = '<h2>Job Not Found</h2><p>No job ID was provided in the URL.</p>';\r\n        } else if (applyCard) { // Fallback if jobDetailsContainer is not found\r\n            applyCard.innerHTML = '<h2>Job Not Found</h2><p>No job ID was provided in the URL.</p>';\r\n        }\r\n        console.error(\"[apply.js] No jobId found in URL.\");\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Loads job details from the API based on the jobId and displays them.\r\n     */\r\n    async function loadJobDetails() {\r\n        if (!jobDetailsContainer) {\r\n            console.error(\"[apply.js] jobDetailsContainer not found. Cannot load job details.\");\r\n            // If jobDetailsContainer is missing, display error in applyCard or as modal\r\n            if (applyCard) {\r\n                applyCard.innerHTML = '<h2>Error</h2><p>Page structure missing. Please contact support.</p>';\r\n            } else {\r\n                showModalMessage('Page structure missing. Please contact support.', true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        jobDetailsContainer.innerHTML = '<p style=\"color: var(--text-medium);\">Loading job details...</p>'; // Show loading state\r\n        try {\r\n            // Fetch job posting details from the public endpoint\r\n            const job = await apiRequest('GET', `/job-postings/${jobId}`);\r\n            \r\n            if (job) {\r\n                document.title = `Apply for ${job.title} - Flow Business Suite`; // Update page title\r\n                \r\n                // Construct job details HTML\r\n                const detailsHtml = `\r\n                    <h2>${job.title}</h2>\r\n                    <p><strong>Location:</strong> ${job.location_name || 'Company Wide'}</p>\r\n                    <p><strong>Description:</strong><br>${job.description ? job.description.replace(/\\n/g, '<br>') : 'N/A'}</p>\r\n                    ${job.requirements ? `<p><strong>Requirements:</strong><br>${job.requirements.replace(/\\n/g, '<br>')}</p>` : ''}\r\n                `;\r\n                jobDetailsContainer.innerHTML = detailsHtml; // Display job details\r\n\r\n                // After successfully loading job details, show the application form\r\n                if (applyForm) {\r\n                    applyForm.style.display = 'block'; // Make the form visible\r\n                    console.log(\"[apply.js] Application form set to display: block.\");\r\n                } else {\r\n                    console.warn(\"[apply.js] applyForm element not found, cannot make it visible.\");\r\n                }\r\n            } else {\r\n                 jobDetailsContainer.innerHTML = '<h2>Job Not Found</h2><p>The job you are looking for does not exist.</p>';\r\n                 console.warn(\"[apply.js] Job not found for ID:\", jobId);\r\n                 // If job not found, ensure form remains hidden\r\n                 if (applyForm) {\r\n                     applyForm.style.display = 'none';\r\n                 }\r\n            }\r\n        } catch (error) {\r\n            jobDetailsContainer.innerHTML = `<h2>Error</h2><p>Could not load job details. ${error.message}</p>`;\r\n            console.error('Error loading job details:', error);\r\n            // On error, ensure form remains hidden\r\n            if (applyForm) {\r\n                applyForm.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    // Event listener for the application form submission\r\n    // This listener is now attached only if applyForm is found at script initialization\r\n    if (applyForm) {\r\n        applyForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault(); // Prevent default form submission\r\n            \r\n            // Collect all application data from the form fields\r\n            const applicationData = {\r\n                name: document.getElementById('applicant-name').value.trim(),\r\n                email: document.getElementById('applicant-email').value.trim(),\r\n                address: document.getElementById('applicant-address').value.trim(),\r\n                phone: document.getElementById('applicant-phone').value.trim(),\r\n                date_of_birth: document.getElementById('applicant-dob').value,\r\n                availability: document.getElementById('applicant-availability').value,\r\n                is_authorized: document.getElementById('applicant-authorized').value === 'Yes', // Convert to boolean\r\n            };\r\n\r\n            // Basic validation\r\n            if (!applicationData.name || !applicationData.email || !applicationData.availability) {\r\n                showModalMessage('Please fill in your Full Name, Email Address, and Availability.', true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Send application data to the public API endpoint\r\n                await apiRequest('POST', `/apply/${jobId}`, applicationData);\r\n                \r\n                // On successful submission, replace the form with a success message\r\n                if(applyCard) {\r\n                    applyCard.innerHTML = `\r\n                        <div style=\"text-align: center; padding: 40px;\">\r\n                            <h2 style=\"color: var(--primary-accent);\">Application Submitted!</h2>\r\n                            <p style=\"color: var(--text-light);\">Thank you for your interest. We have received your application and will be in touch if you are selected for an interview.</p>\r\n                            <p style=\"margin-top: 20px; font-weight: 600; color: var(--text-medium);\">You may now safely close this browser tab.</p>\r\n                        </div>\r\n                    `;\r\n                }\r\n            } catch (error) {\r\n                showModalMessage(`Error submitting application: ${error.message}`, true);\r\n                console.error('Error submitting application:', error);\r\n            }\r\n        });\r\n    } else {\r\n        console.error(\"[apply.js] Application form element (id='apply-form') not found. Submission listener not attached.\");\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    loadJobDetails(); // Load job details when the page loads\r\n}\r\n", "// js/pages/onboardingView.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles the logic for the employee's onboarding view page (new-hire-view.html).\r\n */\r\nexport function handleOnboardingViewPage() {\r\n    // Security check: Redirect if not logged in\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    if (!authToken) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Elements ---\r\n    const welcomeMessage = document.getElementById('welcome-message'); // Assuming a welcome message element\r\n    const onboardingTaskListDiv = document.getElementById('onboarding-task-list'); // Container for tasks\r\n    const taskListOverviewDiv = document.getElementById('task-list-overview'); // For completion status (e.g., \"0/5 tasks complete\")\r\n    const onboardingStatusMessageElement = document.getElementById('onboarding-status-message'); // For general status messages\r\n\r\n    let currentUserId = null; // Will store the ID of the logged-in user\r\n    let userTasks = []; // Store the tasks fetched for the user\r\n\r\n    // --- Load confetti library ---\r\n    // The confetti library is expected to be loaded via a script tag in new-hire-view.html.\r\n    // This provides a fallback if it's not globally available.\r\n    const confetti = window.confetti || ((opts) => {\r\n        console.warn('Confetti library not loaded. Add <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.1/dist/confetti.browser.min.js\"></script> to your HTML.');\r\n        return Promise.resolve(null); // Return a resolved promise to avoid breaking async flow\r\n    });\r\n\r\n\r\n    // --- Helper function to get user ID from token (simple parsing, robust check on backend) ---\r\n    /**\r\n     * Decodes the JWT token to extract the user ID.\r\n     * @param {string} token - The JWT token from local storage.\r\n     * @returns {string|null} The user ID or null if decoding fails.\r\n     */\r\n    function getUserIdFromToken(token) {\r\n        try {\r\n            // JWTs have three parts: header.payload.signature\r\n            const base64Url = token.split('.')[1];\r\n            // Decode base64url to base64, then to string, then parse JSON\r\n            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n            }).join(''));\r\n            const payload = JSON.parse(jsonPayload);\r\n            return payload.id; // Assuming the user ID is stored in the 'id' claim of the JWT\r\n        } catch (e) {\r\n            console.error(\"Error decoding token to get user ID:\", e);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // --- Helper for local status messages ---\r\n    /**\r\n     * Displays a status message on the onboarding view page.\r\n     * @param {string} message - The message text.\r\n     * @param {boolean} [isError=false] - True if the message is an error, false for success.\r\n     */\r\n    function displayStatusMessage(message, isError = false) {\r\n        if (!onboardingStatusMessageElement) {\r\n            console.warn(\"Onboarding status message element not found. Message:\", message);\r\n            // Fallback to showModalMessage if no inline element is available\r\n            showModalMessage(message, isError);\r\n            return;\r\n        }\r\n        onboardingStatusMessageElement.textContent = message;\r\n        onboardingStatusMessageElement.classList.remove('success', 'error'); // Clear previous states\r\n        onboardingStatusMessageElement.classList.add(isError ? 'error' : 'success');\r\n        setTimeout(() => {\r\n            onboardingStatusMessageElement.textContent = '';\r\n            onboardingStatusMessageElement.classList.remove('success', 'error');\r\n        }, 5000); // Clear message after 5 seconds\r\n    }\r\n\r\n\r\n    // --- Data Loading and Rendering Functions ---\r\n\r\n    /**\r\n     * Fetches onboarding tasks for the current user and renders them.\r\n     */\r\n    async function loadOnboardingTasks() {\r\n        if (!onboardingTaskListDiv) return;\r\n\r\n        onboardingTaskListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading your onboarding tasks...</p>'; // Show loading state\r\n        \r\n        currentUserId = getUserIdFromToken(authToken);\r\n        if (!currentUserId) {\r\n            displayStatusMessage('Error: User ID not found in token. Please log in again.', true);\r\n            // Optionally redirect to login if no user ID can be determined\r\n            setTimeout(() => { window.location.href = 'login.html?sessionExpired=true'; }, 1500);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Fetch onboarding tasks specific to the current user\r\n            const tasks = await apiRequest('GET', `/onboarding-tasks?user_id=${currentUserId}`);\r\n            userTasks = tasks; // Store fetched tasks in a global variable for this module\r\n            renderOnboardingTasks(); // Render the tasks into the DOM\r\n            updateTaskListOverview(); // Update the completion status display\r\n\r\n        } catch (error) {\r\n            console.error('Error loading onboarding tasks:', error);\r\n            onboardingTaskListDiv.innerHTML = '<p style=\"color: #e74c3c;\">Error loading tasks. Please contact support.</p>';\r\n            displayStatusMessage(`Error loading tasks: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the fetched onboarding tasks into the DOM.\r\n     */\r\n    function renderOnboardingTasks() {\r\n        if (!onboardingTaskListDiv) return;\r\n        onboardingTaskListDiv.innerHTML = ''; // Clear loading message and any previous tasks\r\n\r\n        if (userTasks && userTasks.length > 0) {\r\n            userTasks.forEach(task => {\r\n                const taskItem = document.createElement('div');\r\n                taskItem.className = `checklist-item ${task.completed ? 'completed' : ''}`;\r\n                taskItem.dataset.taskId = task.id; // Store task ID for updates\r\n\r\n                taskItem.innerHTML = `\r\n                    <div class=\"checklist-item-title\">\r\n                        <input type=\"checkbox\" class=\"task-checkbox\" ${task.completed ? 'checked' : ''}>\r\n                        <span>${task.description}</span>\r\n                        ${task.document_name && task.document_id ? \r\n                            `<br><small style=\"color:var(--text-medium);\">Attached: <a href=\"/uploads/${encodeURIComponent(task.document_name)}\" target=\"_blank\" style=\"color: var(--primary-accent);\">${task.document_name}</a></small>` \r\n                            : ''\r\n                        }\r\n                    </div>\r\n                `;\r\n                onboardingTaskListDiv.appendChild(taskItem);\r\n\r\n                // Add event listener for checkbox change\r\n                taskItem.querySelector('.task-checkbox').addEventListener('change', async (e) => {\r\n                    const isCompleted = e.target.checked;\r\n                    const taskId = e.target.closest('.checklist-item').dataset.taskId;\r\n                    \r\n                    try {\r\n                        // Send PUT request to update the task's completion status\r\n                        await apiRequest('PUT', `/onboarding-tasks/${taskId}`, { completed: isCompleted });\r\n                        \r\n                        // Update UI immediately by toggling class\r\n                        e.target.closest('.checklist-item').classList.toggle('completed', isCompleted);\r\n                        \r\n                        // Update the specific task in the local userTasks array\r\n                        const updatedTaskIndex = userTasks.findIndex(t => String(t.id) === String(taskId)); // Ensure type comparison\r\n                        if (updatedTaskIndex !== -1) {\r\n                            userTasks[updatedTaskIndex].completed = isCompleted;\r\n                        }\r\n\r\n                        updateTaskListOverview(); // Update the completion overview after task status changes\r\n                        displayStatusMessage(`Task \"${task.description}\" marked ${isCompleted ? 'complete' : 'incomplete'}.`, false);\r\n\r\n                        // If all tasks are completed, trigger fireworks!\r\n                        const allTasksCompleted = userTasks.every(t => t.completed);\r\n                        if (allTasksCompleted && userTasks.length > 0) {\r\n                            triggerFireworks();\r\n                        }\r\n\r\n                    } catch (error) {\r\n                        console.error('Error updating task status:', error);\r\n                        e.target.checked = !isCompleted; // Revert checkbox state on error\r\n                        displayStatusMessage(`Error updating task status: ${error.message}`, true);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            onboardingTaskListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No onboarding tasks assigned yet. Contact your administrator.</p>';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the task list overview display (e.g., \"X/Y tasks complete\").\r\n     */\r\n    function updateTaskListOverview() {\r\n        if (!taskListOverviewDiv) return;\r\n        const completedTasks = userTasks.filter(task => task.completed).length;\r\n        const totalTasks = userTasks.length;\r\n        taskListOverviewDiv.textContent = `${completedTasks}/${totalTasks} tasks complete`;\r\n        if (completedTasks === totalTasks && totalTasks > 0) {\r\n            taskListOverviewDiv.textContent += \" - All tasks completed!\";\r\n            taskListOverviewDiv.style.color = 'var(--primary-accent)'; // Highlight when all tasks are done\r\n        } else {\r\n             taskListOverviewDiv.style.color = 'var(--text-light)'; // Normal color\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggers a confetti/fireworks animation.\r\n     */\r\n    function triggerFireworks() {\r\n        // Check if confetti is loaded and callable before attempting to use it\r\n        if (typeof confetti === 'function') {\r\n            confetti({\r\n                particleCount: 100,\r\n                spread: 70,\r\n                origin: { y: 0.6 } // Start from the middle-bottom of the screen\r\n            });\r\n        } else {\r\n            console.warn(\"Confetti function not available. Make sure 'canvas-confetti' script is loaded.\");\r\n        }\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    loadOnboardingTasks(); // Load tasks when the page initializes\r\n}\r\n", "// js/pages/suiteHub.js\r\nimport { apiRequest } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the Suite Hub page.\r\n */\r\nexport async function handleSuiteHubPage() {\r\n    const greetingContainer = document.getElementById('greeting-container');\r\n\r\n    // If greeting container is not found, log an error and exit\r\n    if (!greetingContainer) {\r\n        console.error(\"Greeting container not found on page.\");\r\n        return;\r\n    }\r\n\r\n    // Function to get the time of day greeting (Good morning, Good afternoon, Good evening)\r\n    function getGreeting() {\r\n        const hour = new Date().getHours();\r\n        if (hour < 12) {\r\n            return \"Good morning\";\r\n        } else if (hour < 18) {\r\n            return \"Good afternoon\";\r\n        } else {\r\n            return \"Good evening\";\r\n        }\r\n    }\r\n\r\n    try {\r\n        // Fetch the current user's data to get their name from the backend API\r\n        const user = await apiRequest('GET', '/api/users/me');\r\n        \r\n        // Use only the first name for a more personal greeting, default to 'there' if not found\r\n        const userName = user && user.full_name ? user.full_name.split(' ')[0] : 'there';\r\n        \r\n        const greeting = getGreeting(); // Get the time-based greeting\r\n        \r\n        // Update the greeting container with the personalized message\r\n        greetingContainer.textContent = `${greeting}, ${userName}. We are going to do great things today.`;\r\n\r\n    } catch (error) {\r\n        // This catch block will run if the apiRequest fails for any reason (e.g., network error, token expired).\r\n        console.error(\"Failed to fetch user for greeting:\", error);\r\n        // Display a generic greeting as a fallback if user data cannot be fetched\r\n        greetingContainer.textContent = `${getGreeting()}! Welcome back. We are going to do great things today.`;\r\n    }\r\n}\r\n", "import { apiRequest } from '../utils.js';\r\n\r\nexport function handlePricingPage() {\r\n    const stripePublicKey = 'pk_test_51PVAzL07SADx7iWaKjDxtvJ9nOq86I0I74UjKqS8WvU4S1aQ9aL7xHl2D5bJz5Uo4lB3t5kYmQ8eX3eI00O5pP5bB9'; // It's safe to expose the publishable key\r\n    const stripe = Stripe(stripePublicKey);\r\n\r\n    document.querySelectorAll('.choose-plan-btn').forEach(button => {\r\n        button.addEventListener('click', async (event) => {\r\n            const plan = event.target.dataset.plan;\r\n            \r\n            // If the user is not logged in, redirect them to log in or register.\r\n            // Pass the selected plan in the URL so we can resume after login.\r\n            if (!localStorage.getItem('authToken')) {\r\n                window.location.href = `/register.html?plan=${plan}`; // Redirect to register, can be changed to login\r\n                return;\r\n            }\r\n\r\n            // If the user is logged in, create a checkout session.\r\n            try {\r\n                const session = await apiRequest('POST', '/api/create-checkout-session', { plan });\r\n                if (session && session.id) {\r\n                    await stripe.redirectToCheckout({ sessionId: session.id });\r\n                } else {\r\n                    alert('Could not initiate checkout session.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating checkout session:', error);\r\n                alert('Could not initiate checkout. Please try again.');\r\n            }\r\n        });\r\n    });\r\n}", "// js/app.js (Main Router - Self-Starting) - MASTER SOLUTION: Final Version\n\n// Import all page handlers using ESM import syntax for browser compatibility\nimport { handleLoginPage } from './pages/login.js';\nimport { handleRegisterPage } from './pages/register.js';\nimport { handleDashboardPage } from './pages/dashboard.js';\nimport { handleChecklistsPage } from './pages/checklists.js';\nimport { handleAdminPage } from './pages/admin.js';\nimport { handleAccountPage } from './pages/account.js';\nimport { handleDocumentsPage } from './pages/documents.js';\nimport { handleHiringPage } from './pages/hiring.js';\nimport { handleSchedulingPage } from './pages/scheduling.js';\nimport { handleApplyPage } from './pages/apply.js';\nimport { handleOnboardingViewPage } from './pages/onboardingView.js';\nimport { handleSuiteHubPage } from './pages/suiteHub.js';\nimport { handlePricingPage } from './pages/pricing.js';\n\n/**\n * Sets up the settings dropdown menu on pages that have it.\n */\nfunction setupSettingsDropdown() {\n    const settingsButton = document.getElementById(\"settings-button\");\n    const settingsDropdown = document.getElementById(\"settings-dropdown\");\n    const logoutButton = document.getElementById(\"logout-button\");\n\n    if (settingsButton && settingsDropdown) {\n        settingsButton.addEventListener(\"click\", event => {\n            event.stopPropagation();\n            settingsDropdown.style.display = settingsDropdown.style.display === \"block\" ? \"none\" : \"block\";\n        });\n        document.addEventListener(\"click\", event => {\n            if (settingsButton && !settingsButton.contains(event.target) && !settingsDropdown.contains(event.target)) {\n                settingsDropdown.style.display = \"none\";\n            }\n        });\n    }\n    if (logoutButton) {\n        logoutButton.addEventListener(\"click\", () => {\n            localStorage.removeItem(\"authToken\");\n            localStorage.removeItem(\"userRole\");\n            localStorage.removeItem('userId');\n            console.log('User logged out. Local storage cleared.');\n            window.location.href = \"login.html\";\n        });\n    }\n}\n\n/**\n * This is the main function for the application. It acts as a router,\n * determining which page is currently active and calling the appropriate\n * logic for it.\n */\nfunction main() {\n    const path = window.location.pathname;\n\n    // A list of pages that have the main header with the settings dropdown\n    const pagesWithSettings = [\n        \"suite-hub.html\", \"dashboard.html\", \"checklists.html\", \"admin.html\",\n        \"account.html\", \"documents.html\", \"hiring.html\", \"scheduling.html\"\n    ];\n\n    // Setup the dropdown if the current page needs it\n    if (pagesWithSettings.some(p => path.includes(p))) {\n        setupSettingsDropdown();\n    }\n\n    // Route to the correct page handler based on the URL\n    if (path.includes(\"login.html\")) handleLoginPage();\n    else if (path.includes(\"register.html\")) handleRegisterPage();\n    else if (path.includes(\"suite-hub.html\")) handleSuiteHubPage();\n    else if (path.includes(\"dashboard.html\")) handleDashboardPage();\n    else if (path.includes(\"checklists.html\")) handleChecklistsPage();\n    else if (path.includes(\"admin.html\")) handleAdminPage();\n    else if (path.includes(\"account.html\")) handleAccountPage();\n    else if (path.includes(\"documents.html\")) handleDocumentsPage();\n    else if (path.includes(\"hiring.html\")) handleHiringPage();\n    else if (path.includes(\"scheduling.html\")) handleSchedulingPage();\n    else if (path.includes(\"apply.html\")) handleApplyPage();\n    else if (path.includes(\"new-hire-view.html\")) handleOnboardingViewPage();\n    else if (path.includes(\"pricing.html\")) handlePricingPage();\n}\n\n// --- AUTOMATIC STARTUP ---\n// This event listener waits for the HTML document to be fully loaded and ready,\n// and then it automatically calls our main function.\ndocument.addEventListener('DOMContentLoaded', main);"],
  "mappings": "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",
  "names": ["formattedStartTime", "formattedEndTime"]
}
