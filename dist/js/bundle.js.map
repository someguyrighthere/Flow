{
  "version": 3,
  "sources": ["../../js/utils.js", "../../js/pages/login.js", "../../js/pages/register.js", "../../js/pages/dashboard.js", "../../js/pages/checklists.js", "../../js/pages/admin.js", "../../js/pages/account.js", "../../js/pages/documents.js", "../../js/pages/hiring.js", "../../js/pages/scheduling.js", "../../js/pages/apply.js", "../../js/pages/onboardingView.js", "../../js/pages/suiteHub.js", "../../js/pages/pricing.js", "../../js/pages/printable-schedule.js", "../../js/app.js"],
  "sourcesContent": ["// js/utils.js\r\n\r\n// This should be the full URL of your deployed backend.\r\nconst API_BASE_URL = 'https://flow-gz1r.onrender.com'; // Ensure this matches your deployed backend URL\r\n\r\n/**\r\n * Displays a custom modal message to the user.\r\n * @param {string} message The message to display.\r\n * @param {boolean} [isError=false] Whether the message is an error.\r\n */\r\nexport function showModalMessage(message, isError = false) {\r\n    const modalOverlay = document.getElementById(\"modal-message\");\r\n    const modalMessageText = document.getElementById(\"modal-text\");\r\n    const modalOkButton = document.getElementById(\"modal-ok-button\");\r\n\r\n    // CRITICAL CHECK: Ensure all modal elements are found\r\n    if (!modalOverlay || !modalMessageText || !modalOkButton) {\r\n        console.error(\"A modal element not found for showModalMessage:\", message);\r\n        // Fallback to alert if modal elements are missing (for debugging, but should be fixed in HTML)\r\n        alert(message); \r\n        return;\r\n    }\r\n\r\n    const hideModal = () => { modalOverlay.style.display = \"none\"; };\r\n    const hideModalOutside = (event) => { \r\n        if (event.target === modalOverlay) hideModal(); \r\n    };\r\n\r\n    // Remove existing listeners to prevent multiple firings\r\n    modalOkButton.removeEventListener(\"click\", hideModal);\r\n    modalOverlay.removeEventListener(\"click\", hideModalOutside);\r\n\r\n    modalMessageText.innerHTML = message; // Changed to innerHTML to support links/bold text\r\n    modalMessageText.style.color = isError ? \"#ff8a80\" : \"var(--text-light)\";\r\n    modalOverlay.style.display = \"flex\"; // Show the modal\r\n\r\n    // Add new listeners\r\n    modalOkButton.addEventListener(\"click\", hideModal);\r\n    modalOverlay.addEventListener(\"click\", hideModalOutside);\r\n}\r\n\r\n/**\r\n * Displays a confirmation modal to the user.\r\n * @param {string} message The confirmation message.\r\n * @param {string} [confirmButtonText=\"Confirm\"] The text for the confirm button.\r\n * @returns {Promise<boolean>} A promise that resolves to true if confirmed, false otherwise.\r\n */\r\nexport function showConfirmModal(message, confirmButtonText = \"Confirm\") {\r\n    return new Promise(resolve => {\r\n        const confirmModalOverlay = document.getElementById(\"confirm-modal\");\r\n        const confirmModalMessage = document.getElementById(\"confirm-modal-text\");\r\n        const modalConfirmButton = document.getElementById(\"confirm-modal-confirm\");\r\n        const modalCancelButton = document.getElementById(\"confirm-modal-cancel\");\r\n\r\n        if (!confirmModalOverlay || !confirmModalMessage || !modalConfirmButton || !modalCancelButton) {\r\n            console.error(\"Confirmation modal elements not found. Falling back to browser's confirm.\");\r\n            resolve(window.confirm(message)); // Fallback\r\n            return;\r\n        }\r\n\r\n        confirmModalMessage.innerHTML = message;\r\n        modalConfirmButton.textContent = confirmButtonText;\r\n        confirmModalOverlay.style.display = \"flex\";\r\n\r\n        const handleConfirm = () => {\r\n            cleanup();\r\n            resolve(true);\r\n        };\r\n\r\n        const handleCancel = () => {\r\n            cleanup();\r\n            resolve(false);\r\n        };\r\n\r\n        const handleClickOutside = (event) => {\r\n            if (event.target === confirmModalOverlay) {\r\n                cleanup();\r\n                resolve(false);\r\n            }\r\n        };\r\n\r\n        const cleanup = () => {\r\n            modalConfirmButton.removeEventListener('click', handleConfirm);\r\n            modalCancelButton.removeEventListener('click', handleCancel);\r\n            confirmModalOverlay.removeEventListener('click', handleClickOutside);\r\n            confirmModalOverlay.style.display = 'none';\r\n        };\r\n\r\n        modalConfirmButton.addEventListener('click', handleConfirm);\r\n        modalCancelButton.addEventListener('click', handleCancel);\r\n        confirmModalOverlay.addEventListener('click', handleClickOutside);\r\n    });\r\n}\r\n\r\n/**\r\n * Handles API requests to the backend.\r\n * @param {string} method The HTTP method (e.g., \"GET\", \"POST\").\r\n * @param {string} path The API endpoint path (e.g., \"/login\").\r\n * @param {object} [body=null] The request body for POST/PUT requests.\r\n * @param {boolean} [isFormData=false] Whether the body is FormData.\r\n * @returns {Promise<any>} The JSON response from the API.\r\n */\r\nexport async function apiRequest(method, path, body = null, isFormData = false, onProgress = null) {\r\n    const token = localStorage.getItem('authToken');\r\n    const endpoint = `${API_BASE_URL}${path}`;\r\n\r\n    // NEW: Centralized logout function, only for true session expiration\r\n    const logoutUser = (message) => {\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userRole');\r\n        localStorage.removeItem('userId');\r\n        showModalMessage(message, true);\r\n        setTimeout(() => { window.location.href = 'login.html?sessionExpired=true'; }, 1500); \r\n    };\r\n\r\n    const options = { \r\n        method, \r\n        headers: {},\r\n        cache: 'no-cache' \r\n    };\r\n\r\n    if (token) {\r\n        options.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    if (body) {\r\n        if (isFormData) {\r\n            options.body = body;\r\n        } else {\r\n            options.headers['Content-Type'] = 'application/json';\r\n            options.body = JSON.stringify(body);\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(endpoint, options);\r\n        \r\n        // NEW: More granular error handling for 401/403\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({ error: response.statusText }));\r\n            \r\n            // If it's a 401 and a generic auth error, then log out\r\n            if (response.status === 401 && (errorData.error === 'Authentication failed.' || errorData.error === 'Invalid token.')) {\r\n                logoutUser('Your session has expired. Please log in again.');\r\n                throw new Error('Authentication failed.'); // Re-throw to stop further processing\r\n            } \r\n            // For other 401s, 403s (like permission denied, limits reached),\r\n            // or other non-2xx errors, just throw the error with the message\r\n            // and let the calling page handle the specific message.\r\n            else {\r\n                // Ensure errorData.error is always a string\r\n                const errorMessage = typeof errorData.error === 'string' ? errorData.error : `HTTP error! Status: ${response.status}`;\r\n                throw new Error(errorMessage);\r\n            }\r\n        }\r\n\r\n        if (response.status === 204) {\r\n            return null; // No content\r\n        }\r\n\r\n        return response.json();\r\n\r\n    } catch (error) {\r\n        // The calling function (e.g., admin.js) should now decide if it wants to show a modal.\r\n        // Only show generic modal if it's not an authentication error already handled by logoutUser.\r\n        // This catch block primarily re-throws the error for specific handling upstream.\r\n        console.error(\"API Request caught error:\", error); // Log the full error for debugging\r\n        throw error; // Re-throw to propagate to calling function\r\n    }\r\n}\r\n", "// js/pages/login.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the login page.\r\n */\r\nexport function handleLoginPage() {\r\n    const loginForm = document.getElementById(\"login-form\");\r\n    const errorMessage = document.getElementById(\"error-message\"); // Get error message element\r\n\r\n    // If login form is not found, exit the function\r\n    if (!loginForm) return;\r\n\r\n    // Check for session expired message in URL and display modal if present\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has('sessionExpired')) {\r\n        showModalMessage(\"Your session has expired. Please log in again.\", true);\r\n        // Clean the URL to remove the query parameter after displaying the message\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n    }\r\n\r\n    // Add event listener for the login form submission\r\n    loginForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        const email = document.getElementById(\"email\").value.trim();\r\n        const password = document.getElementById(\"password\").value;\r\n        \r\n        // Clear previous error messages\r\n        errorMessage.textContent = \"\";\r\n        errorMessage.classList.remove(\"visible\"); // Hide the error message element\r\n\r\n        // Basic client-side validation\r\n        if (!email || !password) {\r\n            errorMessage.textContent = \"Email and password are required.\";\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Send login credentials to the backend API\r\n            const data = await apiRequest(\"POST\", \"/api/login\", { email, password });\r\n            \r\n            // If login is successful and a token is received\r\n            if (data && data.token) {\r\n                localStorage.setItem(\"authToken\", data.token); // Store authentication token\r\n                localStorage.setItem(\"userRole\", data.role);   // Store user role\r\n                // Debugging: Log what's being stored\r\n                console.log('[login.js] Login successful. Stored authToken and userRole.');\r\n                console.log('[login.js] Stored Role:', data.role);\r\n                console.log('[login.js] Stored Token (first 20 chars):', data.token.substring(0, 20) + '...');\r\n\r\n\r\n                // Redirect based on user role\r\n                const destination = (data.role === \"super_admin\" || data.role === \"location_admin\") \r\n                                    ? \"suite-hub.html\" // Admins go to the app hub\r\n                                    : \"new-hire-view.html\"; // Regular employees go to their onboarding view\r\n                window.location.href = destination;\r\n            } else {\r\n                 // If no data or token, throw a generic login failed error\r\n                 throw new Error(\"Login failed. Please check your credentials.\");\r\n            }\r\n        } catch (error) {\r\n            // Display API error message or a generic one if no specific message\r\n            errorMessage.textContent = `Login Failed: ${error.message}`;\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            console.error('Login error:', error);\r\n        }\r\n    });\r\n}", "// js/pages/register.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the registration page.\r\n */\r\nexport function handleRegisterPage() {\r\n    const registerForm = document.getElementById(\"register-form\");\r\n    const errorMessage = document.getElementById(\"error-message\"); // Get error message element\r\n\r\n    // If register form is not found, exit the function\r\n    if (!registerForm) return;\r\n\r\n    // Add event listener for the registration form submission\r\n    registerForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault(); // Prevent default form submission\r\n\r\n        const companyName = document.getElementById(\"company-name\").value.trim();\r\n        const fullName = document.getElementById(\"full-name\").value.trim();\r\n        const email = document.getElementById(\"email\").value.trim();\r\n        const password = document.getElementById(\"password\").value;\r\n        \r\n        // Clear previous error messages\r\n        errorMessage.textContent = \"\";\r\n        errorMessage.classList.remove(\"visible\"); // Hide the error message element\r\n\r\n        // Basic client-side validation\r\n        if (!companyName || !fullName || !email || !password) {\r\n            errorMessage.textContent = \"All fields are required.\";\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Send registration data to the backend API\r\n            const data = await apiRequest(\"POST\", \"/api/register\", { companyName, fullName, email, password });\r\n            \r\n            // If registration is successful\r\n            if (data && data.message) {\r\n                showModalMessage(data.message, false); // Show success message\r\n                // Redirect to login page after a short delay\r\n                setTimeout(() => {\r\n                    window.location.href = \"login.html\";\r\n                }, 2000); // 2-second delay before redirecting\r\n            } else {\r\n                // If no data or message, throw a generic registration failed error\r\n                throw new Error(\"Registration failed. Please try again.\");\r\n            }\r\n        } catch (error) {\r\n            // Display API error message or a generic one if no specific message\r\n            errorMessage.textContent = `Registration Failed: ${error.message}`;\r\n            errorMessage.classList.add(\"visible\"); // Show the error message element\r\n            console.error('Registration error:', error);\r\n        }\r\n    });\r\n}\r\n", "import { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the dashboard page.\r\n */\r\nexport function handleDashboardPage() {\r\n    // Security check\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Elements ---\r\n    const onboardUserModal = document.getElementById('onboard-user-modal');\r\n    const onboardUserForm = document.getElementById('onboard-user-form');\r\n    const showOnboardModalBtn = document.getElementById('show-onboard-modal');\r\n    const modalCancelBtn = document.getElementById('modal-cancel-onboard');\r\n    const existingEmployeeSelect = document.getElementById('existing-employee-select');\r\n    const assignedTaskListInfo = document.getElementById('assigned-task-list-info');\r\n    const onboardModalStatusMessage = document.getElementById('onboard-modal-status-message');\r\n\r\n    const pendingCountEl = document.getElementById('pending-onboards-count');\r\n    const inProgressCountEl = document.getElementById('in-progress-count');\r\n    const completedCountEl = document.getElementById('completed-count');\r\n    const activityListEl = document.getElementById('activity-list');\r\n    \r\n    // --- State Variables ---\r\n    let allUsers = [];\r\n    let allChecklists = [];\r\n\r\n    // --- Helper Functions ---\r\n    const displayStatusMessage = (element, message, isError = false) => {\r\n        if (!element) return;\r\n        element.textContent = message;\r\n        element.className = isError ? 'error' : 'success';\r\n        setTimeout(() => element.textContent = '', 5000);\r\n    };\r\n\r\n    // --- Data Loading ---\r\n    async function loadDashboardData() {\r\n        try {\r\n            const [users, checklists, tasks] = await Promise.all([\r\n                apiRequest('GET', '/api/users'),\r\n                apiRequest('GET', '/api/checklists'),\r\n                apiRequest('GET', '/api/onboarding-tasks')\r\n            ]);\r\n            \r\n            allUsers = users;\r\n            allChecklists = checklists;\r\n\r\n            // Update stats and activity feed\r\n            updateStats(tasks);\r\n            updateActivityFeed(tasks);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error loading dashboard data:\", error);\r\n            showModalMessage(\"Could not load all dashboard data.\", true);\r\n        }\r\n    }\r\n\r\n    function updateStats(tasks) {\r\n        const userTasks = {};\r\n        tasks.forEach(task => {\r\n            if (!userTasks[task.user_id]) {\r\n                userTasks[task.user_id] = { total: 0, completed: 0 };\r\n            }\r\n            userTasks[task.user_id].total++;\r\n            if (task.completed) {\r\n                userTasks[task.user_id].completed++;\r\n            }\r\n        });\r\n\r\n        let pending = 0, inProgress = 0, completed = 0;\r\n        Object.values(userTasks).forEach(status => {\r\n            if (status.completed === 0) pending++;\r\n            else if (status.completed === status.total) completed++;\r\n            else inProgress++;\r\n        });\r\n        \r\n        if(pendingCountEl) pendingCountEl.textContent = pending;\r\n        if(inProgressCountEl) inProgressCountEl.textContent = inProgress;\r\n        if(completedCountEl) completedCountEl.textContent = completed;\r\n    }\r\n\r\n    function updateActivityFeed(tasks) {\r\n        if (!activityListEl) return;\r\n        activityListEl.innerHTML = '';\r\n        const recentTasks = tasks\r\n            .filter(t => t.completed)\r\n            .sort((a, b) => new Date(b.completed_at) - new Date(a.completed_at))\r\n            .slice(0, 5);\r\n        \r\n        if(recentTasks.length === 0) {\r\n            const placeholder = document.getElementById('activity-feed-placeholder');\r\n            if(placeholder) placeholder.style.display = 'block';\r\n        } else {\r\n             recentTasks.forEach(task => {\r\n                const li = document.createElement('li');\r\n                li.innerHTML = `<strong>${task.user_name}</strong> completed task: \"${task.description}\"`;\r\n                activityListEl.appendChild(li);\r\n            });\r\n        }\r\n    }\r\n    \r\n    async function populateEmployeeDropdown() {\r\n        if (!existingEmployeeSelect) return;\r\n        // Filter for users who are employees and not yet fully onboarded.\r\n        const unassignedUsers = allUsers.filter(user => user.role === 'employee');\r\n        \r\n        existingEmployeeSelect.innerHTML = '<option value=\"\">Select an employee...</option>';\r\n        unassignedUsers.forEach(user => {\r\n            const option = new Option(user.full_name, user.user_id);\r\n            existingEmployeeSelect.add(option);\r\n        });\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n    if (showOnboardModalBtn) {\r\n        showOnboardModalBtn.addEventListener('click', () => {\r\n            populateEmployeeDropdown();\r\n            if (onboardUserModal) onboardUserModal.style.display = 'flex';\r\n        });\r\n    }\r\n\r\n    if (modalCancelBtn) {\r\n        modalCancelBtn.addEventListener('click', () => {\r\n            if (onboardUserModal) onboardUserModal.style.display = 'none';\r\n        });\r\n    }\r\n\r\n    if (existingEmployeeSelect) {\r\n        existingEmployeeSelect.addEventListener('change', () => {\r\n            if (!assignedTaskListInfo) return;\r\n            const selectedUserId = existingEmployeeSelect.value;\r\n            const selectedEmployee = allUsers.find(user => String(user.user_id) === String(selectedUserId));\r\n            const position = selectedEmployee ? selectedEmployee.position : null;\r\n            \r\n            if (position) {\r\n                const matchingChecklist = allChecklists.find(c => c.position && c.position.toLowerCase() === position.toLowerCase());\r\n                assignedTaskListInfo.textContent = matchingChecklist \r\n                    ? `Will be assigned: \"${matchingChecklist.title}\"`\r\n                    : `No task list found for position: \"${position}\"`;\r\n            } else {\r\n                assignedTaskListInfo.textContent = 'Selected employee has no position set.';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Submit onboard employee form\r\n    if (onboardUserForm) {\r\n        onboardUserForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n\r\n            const selectedUserId = existingEmployeeSelect.value;\r\n            if (!selectedUserId) {\r\n                displayStatusMessage(onboardModalStatusMessage, 'Please select an employee.', true);\r\n                return;\r\n            }\r\n\r\n            const selectedEmployee = allUsers.find(user => String(user.user_id) === String(selectedUserId));\r\n            if (!selectedEmployee) {\r\n                displayStatusMessage(onboardModalStatusMessage, 'Selected employee not found. Please try again.', true);\r\n                return;\r\n            }\r\n\r\n            const employeePosition = selectedEmployee.position;\r\n            if (!employeePosition) {\r\n                displayStatusMessage(onboardModalStatusMessage, `This employee does not have a position set and cannot be assigned a task list.`, true);\r\n                return;\r\n            }\r\n\r\n            const matchingChecklist = allChecklists.find(checklist => \r\n                checklist.position && \r\n                checklist.position.toLowerCase() === employeePosition.toLowerCase()\r\n            );\r\n\r\n            if (!matchingChecklist) {\r\n                displayStatusMessage(onboardModalStatusMessage, `No task list found for position: \"${employeePosition}\". Please create one in Admin Settings > Task Lists.`, true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await apiRequest('POST', '/api/onboarding-tasks', {\r\n                    user_id: selectedUserId,\r\n                    checklist_id: matchingChecklist.id\r\n                }); \r\n\r\n                displayStatusMessage(onboardModalStatusMessage, `Task list \"${matchingChecklist.title}\" assigned to ${selectedEmployee.full_name} successfully!`, false);\r\n                onboardUserForm.reset(); \r\n                assignedTaskListInfo.textContent = ''; \r\n                \r\n                setTimeout(() => {\r\n                    if (onboardUserModal) onboardUserModal.style.display = 'none';\r\n                }, 1500);\r\n\r\n                loadDashboardData();\r\n\r\n            } catch (error) {\r\n                displayStatusMessage(onboardModalStatusMessage, `Error assigning task list: ${error.message}`, true);\r\n                console.error('Error assigning task list:', error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // --- Initial Load ---\r\n    loadDashboardData();\r\n}", "import { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\nexport function handleChecklistsPage() { // Make sure this function is properly opened and closed\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    const addTaskBtn = document.getElementById('add-task-btn');\r\n    const tasksInputArea = document.getElementById('tasks-input-area');\r\n    const newChecklistForm = document.getElementById('new-checklist-form');\r\n    const checklistListDiv = document.getElementById('checklist-list');\r\n\r\n    // NEW: Modal elements for attaching documents - Ensure these are correctly obtained\r\n    const attachDocumentModalOverlay = document.getElementById('attach-document-modal-overlay');\r\n    const attachDocumentListDiv = document.getElementById('attach-document-list');\r\n    const attachDocumentCancelBtn = document.getElementById('attach-document-cancel-btn');\r\n\r\n    let taskCounter = 0;\r\n    let currentTaskElement = null; // To keep track of which task's attach button was clicked\r\n\r\n    /**\r\n     * Adds a new task input field to the form.\r\n     */\r\n    const addNewTaskField = () => {\r\n        if (!tasksInputArea) return;\r\n\r\n        const taskGroup = document.createElement('div');\r\n        taskGroup.className = 'form-group task-input-group';\r\n        const inputId = `task-input-${taskCounter++}`;\r\n\r\n        taskGroup.innerHTML = `\r\n            <div style=\"display: flex; align-items: flex-end; gap: 10px;\">\r\n                <div style=\"flex-grow: 1;\">\r\n                    <label for=\"${inputId}\">Task Description</label>\r\n                    <input type=\"text\" id=\"${inputId}\" class=\"task-description-input\" required placeholder=\"Enter a task\">\r\n                </div>\r\n                <div class=\"task-actions\" style=\"display: flex; align-items: flex-end; gap: 5px; margin-bottom: 0;\">\r\n                    <button type=\"button\" class=\"btn btn-secondary btn-sm attach-file-btn\">Attach</button>\r\n                    <button type=\"button\" class=\"btn btn-secondary btn-sm remove-task-btn\">Remove</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"attached-document-info\" style=\"font-size: 0.8rem; color: var(--text-medium); margin-top: 5px; height: 1.2em;\"></div>\r\n        `;\r\n\r\n        tasksInputArea.appendChild(taskGroup);\r\n\r\n        // Add event listener for remove button\r\n        taskGroup.querySelector('.remove-task-btn').addEventListener('click', () => {\r\n            if (tasksInputArea.children.length > 1) {\r\n                taskGroup.remove();\r\n            } else {\r\n                showModalMessage(\"A task list must have at least one task.\", true);\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Loads existing checklists from the API and renders them.\r\n     */\r\n    const loadChecklists = async () => {\r\n        if (!checklistListDiv) return;\r\n        checklistListDiv.innerHTML = `<p style=\"color: var(--text-medium);\">Loading...</p>`;\r\n        try {\r\n            const checklists = await apiRequest('GET', '/api/checklists');\r\n            checklistListDiv.innerHTML = '';\r\n            if (checklists && checklists.length > 0) {\r\n                checklists.forEach(checklist => {\r\n                    const item = document.createElement('div');\r\n                    item.className = 'list-item';\r\n                    item.innerHTML = `<span><strong>${checklist.title}</strong> (For: ${checklist.position})</span>`;\r\n                    checklistListDiv.appendChild(item);\r\n                });\r\n            } else {\r\n                checklistListDiv.innerHTML = `<p style=\"color: var(--text-medium);\">No task lists created yet.</p>`;\r\n            }\r\n        } catch (e) {\r\n            checklistListDiv.innerHTML = `<p style=\"color:red;\">Could not load task lists: ${e.message}</p>`;\r\n            console.error('Error loading checklists:', e);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches documents from the API and populates the attach document modal.\r\n     */\r\n    const loadDocumentsForAttachModal = async () => {\r\n        if (!attachDocumentListDiv) return;\r\n        attachDocumentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading documents...</p>';\r\n        try {\r\n            const documents = await apiRequest('GET', '/api/documents');\r\n            attachDocumentListDiv.innerHTML = '';\r\n\r\n            if (documents && documents.length > 0) {\r\n                documents.forEach(doc => {\r\n                    const docItem = document.createElement('div');\r\n                    docItem.className = 'document-list-item';\r\n                    docItem.dataset.documentId = doc.document_id;\r\n                    // Use file_name directly, it will now be the GCS URL\r\n                    docItem.dataset.documentName = doc.file_name;\r\n                    docItem.innerHTML = `\r\n                        <span>${doc.title} (<small>${doc.file_name.split('/').pop()}</small>)</span>\r\n                        <button class=\"btn btn-primary btn-sm select-document-btn\">Select</button>\r\n                    `;\r\n                    attachDocumentListDiv.appendChild(docItem);\r\n                });\r\n\r\n                // Add event listeners to select buttons\r\n                attachDocumentListDiv.querySelectorAll('.select-document-btn').forEach(button => {\r\n                    button.addEventListener('click', (e) => {\r\n                        const selectedDocItem = e.target.closest('.document-list-item');\r\n                        const documentId = selectedDocItem.dataset.documentId;\r\n                        const documentName = selectedDocItem.dataset.documentName;\r\n                        attachDocumentToTask(documentId, documentName);\r\n                        // Hide modal after selection\r\n                        if (attachDocumentModalOverlay) { // Defensive check\r\n                             attachDocumentModalOverlay.style.display = 'none';\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                attachDocumentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No documents available to attach. Upload some in the Documents section.</p>';\r\n            }\r\n        } catch (error) {\r\n            attachDocumentListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading documents: ${error.message}</p>`;\r\n            console.error('Error loading documents for modal:', error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Attaches a selected document to the current task being edited.\r\n     * @param {string} documentId - The ID of the document.\r\n     * @param {string} documentName - The name of the document file (which will be the GCS URL).\r\n     */\r\n    const attachDocumentToTask = (documentId, documentName) => {\r\n        if (currentTaskElement) {\r\n            // Store document info directly on the taskGroup element for later retrieval on form submit\r\n            currentTaskElement.dataset.attachedDocumentId = documentId;\r\n            currentTaskElement.dataset.attachedDocumentName = documentName;\r\n\r\n            // Update the display for the user, showing only the filename from the URL\r\n            const infoDiv = currentTaskElement.querySelector('.attached-document-info');\r\n            if (infoDiv) {\r\n                infoDiv.innerHTML = `Attached: <a href=\"${documentName}\" target=\"_blank\" style=\"color: var(--primary-accent);\">${documentName.split('/').pop()}</a>`;\r\n            }\r\n        }\r\n    };\r\n\r\n    // --- Event Listeners ---\r\n\r\n    if (addTaskBtn) {\r\n        addTaskBtn.addEventListener('click', addNewTaskField);\r\n    }\r\n\r\n    // NEW: Event delegation for dynamically added 'Attach' buttons\r\n    if (tasksInputArea) {\r\n        tasksInputArea.addEventListener('click', (e) => {\r\n            const attachButton = e.target.closest('.attach-file-btn');\r\n            if (attachButton) {\r\n                currentTaskElement = attachButton.closest('.task-input-group'); // Store reference to the parent task group\r\n                if (attachDocumentModalOverlay) {\r\n                    attachDocumentModalOverlay.style.display = 'flex'; // Show the modal\r\n                    loadDocumentsForAttachModal(); // Load documents every time modal is opened\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // NEW: Close attach document modal\r\n    if (attachDocumentCancelBtn) {\r\n        attachDocumentCancelBtn.addEventListener('click', () => {\r\n            if (attachDocumentModalOverlay) {\r\n                attachDocumentModalOverlay.style.display = 'none';\r\n            }\r\n        });\r\n    }\r\n\r\n    if (newChecklistForm) {\r\n        newChecklistForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const tasks = [];\r\n            document.querySelectorAll('.task-input-group').forEach(taskGroup => {\r\n                const descriptionInput = taskGroup.querySelector('.task-description-input');\r\n                if (descriptionInput && descriptionInput.value.trim()) {\r\n                    const task = { description: descriptionInput.value.trim() };\r\n                    // Check if a document was attached to this specific task input group\r\n                    if (taskGroup.dataset.attachedDocumentId) {\r\n                        task.documentId = taskGroup.dataset.attachedDocumentId;\r\n                        task.documentName = taskGroup.dataset.attachedDocumentName;\r\n                    }\r\n                    tasks.push(task);\r\n                }\r\n            });\r\n\r\n            if (tasks.length === 0) {\r\n                showModalMessage(\"Please add at least one task description.\", true);\r\n                return;\r\n            }\r\n\r\n            const payload = {\r\n                title: document.getElementById('new-checklist-title').value.trim(),\r\n                position: document.getElementById('new-checklist-position').value.trim(),\r\n                tasks,\r\n                // Add structure_type and time_group_count to payload if needed by backend\r\n                // structure_type: document.getElementById('structure-type-select').value,\r\n                // time_group_count: document.getElementById('time-group-count').value,\r\n            };\r\n\r\n            try {\r\n                await apiRequest('POST', '/api/checklists', payload);\r\n                showModalMessage('Task list created successfully!', false);\r\n                newChecklistForm.reset();\r\n                tasksInputArea.innerHTML = ''; // Clear all task input fields\r\n                addNewTaskField(); // Add one fresh task input field\r\n                loadChecklists(); // Reload the list of checklists\r\n            } catch (error) {\r\n                showModalMessage(`Error: ${error.message}`, true);\r\n                console.error('Error creating task list:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initial page load\r\n    if (tasksInputArea && tasksInputArea.childElementCount === 0) {\r\n        addNewTaskField();\r\n    }\r\n    loadChecklists();\r\n} // Make sure this closing brace exists and matches the function opening brace", "// js/pages/admin.js\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n// SVG icon for the delete button, extracted to a constant for cleaner template literals\r\nconst DELETE_SVG_ICON = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>`;\r\n\r\n/**\r\n * Handles all logic for the admin settings page.\r\n */\r\nexport function handleAdminPage() {\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem('userRole');\r\n\r\n    if (!authToken || (userRole !== 'super_admin' && userRole !== 'location_admin')) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Hide sections based on user role for UI consistency (backend also enforces this)\r\n    if (userRole === 'location_admin') {\r\n        const inviteAdminCard = document.getElementById('invite-admin-card');\r\n        if (inviteAdminCard) {\r\n            inviteAdminCard.style.display = 'none';\r\n        }\r\n        const manageLocationsCard = document.getElementById('manage-locations-card');\r\n        if (manageLocationsCard) {\r\n            manageLocationsCard.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // --- DOM Element Selection ---\r\n    const locationListDiv = document.getElementById('location-list');\r\n    const newLocationForm = document.getElementById('new-location-form');\r\n    const newLocationNameInput = document.getElementById('new-location-name');\r\n    const newLocationAddressInput = document.getElementById('new-location-address');\r\n    const newLocationStatusMessage = document.getElementById('new-location-status-message');\r\n    const userListDiv = document.getElementById('user-list');\r\n    const inviteAdminForm = document.getElementById('invite-admin-form');\r\n    const adminLocationSelect = document.getElementById('admin-location-select');\r\n    const inviteAdminStatusMessage = document.getElementById('invite-admin-status-message');\r\n    const inviteEmployeeForm = document.getElementById('invite-employee-form');\r\n    const employeeLocationSelect = document.getElementById('employee-location-select'); \r\n    const employeeAvailabilityGrid = document.getElementById('employee-availability-grid'); // This ID is not in admin.html, but keep for now if it's used elsewhere\r\n    const inviteEmployeeStatusMessage = document.getElementById('invite-employee-status-message');\r\n\r\n    // Business Settings Form Elements\r\n    const businessSettingsForm = document.getElementById('business-settings-form');\r\n    const operatingHoursStartInput = document.getElementById('operating-hours-start');\r\n    const operatingHoursEndInput = document.getElementById('operating-hours-end');\r\n    const currentOperatingHoursDisplay = document.getElementById('current-operating-hours-display');\r\n    const businessSettingsStatusMessage = document.getElementById('business-settings-status-message');\r\n\r\n\r\n    // Default business hours for availability generation, fetched from backend if available\r\n    let businessOperatingStartHour = 0; // Default to 00:00 (midnight)\r\n    let businessOperatingEndHour = 24; // Default to 24:00 (midnight next day)\r\n\r\n    // --- Helper function to display local status messages ---\r\n    /**\r\n     * Displays a status message on a specified DOM element.\r\n     * @param {HTMLElement} element - The DOM element to display the message in.\r\n     * @param {string} message - The message text.\r\n     * @param {boolean} [isError=false] - True if the message is an error, false for success.\r\n     */\r\n    function displayStatusMessage(element, message, isError = false) {\r\n        if (!element) return;\r\n        element.innerHTML = message;\r\n        element.classList.remove('success', 'error'); // Clear previous states\r\n        element.classList.add(isError ? 'error' : 'success');\r\n        setTimeout(() => {\r\n            element.textContent = '';\r\n            element.classList.remove('success', 'error');\r\n        }, 5000); // Clear message after 5 seconds\r\n    }\r\n\r\n    // NEW: Helper function to convert 24-hour time string to 12-hour format\r\n    function convertTo12Hour(time24) {\r\n        if (!time24) return 'N/A';\r\n        const [hour, minute] = time24.split(':');\r\n        const h = parseInt(hour, 10);\r\n        const ampm = h >= 12 ? 'PM' : 'AM';\r\n        const displayHour = h % 12 === 0 ? 12 : h % 12;\r\n        return `${displayHour}:${minute} ${ampm}`;\r\n    }\r\n\r\n    // --- Data Loading Functions ---\r\n\r\n    /**\r\n     * Fetches and displays existing locations.\r\n     */\r\n    async function loadLocations() {\r\n        if (!locationListDiv) return;\r\n        locationListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading locations...</p>'; // Show loading state\r\n        try {\r\n            // API call to get locations (backend filters by location_admin role)\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            locationListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const listItem = document.createElement('div');\r\n                    listItem.className = 'list-item';\r\n                    listItem.innerHTML = `\r\n                        <span><strong>${loc.location_name}</strong> (${loc.location_address})</span>\r\n                        <button class=\"btn-delete\" data-id=\"${loc.location_id}\" data-type=\"location\" title=\"Delete Location\">\r\n                            ${DELETE_SVG_ICON}\r\n                        </button>\r\n                    `;\r\n                    locationListDiv.appendChild(listItem);\r\n                });\r\n            } else {\r\n                locationListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No locations added yet.</p>';\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading locations: ${error.message}`, true); \r\n            console.error('Error loading locations:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populates the location dropdowns for inviting new admins and employees.\r\n     */\r\n    async function populateLocationDropdowns() {\r\n        if (!adminLocationSelect || !employeeLocationSelect) return;\r\n        try {\r\n            // API call to get locations (backend filters by location_admin role)\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            \r\n            adminLocationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n            employeeLocationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const adminOption = new Option(loc.location_name, loc.location_id);\r\n                    const employeeOption = new Option(loc.location_name, loc.location_id);\r\n                    adminLocationSelect.add(adminOption);\r\n                    employeeLocationSelect.add(employeeOption);\r\n                });\r\n            } else {\r\n                adminLocationSelect.innerHTML = '<option value=\"\">No locations available</option>';\r\n                employeeLocationSelect.innerHTML = '<option value=\"\">No locations available</option>';\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to populate location dropdowns:\", error);\r\n            // Display a message to the user if dropdowns can't be loaded\r\n            showModalMessage('Failed to load locations for dropdowns. Please try again.', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches and displays all users (admins and employees).\r\n     */\r\n    async function loadUsers() {\r\n        if (!userListDiv) return;\r\n        userListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading users...</p>'; // Show loading state\r\n        try {\r\n            // API call to get users (backend filters by location_admin role)\r\n            const users = await apiRequest('GET', '/api/users');\r\n            userListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (users && users.length > 0) {\r\n                const userGroups = {\r\n                    super_admin: [],\r\n                    location_admin: [],\r\n                    employee: []\r\n                };\r\n\r\n                // Categorize users by role\r\n                users.forEach(user => {\r\n                    if (userGroups[user.role]) {\r\n                        userGroups[user.role].push(user);\r\n                    }\r\n                });\r\n\r\n                const groupOrder = ['super_admin', 'location_admin', 'employee'];\r\n                const groupTitles = {\r\n                    super_admin: 'Super Admins',\r\n                    location_admin: 'Location Admins',\r\n                    employee: 'Employees'\r\n                };\r\n\r\n                // Render users grouped by role\r\n                groupOrder.forEach(role => {\r\n                    const group = userGroups[role];\r\n                    if (group.length > 0) {\r\n                        const groupHeader = document.createElement('h4');\r\n                        groupHeader.textContent = groupTitles[role];\r\n                        userListDiv.appendChild(groupHeader);\r\n                        \r\n                        group.forEach(user => {\r\n                            let userDisplayTitle;\r\n                            // Determine the title to display based on role or position\r\n                            // NEW LOGIC: Use role for Super Admin and Location Admin\r\n                            if (user.role === 'super_admin') {\r\n                                userDisplayTitle = 'Super Admin';\r\n                            } else if (user.role === 'location_admin') {\r\n                                userDisplayTitle = 'Location Admin';\r\n                            } else { // employee role\r\n                                userDisplayTitle = (user.position && user.position.trim() !== '') ? user.position : 'N/A';\r\n                            }\r\n\r\n                            const userLocationDisplay = (user.location_name && user.location_name.trim() !== '') \r\n                                ? `<br><small style=\"color:var(--text-medium);\">Location: ${user.location_name}</small>` \r\n                                : ''; // Only display location line if location_name exists\r\n\r\n                            const listItem = document.createElement('div');\r\n                            listItem.className = 'list-item';\r\n                            listItem.innerHTML = `\r\n                                <span>\r\n                                    <strong>${user.full_name}</strong> (${userDisplayTitle}) \r\n                                    ${userLocationDisplay}\r\n                                </span>\r\n                                <button class=\"btn-delete\" data-id=\"${user.user_id}\" data-type=\"user\" title=\"Delete User\">\r\n                                    ${DELETE_SVG_ICON}\r\n                                </button>\r\n                            `;\r\n                            userListDiv.appendChild(listItem);\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                userListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No users found.</p>';\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading users: ${error.message}`, true);\r\n            console.error('Error loading users:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches business operating hours to set the range for availability inputs.\r\n     * Also displays current hours.\r\n     */\r\n    async function fetchBusinessHours() {\r\n        if (!currentOperatingHoursDisplay || !operatingHoursStartInput || !operatingHoursEndInput) return;\r\n\r\n        currentOperatingHoursDisplay.textContent = 'Loading current hours...';\r\n        try {\r\n            const settings = await apiRequest('GET', '/api/settings/business');\r\n            if (settings) {\r\n                // Update internal variables for availability generation\r\n                businessOperatingStartHour = parseInt((settings.operating_hours_start || '00:00').split(':')[0], 10);\r\n                businessOperatingEndHour = parseInt((settings.operating_hours_end || '24:00').split(':')[0], 10);\r\n                \r\n                // Set the form input values (still 24-hour format for input type=\"time\")\r\n                operatingHoursStartInput.value = settings.operating_hours_start || '';\r\n                operatingHoursEndInput.value = settings.operating_hours_end || '';\r\n\r\n                // Display current hours in 12-hour format\r\n                const displayStart = convertTo12Hour(settings.operating_hours_start);\r\n                const displayEnd = convertTo12Hour(settings.operating_hours_end);\r\n                currentOperatingHoursDisplay.textContent = `Current: ${displayStart} - ${displayEnd}`;\r\n                currentOperatingHoursDisplay.style.color = 'var(--text-light)'; // Reset color if it was an error before\r\n\r\n                generateAvailabilityInputs(); // Regenerate inputs with correct hours\r\n            } else {\r\n                currentOperatingHoursDisplay.textContent = 'Current hours: Not set';\r\n                currentOperatingHoursDisplay.style.color = 'var(--text-medium)';\r\n                generateAvailabilityInputs(); // Use defaults if no settings\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch business hours, using defaults:\", error);\r\n            currentOperatingHoursDisplay.textContent = `Error loading current hours: ${error.message}`;\r\n            currentOperatingHoursDisplay.style.color = '#ff8a80'; // Error color\r\n            generateAvailabilityInputs(); // Continue with default 0-24 hours if fetch fails\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates time input dropdowns for weekly availability.\r\n     */\r\n    function generateAvailabilityInputs() {\r\n        if (!employeeAvailabilityGrid) return; // Check if the element exists\r\n        employeeAvailabilityGrid.innerHTML = ''; // Clear existing inputs\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        \r\n        days.forEach(day => {\r\n            const dayId = day.toLowerCase();\r\n            const availabilityHtml = `\r\n                <label for=\"avail-${dayId}-start\">${day}</label>\r\n                <div class=\"time-range\">\r\n                    <select id=\"avail-${dayId}-start\" data-day=\"${dayId}\" data-type=\"start\">\r\n                        ${generateTimeOptions(businessOperatingStartHour, businessOperatingEndHour)}\r\n                    </select>\r\n                    <span>-</span>\r\n                    <select id=\"avail-${dayId}-end\" data-day=\"${dayId}\" data-type=\"end\">\r\n                        ${generateTimeOptions(businessOperatingStartHour, businessOperatingEndHour)}\r\n                    </select>\r\n                </div>\r\n            `;\r\n            const div = document.createElement('div');\r\n            div.className = 'availability-day';\r\n            div.innerHTML = availabilityHtml;\r\n            employeeAvailabilityGrid.appendChild(div);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates <option> tags for time select dropdowns.\r\n     * @param {number} startHour - The starting hour (0-23).\r\n     * @param {number} endHour - The ending hour (0-24, where 24 means end of day).\r\n     * @returns {string} HTML string of option tags.\r\n     */\r\n    function generateTimeOptions(startHour = 0, endHour = 24) {\r\n        let options = '<option value=\"\">Not Available</option>'; // Default \"Not Available\"\r\n        for (let i = startHour; i <= endHour; i++) { // Include endHour for full range, e.g., 17:00\r\n            const hour24 = i;\r\n            const displayHour = hour24 % 12 === 0 ? 12 : hour24 % 12;\r\n            const ampm = hour24 < 12 ? 'AM' : 'PM';\r\n            const timeValue = `${String(hour24).padStart(2, '0')}:00`; // Value for input type=\"time\" (24-hour)\r\n            const displayText = `${displayHour}:00 ${ampm}`; // Text for display (12-hour)\r\n            options += `<option value=\"${timeValue}\">${displayText}</option>`;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Handle new location form submission\r\n    if (newLocationForm) {\r\n        newLocationForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const locationData = {\r\n                location_name: newLocationNameInput.value.trim(),\r\n                location_address: newLocationAddressInput.value.trim()\r\n            };\r\n            if (!locationData.location_name || !locationData.location_address) {\r\n                return displayStatusMessage(newLocationStatusMessage, 'Location name and address are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/locations', locationData);\r\n                displayStatusMessage(newLocationStatusMessage, 'Location created successfully!', false);\r\n                newLocationForm.reset(); // Clear the form\r\n                loadLocations(); // Reload location list\r\n                populateLocationDropdowns(); // Update dropdowns\r\n            } catch (error) {\r\n                displayStatusMessage(newLocationStatusMessage, `Error creating location: ${error.message}`, true);\r\n                console.error('Error creating location:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle delete actions for locations and users using event delegation\r\n    const handleDelete = async (e) => {\r\n        const deleteBtn = e.target.closest('.btn-delete');\r\n        if (deleteBtn) {\r\n            const id = deleteBtn.dataset.id;\r\n            const type = deleteBtn.dataset.type; // 'user' or 'location'\r\n            \r\n            let confirmMessage = `Are you sure you want to delete this ${type}? This action cannot be undone.`;\r\n            if (type === 'location') {\r\n                confirmMessage = `Are you sure you want to delete this location? All users associated with this location must be reassigned or deleted first. This cannot be undone.`;\r\n            } else if (type === 'user') {\r\n                 confirmMessage = `Are you sure you want to delete this user? This will also remove any onboarding tasks assigned to them. This cannot be undone.`;\r\n            }\r\n\r\n            const confirmed = await showConfirmModal(confirmMessage);\r\n            if (confirmed) {\r\n                try {\r\n                    await apiRequest('DELETE', `/api/${type}s/${id}`); // Call the generic delete endpoint\r\n                    showModalMessage(`${type.charAt(0).toUpperCase() + type.slice(1)} deleted successfully.`, false);\r\n                    if (type === 'location') {\r\n                        loadLocations(); // Reload locations\r\n                        populateLocationDropdowns(); // Update dropdowns\r\n                    } else if (type === 'user') {\r\n                        loadUsers(); // Reload users\r\n                    }\r\n                } catch (error) {\r\n                    showModalMessage(`Error deleting ${type}: ${error.message}`, true);\r\n                    console.error(`Error deleting ${type}:`, error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Attach delegated event listeners to the parent containers\r\n    if (locationListDiv) locationListDiv.addEventListener('click', handleDelete);\r\n    if (userListDiv) userListDiv.addEventListener('click', handleDelete);\r\n\r\n    // Handle invite new admin form submission\r\n    if (inviteAdminForm) {\r\n        inviteAdminForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const adminData = {\r\n                full_name: document.getElementById('admin-name').value.trim(),\r\n                email: document.getElementById('admin-email').value.trim(),\r\n                password: document.getElementById('admin-password').value,\r\n                location_id: adminLocationSelect.value || null\r\n            };\r\n            if (!adminData.full_name || !adminData.email || !adminData.password || !adminData.location_id) {\r\n                return displayStatusMessage(inviteAdminStatusMessage, 'Full name, email, password, and location are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/invite-admin', adminData);\r\n                displayStatusMessage(inviteAdminStatusMessage, 'Admin invited successfully!', false);\r\n                inviteAdminForm.reset(); // Clear the form\r\n                loadUsers(); // Reload user list to show new admin\r\n            } catch (error) {\r\n                displayStatusMessage(inviteAdminStatusMessage, `Error: ${error.message}`, true);\r\n                console.error('Error inviting admin:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle invite new employee form submission\r\n    if (inviteEmployeeForm) {\r\n        inviteEmployeeForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const availability = {};\r\n            // Collect availability data from generated selects\r\n            // Ensure employeeAvailabilityGrid exists before querying its children\r\n            if (employeeAvailabilityGrid) {\r\n                document.querySelectorAll('#employee-availability-grid select').forEach(select => {\r\n                    const day = select.dataset.day;\r\n                    const type = select.dataset.type; // 'start' or 'end'\r\n                    if (select.value) { // Only add if a time is selected (not \"Not Available\")\r\n                        if (!availability[day]) availability[day] = {};\r\n                        availability[day][type] = select.value;\r\n                    }\r\n                });\r\n            }\r\n\r\n            const employeeData = {\r\n                full_name: document.getElementById('employee-name').value.trim(),\r\n                email: document.getElementById('employee-email').value.trim(),\r\n                password: document.getElementById('employee-password').value,\r\n                position: document.getElementById('employee-position').value.trim(),\r\n                employee_id: document.getElementById('employee-id').value.trim(), // Ensure this element exists in HTML\r\n                employment_type: document.getElementById('employee-type').value, // Ensure this element exists in HTML\r\n                location_id: employeeLocationSelect.value || null,\r\n                availability: Object.keys(availability).length > 0 ? availability : null // Send as JSON object or null\r\n            };\r\n\r\n            if (!employeeData.full_name || !employeeData.email || !employeeData.password || !employeeData.location_id) {\r\n                return displayStatusMessage(inviteEmployeeStatusMessage, 'Name, email, password, and location are required.', true);\r\n            }\r\n            try {\r\n                await apiRequest('POST', '/api/invite-employee', employeeData);\r\n                displayStatusMessage(inviteEmployeeStatusMessage, 'Employee invited successfully!', false);\r\n                inviteEmployeeForm.reset(); // Clear the form\r\n                // Only call generateAvailabilityInputs if employeeAvailabilityGrid exists to avoid errors\r\n                if (employeeAvailabilityGrid) {\r\n                    generateAvailabilityInputs(); // Regenerate default availability inputs\r\n                }\r\n                loadUsers(); // Reload user list to show new employee\r\n            } catch (error) {\r\n                // MODIFIED: Use showModalMessage for the tier limit error\r\n                showModalMessage(`Error: ${error.message}`, true);\r\n                console.error('Error inviting employee:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle business settings form submission\r\n    if (businessSettingsForm) {\r\n        businessSettingsForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const start_time = operatingHoursStartInput.value;\r\n            const end_time = operatingHoursEndInput.value;\r\n\r\n            if (!start_time || !end_time) {\r\n                displayStatusMessage(businessSettingsStatusMessage, 'Both start and end times are required.', true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Send update request to backend\r\n                await apiRequest('PUT', '/api/settings/business', {\r\n                    operating_hours_start: start_time,\r\n                    operating_hours_end: end_time\r\n                });\r\n                displayStatusMessage(businessSettingsStatusMessage, 'Operating hours updated successfully!', false);\r\n                fetchBusinessHours(); // Refresh displayed hours and availability inputs\r\n            } catch (error) {\r\n                displayStatusMessage(businessSettingsStatusMessage, `Error updating hours: ${error.message}`, true);\r\n                console.error('Error updating business settings:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    // Fetch business hours first to correctly set availability input ranges\r\n    fetchBusinessHours().then(() => {\r\n        // Then load other data that might depend on business hours or just needs to be loaded\r\n        loadLocations();\r\n        populateLocationDropdowns();\r\n        loadUsers();\r\n    });\r\n}", "// js/pages/account.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the account page.\r\n */\r\nexport function handleAccountPage() {\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Get elements from the DOM\r\n    const displaySubscriptionPlan = document.getElementById('display-subscription-plan');\r\n    const updateProfileForm = document.getElementById('update-profile-form');\r\n    const profileNameInput = document.getElementById('profile-name');\r\n    const profileEmailInput = document.getElementById('profile-email');\r\n    const currentPasswordInput = document.getElementById('current-password');\r\n    const newPasswordInput = document.getElementById('new-password');\r\n\r\n    /**\r\n     * Fetches the current user's profile data and populates the form and display elements.\r\n     */\r\n    async function loadProfile() {\r\n        // Set loading text while fetching\r\n        if (profileNameInput) profileNameInput.value = 'Loading...';\r\n        if (profileEmailInput) profileEmailInput.value = 'Loading...';\r\n\r\n        try {\r\n            // Assumes an API endpoint like '/users/me' to get the current user's data\r\n            const user = await apiRequest('GET', '/api/users/me'); \r\n            if (user) {\r\n                if (profileNameInput) profileNameInput.value = user.full_name;\r\n                if (profileEmailInput) profileEmailInput.value = user.email;\r\n            }\r\n        } catch (error) {\r\n            showModalMessage(`Error loading profile: ${error.message}`, true);\r\n            console.error('Error loading profile:', error);\r\n            if (profileNameInput) profileNameInput.value = 'Error loading data';\r\n            if (profileEmailInput) profileEmailInput.value = 'Error loading data';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches and displays the user's subscription plan.\r\n     */\r\n    async function loadSubscriptionPlan() {\r\n        if (!displaySubscriptionPlan) return;\r\n        displaySubscriptionPlan.textContent = 'Loading...'; // Show loading state\r\n        try {\r\n            // Fetch subscription status from the backend\r\n            const response = await apiRequest('GET', '/api/subscription-status');\r\n            if (response && response.plan) {\r\n                displaySubscriptionPlan.textContent = response.plan.toUpperCase(); // Display plan in uppercase\r\n            } else {\r\n                displaySubscriptionPlan.textContent = 'N/A';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading subscription plan:', error);\r\n            displaySubscriptionPlan.textContent = 'Error';\r\n            showModalMessage(`Error loading subscription plan: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    // Add event listener for the profile update form\r\n    if (updateProfileForm) {\r\n        updateProfileForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n\r\n            const fullName = profileNameInput.value.trim();\r\n            const email = profileEmailInput.value.trim();\r\n            const currentPassword = currentPasswordInput.value;\r\n            const newPassword = newPasswordInput.value;\r\n\r\n            const updateData = {\r\n                full_name: fullName,\r\n                email: email\r\n            };\r\n\r\n            // Only include password fields if the user has entered a new password.\r\n            // The backend should require the current password for security.\r\n            if (newPassword) {\r\n                if (!currentPassword) {\r\n                     showModalMessage('To change your password, you must provide your current password.', true);\r\n                     return;\r\n                }\r\n                updateData.current_password = currentPassword;\r\n                updateData.new_password = newPassword;\r\n            }\r\n\r\n            try {\r\n                // Send PUT request to update the user's profile\r\n                await apiRequest('PUT', '/api/users/me', updateData); \r\n                showModalMessage('Profile updated successfully!', false);\r\n                \r\n                // Clear password fields after successful submission\r\n                if(currentPasswordInput) currentPasswordInput.value = '';\r\n                if(newPasswordInput) newPasswordInput.value = '';\r\n\r\n                // Reload profile to reflect updated info (e.g., if email changed)\r\n                loadProfile(); \r\n            } catch (error) {\r\n                showModalMessage(`Error updating profile: ${error.message}`, true);\r\n                console.error('Error updating profile:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Handle Payment Redirect Status ---\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has('payment')) {\r\n        const paymentStatus = urlParams.get('payment');\r\n        if (paymentStatus === 'success') {\r\n            showModalMessage('Payment successful! Your plan has been updated.', false);\r\n        } else if (paymentStatus === 'cancelled') {\r\n            showModalMessage('Payment cancelled. You can try again at any time.', true);\r\n        }\r\n        // Clean the URL to remove the query parameters after displaying the message\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    loadProfile(); // Load user profile data when the page loads\r\n    loadSubscriptionPlan(); // Load subscription plan when the page loads\r\n}\r\n", "// js/pages/documents.js\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the documents page.\r\n */\r\nexport function handleDocumentsPage() { // Ensure this is exported\r\n    // Security check: Redirect to login page if no authentication token is found in local storage\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // Get elements from the DOM\r\n    const uploadForm = document.getElementById('upload-document-form');\r\n    const documentListDiv = document.getElementById('document-list');\r\n    const progressContainer = document.getElementById('upload-progress-container');\r\n    const progressFill = document.getElementById('upload-progress-fill');\r\n    const progressText = document.getElementById('upload-progress-text');\r\n\r\n    /**\r\n     * Fetches all documents from the API and renders them in the list.\r\n     */\r\n    async function loadDocuments() {\r\n        if (!documentListDiv) return;\r\n        documentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading documents...</p>'; // Show loading state\r\n\r\n        try {\r\n            const documents = await apiRequest('GET', '/api/documents'); // Fetch documents from backend\r\n            documentListDiv.innerHTML = ''; // Clear loading message\r\n\r\n            if (documents && documents.length > 0) {\r\n                documents.forEach(doc => {\r\n                    const docItem = document.createElement('div');\r\n                    docItem.className = 'document-item';\r\n                    docItem.innerHTML = `\r\n                        <h4>${doc.title}</h4>\r\n                        <p><strong>File:</strong> ${doc.file_name.split('/').pop()}</p> <!-- Display only filename from URL -->\r\n                        <p><strong>Description:</strong> ${doc.description || 'N/A'}</p>\r\n                        <p style=\"font-size: 0.8em; color: var(--text-medium);\">Uploaded by: ${doc.uploaded_by_name || 'Unknown'}</p>\r\n                        <p style=\"font-size: 0.8em; color: var(--text-medium);\">Uploaded: ${new Date(doc.uploaded_at).toLocaleDateString()}</p>\r\n                        <div class=\"actions\">\r\n                            <a href=\"${doc.file_name}\" target=\"_blank\" class=\"btn btn-secondary btn-sm\" title=\"Download Document\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"/>\r\n                                    <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"/>\r\n                                </svg>\r\n                            </a>\r\n                            <button class=\"btn-delete\" data-doc-id=\"${doc.document_id}\" title=\"Delete Document\">\r\n                               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 1 0 0 1-2 2H5a2 1 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>\r\n                            </button>\r\n                        </div>\r\n                    `;\r\n                    documentListDiv.appendChild(docItem);\r\n                });\r\n            } else {\r\n                documentListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No documents uploaded yet.</p>';\r\n            }\r\n        } catch (error) {\r\n            documentListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading documents: ${error.message}</p>`;\r\n            console.error('Error loading documents:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of a document.\r\n     * @param {string} documentId - The ID of the document to delete.\r\n     */\r\n    async function deleteDocument(documentId) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to delete this document? This cannot be undone and will permanently remove the file.', 'Delete');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/documents/${documentId}`); // Call backend delete endpoint\r\n                showModalMessage('Document deleted successfully!', false);\r\n                loadDocuments(); // Refresh the document list\r\n            } catch (error) {\r\n                showModalMessage(`Error deleting document: ${error.message}`, true);\r\n                console.error('Error deleting document:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Event listener for the document list (uses event delegation for delete buttons)\r\n    if (documentListDiv) {\r\n        documentListDiv.addEventListener('click', (event) => {\r\n            const deleteButton = event.target.closest('.btn-delete');\r\n            if (deleteButton) {\r\n                const documentId = deleteButton.dataset.docId;\r\n                deleteDocument(documentId);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Event listener for the upload form submission\r\n    if (uploadForm) {\r\n        uploadForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            \r\n            const title = document.getElementById('document-title').value;\r\n            const description = document.getElementById('document-description').value;\r\n            const fileInput = document.getElementById('document-file');\r\n            const file = fileInput.files[0];\r\n\r\n            if (!file || !title) {\r\n                showModalMessage('Please provide a title and select a file.', true);\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('title', title);\r\n            formData.append('description', description);\r\n            formData.append('document', file); // 'document' must match the field name in multer upload.single()\r\n\r\n            // Show and reset the progress bar\r\n            if (progressContainer) progressContainer.style.display = 'block';\r\n            if (progressText) progressText.style.display = 'block';\r\n            if (progressFill) progressFill.style.width = '0%';\r\n            if (progressText) progressText.textContent = '0%';\r\n\r\n            try {\r\n                // Use apiRequest with isFormData=true and onProgress callback\r\n                await apiRequest('POST', '/api/documents', formData, true, (event) => {\r\n                    // This is the onProgress callback for apiRequest\r\n                    if (event.lengthComputable) {\r\n                        const percentComplete = Math.round((event.loaded / event.total) * 100);\r\n                        if (progressFill) progressFill.style.width = `${percentComplete}%`;\r\n                        if (progressText) progressText.textContent = `${percentComplete}%`;\r\n                    }\r\n                });\r\n                showModalMessage('Document uploaded successfully!', false);\r\n                uploadForm.reset(); // Clear the form fields\r\n                loadDocuments(); // Refresh the list to show the newly uploaded document\r\n            } catch (error) {\r\n                showModalMessage(`Upload failed: ${error.message}`, true);\r\n                console.error('Error uploading document:', error);\r\n            } finally {\r\n                // Hide the progress bar after completion or failure\r\n                if (progressContainer) progressContainer.style.display = 'none';\r\n                if (progressText) progressText.style.display = 'none';\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load ---\r\n    loadDocuments(); // Load documents when the page loads\r\n}\r\n", "// js/pages/hiring.js - MASTER SOLUTION VERSION\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the hiring page.\r\n */\r\nexport function handleHiringPage() {\r\n    // Security check: Redirect if not logged in\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Elements ---\r\n    const newJobPostingForm = document.getElementById('new-job-posting-form');\r\n    const jobTitleInput = document.getElementById('job-title');\r\n    const jobDescriptionTextarea = document.getElementById('job-description');\r\n    const jobRequirementsTextarea = document.getElementById('job-requirements');\r\n    const jobLocationSelect = document.getElementById('job-location-select');\r\n    const jobPostingStatusMessage = document.getElementById('job-posting-status-message');\r\n\r\n    const jobPostingsListDiv = document.getElementById('job-postings-list');\r\n    const applicantsListDiv = document.getElementById('applicants-list');\r\n\r\n    /**\r\n     * Displays a status message on a specified DOM element.\r\n     */\r\n    function displayStatusMessage(element, message, isError = false) {\r\n        if (!element) return;\r\n        element.innerHTML = message;\r\n        element.classList.remove('success', 'error');\r\n        element.classList.add(isError ? 'error' : 'success');\r\n        setTimeout(() => {\r\n            element.textContent = '';\r\n            element.classList.remove('success', 'error');\r\n        }, 5000);\r\n    }\r\n\r\n    /**\r\n     * Loads locations from the API and populates the job posting form's location dropdown.\r\n     */\r\n    async function loadLocationsForJobPostingForm() {\r\n        if (!jobLocationSelect) return;\r\n        jobLocationSelect.innerHTML = '<option value=\"\">Loading locations...</option>';\r\n        try {\r\n            const locations = await apiRequest('GET', '/api/locations'); \r\n            jobLocationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n\r\n            if (locations && locations.length > 0) {\r\n                locations.forEach(loc => {\r\n                    const option = new Option(loc.location_name, loc.location_id);\r\n                    jobLocationSelect.add(option);\r\n                });\r\n            } else {\r\n                jobLocationSelect.innerHTML = '<option value=\"\">No locations available</option>';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading locations for job posting form:', error);\r\n            jobLocationSelect.innerHTML = '<option value=\"\">Error loading locations</option>';\r\n            displayStatusMessage(jobPostingStatusMessage, `Error loading locations: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches current job postings from the API and renders them into the job postings list.\r\n     */\r\n    async function loadCurrentJobPostings() {\r\n        if (!jobPostingsListDiv) return;\r\n        jobPostingsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading job postings...</p>';\r\n        try {\r\n            const jobPostings = await apiRequest('GET', '/api/job-postings'); \r\n            jobPostingsListDiv.innerHTML = '';\r\n\r\n            if (jobPostings && jobPostings.length > 0) {\r\n                jobPostings.forEach(post => {\r\n                    const postItem = document.createElement('div');\r\n                    postItem.className = 'job-posting-item';\r\n                    postItem.innerHTML = `\r\n                        <div>\r\n                            <h4>${post.title}</h4>\r\n                            <p style=\"font-size: 0.8em; color: var(--text-medium);\">\r\n                                Location: ${post.location_name || 'Company Wide'}<br>\r\n                                Posted: ${new Date(post.created_at).toLocaleDateString()}\r\n                            </p>\r\n                        </div>\r\n                        <div class=\"job-posting-actions\">\r\n                            <a href=\"apply.html?jobId=${post.id}\" class=\"btn btn-secondary btn-sm\" target=\"_blank\" title=\"View Public Ad\">View</a>\r\n                            <button class=\"btn btn-secondary btn-sm btn-share\" data-id=\"${post.id}\" title=\"Share Job Posting\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z\"/>\r\n                                    <path d=\"M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z\"/>\r\n                                </svg>\r\n                            </button>\r\n                            <button class=\"btn btn-secondary btn-sm btn-delete-job-posting\" data-id=\"${post.id}\" title=\"Delete\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>\r\n                            </button>\r\n                        </div>\r\n                    `;\r\n                    jobPostingsListDiv.appendChild(postItem);\r\n                });\r\n            } else {\r\n                jobPostingsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No job postings found.</p>';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading job postings:', error);\r\n            jobPostingsListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading job postings: ${error.message}</p>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches recent applicants from the API and renders them into the applicants list.\r\n     */\r\n    async function loadRecentApplicants() {\r\n        if (!applicantsListDiv) return;\r\n        applicantsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">Loading applicants...</p>';\r\n        try {\r\n            const applicants = await apiRequest('GET', '/api/applicants'); \r\n            applicantsListDiv.innerHTML = '';\r\n\r\n            if (applicants && applicants.length > 0) {\r\n                applicants.forEach(applicant => {\r\n                    const applicantItem = document.createElement('div');\r\n                    applicantItem.className = 'applicant-item'; \r\n                    applicantItem.innerHTML = `\r\n                        <div>\r\n                            <h4>${applicant.name} <span style=\"font-size:0.8em; color:var(--text-medium);\">(${applicant.job_title || 'N/A'})</span></h4>\r\n                            <p style=\"font-size: 0.8em; color: var(--text-medium); margin-bottom: 5px;\">Email: ${applicant.email}</p>\r\n                            ${applicant.phone ? `<p style=\"font-size: 0.8em; color: var(--text-medium); margin-bottom: 5px;\">Phone: ${applicant.phone}</p>` : ''}\r\n                            <p style=\"font-size: 0.8em; color: var(--text-medium);\">Applied: ${new Date(applicant.applied_at).toLocaleDateString()}</p>\r\n                        </div>\r\n                        <div class=\"job-posting-actions\"> \r\n                            <button class=\"btn btn-secondary btn-sm btn-delete-applicant\" data-id=\"${applicant.id}\" title=\"Archive Applicant\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/><path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/></svg>\r\n                            </button>\r\n                        </div>\r\n                    `;\r\n                    applicantsListDiv.appendChild(applicantItem);\r\n                });\r\n            } else {\r\n                applicantsListDiv.innerHTML = '<p style=\"color: var(--text-medium);\">No recent applicants.</p>';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading applicants:', error);\r\n            applicantsListDiv.innerHTML = `<p style=\"color: #e74c3c;\">Error loading applicants: ${error.message}</p>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the submission of the new job posting form.\r\n     */\r\n    async function createJobPosting(e) {\r\n        e.preventDefault(); \r\n        const jobData = {\r\n            title: jobTitleInput.value.trim(),\r\n            description: jobDescriptionTextarea.value.trim(),\r\n            requirements: jobRequirementsTextarea.value.trim(),\r\n            location_id: jobLocationSelect.value || null \r\n        };\r\n        if (!jobData.title || !jobData.description || !jobData.location_id) {\r\n            displayStatusMessage(jobPostingStatusMessage, 'Job title, description, and location are required.', true);\r\n            return;\r\n        }\r\n        try {\r\n            await apiRequest('POST', '/api/job-postings', jobData); \r\n            displayStatusMessage(jobPostingStatusMessage, 'Job posting created successfully!', false);\r\n            newJobPostingForm.reset(); \r\n            loadCurrentJobPostings(); \r\n        } catch (error) {\r\n            displayStatusMessage(jobPostingStatusMessage, `Error creating job posting: ${error.message}`, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of a job posting.\r\n     */\r\n    async function deleteJobPosting(id) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to delete this job posting?', 'Delete');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/job-postings/${id}`); \r\n                showModalMessage('Job posting deleted successfully!', false);\r\n                loadCurrentJobPostings(); \r\n            } catch (error) {\r\n                showModalMessage(`Error deleting job posting: ${error.message}`, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles archiving/deletion of an applicant.\r\n     */\r\n    async function deleteApplicant(id) {\r\n        const confirmed = await showConfirmModal('Are you sure you want to archive this applicant?', 'Archive');\r\n        if (confirmed) {\r\n            try {\r\n                await apiRequest('DELETE', `/api/applicants/${id}`);\r\n                showModalMessage('Applicant archived successfully!', false);\r\n                loadRecentApplicants(); \r\n            } catch (error) {\r\n                showModalMessage(`Error archiving applicant: ${error.message}`, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates and displays a share modal with the job link and embed code.\r\n     * @param {string} jobId The ID of the job to share.\r\n     */\r\n    function openShareModal(jobId) {\r\n        const applyUrl = `${window.location.origin}/apply.html?jobId=${jobId}`;\r\n        const embedCode = `<iframe src=\"${applyUrl}\" width=\"100%\" height=\"600\" frameborder=\"0\"></iframe>`;\r\n\r\n        const existingModal = document.getElementById('share-job-modal');\r\n        if (existingModal) {\r\n            existingModal.remove();\r\n        }\r\n\r\n        const modalHtml = `\r\n            <div id=\"share-job-modal\" class=\"modal-overlay\" style=\"display: flex; align-items: center; justify-content: center;\">\r\n                <div class=\"modal-content\" style=\"text-align: left; max-width: 600px;\">\r\n                    <h3>Share Job Posting</h3>\r\n                    \r\n                    <div class=\"form-group\">\r\n                        <label for=\"share-link\">Direct Link</label>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <input type=\"text\" id=\"share-link\" value=\"${applyUrl}\" readonly style=\"background-color: rgba(0,0,0,0.3);\">\r\n                            <button id=\"copy-share-link\" class=\"btn btn-secondary\">Copy</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"embed-code\">Embed Code</label>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <textarea id=\"embed-code\" readonly style=\"height: 100px; background-color: rgba(0,0,0,0.3);\">${embedCode}</textarea>\r\n                            <button id=\"copy-embed-code\" class=\"btn btn-secondary\">Copy</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"modal-actions\" style=\"justify-content: flex-end; margin-top: 20px;\">\r\n                        <button id=\"close-share-modal\" class=\"btn btn-primary\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\r\n\r\n        const copyToClipboard = (textToCopy, message) => {\r\n            const textArea = document.createElement(\"textarea\");\r\n            textArea.value = textToCopy;\r\n            document.body.appendChild(textArea);\r\n            textArea.focus();\r\n            textArea.select();\r\n            try {\r\n                document.execCommand('copy');\r\n                showModalMessage(message, false);\r\n            } catch (err) {\r\n                showModalMessage('Failed to copy.', true);\r\n            }\r\n            document.body.removeChild(textArea);\r\n        };\r\n\r\n        document.getElementById('copy-share-link').addEventListener('click', () => {\r\n            copyToClipboard(applyUrl, 'Direct link copied!');\r\n        });\r\n\r\n        document.getElementById('copy-embed-code').addEventListener('click', () => {\r\n            copyToClipboard(embedCode, 'Embed code copied!');\r\n        });\r\n\r\n        const closeModal = () => {\r\n            const modal = document.getElementById('share-job-modal');\r\n            if (modal) {\r\n                modal.remove();\r\n            }\r\n        };\r\n\r\n        document.getElementById('close-share-modal').addEventListener('click', closeModal);\r\n        document.getElementById('share-job-modal').addEventListener('click', (e) => {\r\n            if (e.target.id === 'share-job-modal') {\r\n                closeModal();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // --- Attach Event Listeners ---\r\n    if (newJobPostingForm) {\r\n        newJobPostingForm.addEventListener('submit', createJobPosting);\r\n    }\r\n    \r\n    if(jobPostingsListDiv) {\r\n        jobPostingsListDiv.addEventListener('click', (e) => {\r\n            const deleteButton = e.target.closest('.btn-delete-job-posting');\r\n            const shareButton = e.target.closest('.btn-share');\r\n\r\n            if (deleteButton) {\r\n                deleteJobPosting(deleteButton.dataset.id);\r\n            } else if (shareButton) {\r\n                openShareModal(shareButton.dataset.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    if(applicantsListDiv) {\r\n        applicantsListDiv.addEventListener('click', (e) => {\r\n            const deleteButton = e.target.closest('.btn-delete-applicant');\r\n            if(deleteButton) {\r\n                deleteApplicant(deleteButton.dataset.id);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // --- Initial Page Load Actions ---\r\n    loadLocationsForJobPostingForm(); \r\n    loadCurrentJobPostings(); \r\n    loadRecentApplicants(); \r\n}\r\n", "// js/pages/scheduling.js - MASTER SOLUTION: Final Version with Timezone and Print Fix\r\n\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the NEW \"Classic Week\" scheduling page.\r\n */\r\nexport function handleSchedulingPage() {\r\n    // --- Security & Role Check ---\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem('userRole');\r\n    if (!authToken) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    // --- DOM Element References ---\r\n    const currentWeekDisplay = document.getElementById('current-week-display');\r\n    const prevWeekBtn = document.getElementById('prev-week-btn');\r\n    const nextWeekBtn = document.getElementById('next-week-btn');\r\n    const printScheduleBtn = document.getElementById('print-schedule-btn'); // New button\r\n    const calendarGridWrapper = document.getElementById('calendar-grid-wrapper');\r\n    const employeeSelect = document.getElementById('employee-select');\r\n    const locationSelect = document.getElementById('location-select');\r\n    const createShiftForm = document.getElementById('create-shift-form');\r\n    const locationSelectorContainer = document.getElementById('location-selector-container');\r\n    const locationSelector = document.getElementById('location-selector');\r\n    const deleteShiftsForm = document.getElementById('delete-shifts-form');\r\n    \r\n    const startDateInput = document.getElementById('start-date-input');\r\n    const startTimeSelect = document.getElementById('start-time-select');\r\n    const endDateInput = document.getElementById('end-date-input');\r\n    const endTimeSelect = document.getElementById('end-time-select');\r\n\r\n\r\n    // --- State Management ---\r\n    let currentStartDate = new Date();\r\n    currentStartDate.setDate(currentStartDate.getDate() - currentStartDate.getDay());\r\n    currentStartDate.setHours(0, 0, 0, 0);\r\n    let currentLocationId = null; \r\n    let allLocations = []; // Store all locations to get names easily\r\n\r\n    // --- Constants ---\r\n    const PIXELS_PER_HOUR = 60;\r\n    const START_HOUR = 0;\r\n    const END_HOUR = 24;\r\n\r\n    const SUPER_ADMIN_PREF_LOCATION_KEY = 'superAdminPrefLocationId';\r\n\r\n    /**\r\n     * TIMEZONE FIX: Parses a date string as if it were local, ignoring timezone conversions.\r\n     */\r\n    const parseAsLocalDate = (dateTimeString) => {\r\n        const [datePart, timePart] = dateTimeString.split('T');\r\n        const [year, month, day] = datePart.split('-').map(Number);\r\n        const [hour, minute] = timePart.split(':').map(Number);\r\n        return new Date(year, month - 1, day, hour, minute);\r\n    };\r\n\r\n\r\n    /**\r\n     * Main function to initialize and render the calendar for a specific location and week.\r\n     */\r\n    const loadAndRenderWeeklySchedule = async (locationId) => {\r\n        if (!locationId) {\r\n            currentWeekDisplay.textContent = 'Select a location';\r\n            calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please select a location to view the schedule.</p>';\r\n            return;\r\n        }\r\n        \r\n        currentLocationId = locationId;\r\n        currentWeekDisplay.textContent = 'Loading...';\r\n        calendarGridWrapper.innerHTML = '';\r\n\r\n        try {\r\n            const [users, shifts, fetchedLocations] = await Promise.all([\r\n                apiRequest('GET', `/api/users?location_id=${currentLocationId}`),\r\n                apiRequest('GET', `/api/shifts?startDate=${getApiDate(currentStartDate)}&endDate=${getApiDate(getEndDate(currentStartDate))}&location_id=${currentLocationId}`),\r\n                apiRequest('GET', '/api/locations')\r\n            ]);\r\n            \r\n            allLocations = fetchedLocations; // Store locations for later use\r\n\r\n            populateSidebarDropdowns(users, allLocations);\r\n            renderCalendarGrid();\r\n            renderShifts(shifts);\r\n\r\n        } catch (error) {\r\n            showModalMessage(`Error loading schedule: ${error.message}`, true);\r\n            console.error(\"Error loading schedule data:\", error);\r\n            currentWeekDisplay.textContent = 'Error';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Populates the Employee and Location dropdowns in the sidebar.\r\n     */\r\n    const populateSidebarDropdowns = (users, locations) => {\r\n        employeeSelect.innerHTML = '<option value=\"\">Select Employee</option>';\r\n        if (users) {\r\n            users.filter(u => u.role === 'employee' || u.role === 'location_admin').forEach(user => {\r\n                employeeSelect.add(new Option(user.full_name, user.user_id));\r\n            });\r\n        }\r\n\r\n        if (locationSelectorContainer && locationSelectorContainer.style.display !== 'none' && locationSelector) {\r\n            locationSelector.innerHTML = '<option value=\"\">Select a Location</option>';\r\n            if (locations) {\r\n                locations.forEach(loc => {\r\n                    locationSelector.add(new Option(loc.location_name, loc.location_id));\r\n                });\r\n            }\r\n            if (currentLocationId) {\r\n                locationSelector.value = currentLocationId;\r\n            }\r\n        }\r\n\r\n        locationSelect.innerHTML = '<option value=\"\">Select Location</option>';\r\n        if (locations) {\r\n            locations.forEach(loc => {\r\n                locationSelect.add(new Option(loc.location_name, loc.location_id));\r\n            });\r\n        }\r\n        if (currentLocationId) {\r\n            locationSelect.value = currentLocationId;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates and populates the time dropdowns with 15-minute increments.\r\n     */\r\n    const populateTimeSelects = () => {\r\n        let optionsHtml = '<option value=\"\">Select Time</option>';\r\n        for (let hour = 0; hour < 24; hour++) {\r\n            for (let minute = 0; minute < 60; minute += 15) {\r\n                const timeValue = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n                const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n                const ampm = hour < 12 ? 'AM' : 'PM';\r\n                const displayText = `${displayHour}:${String(minute).padStart(2, '0')} ${ampm}`;\r\n                optionsHtml += `<option value=\"${timeValue}\">${displayText}</option>`;\r\n            }\r\n        }\r\n        startTimeSelect.innerHTML = optionsHtml;\r\n        endTimeSelect.innerHTML = optionsHtml;\r\n    };\r\n\r\n    /**\r\n     * Renders the main calendar grid structure (headers, time slots, day columns).\r\n     */\r\n    const renderCalendarGrid = () => {\r\n        const weekDates = getWeekDates(currentStartDate);\r\n        const dateRangeString = `${weekDates[0].toLocaleDateString(undefined, {month: 'short', day: 'numeric'})} - ${weekDates[6].toLocaleDateString(undefined, {month: 'short', day: 'numeric'})}`;\r\n        currentWeekDisplay.textContent = dateRangeString;\r\n\r\n        const grid = document.createElement('div');\r\n        grid.className = 'calendar-grid';\r\n\r\n        grid.innerHTML += `<div class=\"grid-header time-slot-header\"></div>`;\r\n        weekDates.forEach(date => {\r\n            grid.innerHTML += `<div class=\"grid-header\">${date.toLocaleDateString(undefined, {weekday: 'short', day: 'numeric'})}</div>`;\r\n        });\r\n\r\n        for (let hour = START_HOUR; hour < END_HOUR; hour++) {\r\n            const displayHour = hour % 12 === 0 ? 12 : hour % 12;\r\n            const ampm = hour < 12 ? 'AM' : 'PM';\r\n            grid.innerHTML += `<div class=\"time-slot\">${displayHour} ${ampm}</div>`;\r\n        }\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            const dayCol = document.createElement('div');\r\n            dayCol.className = 'day-column';\r\n            dayCol.style.gridColumn = `${i + 2}`;\r\n            dayCol.style.gridRow = `2 / span ${END_HOUR - START_HOUR}`;\r\n            dayCol.dataset.dayIndex = i;\r\n            grid.appendChild(dayCol);\r\n        }\r\n\r\n        calendarGridWrapper.innerHTML = '';\r\n        calendarGridWrapper.appendChild(grid);\r\n    };\r\n\r\n    /**\r\n     * Renders the shift blocks onto the calendar grid.\r\n     */\r\n    const renderShifts = (shifts) => {\r\n        if (!shifts || shifts.length === 0) return;\r\n\r\n        shifts.forEach(shift => {\r\n            const shiftStart = parseAsLocalDate(shift.start_time);\r\n            const shiftEnd = parseAsLocalDate(shift.end_time);\r\n\r\n            if (isNaN(shiftStart.getTime()) || isNaN(shiftEnd.getTime())) return;\r\n\r\n            const startDayIndex = shiftStart.getDay();\r\n            const endDayIndex = shiftEnd.getDay();\r\n            \r\n            if (startDayIndex === endDayIndex) {\r\n                createShiftBlock(shift, shiftStart, shiftEnd, startDayIndex);\r\n            } else {\r\n                const midnight = new Date(shiftStart);\r\n                midnight.setHours(24, 0, 0, 0); \r\n                \r\n                createShiftBlock(shift, shiftStart, midnight, startDayIndex);\r\n                \r\n                if (endDayIndex > startDayIndex || (startDayIndex === 6 && endDayIndex === 0)) {\r\n                    createShiftBlock(shift, midnight, shiftEnd, endDayIndex);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates and appends a single shift block to the calendar.\r\n     */\r\n    const createShiftBlock = (shift, startTime, endTime, dayIndex) => {\r\n        const targetColumn = document.querySelector(`.day-column[data-day-index=\"${dayIndex}\"]`);\r\n        if (!targetColumn) return;\r\n\r\n        const startMinutes = startTime.getHours() * 60 + startTime.getMinutes();\r\n        const endMinutes = (endTime.getHours() * 60 + endTime.getMinutes()) || (24 * 60);\r\n\r\n        const top = (startMinutes / 60) * PIXELS_PER_HOUR;\r\n        const height = ((endMinutes - startMinutes) / 60) * PIXELS_PER_HOUR;\r\n\r\n        if (height <= 0) return;\r\n\r\n        const formattedStartTime = startTime.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n        const formattedEndTime = endTime.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n\r\n        const shiftBlock = document.createElement('div');\r\n        shiftBlock.className = 'shift-block';\r\n        shiftBlock.style.top = `${top}px`;\r\n        shiftBlock.style.height = `${height}px`;\r\n        shiftBlock.innerHTML = `\r\n            <strong>${shift.employee_name}</strong>\r\n            <small class=\"shift-time\">${formattedStartTime} - ${formattedEndTime}</small>\r\n            <button class=\"delete-shift-btn\" data-shift-id=\"${shift.id}\">&times;</button>\r\n        `;\r\n        shiftBlock.title = `Shift for ${shift.employee_name} at ${shift.location_name}. Notes: ${shift.notes || 'None'}`;\r\n        \r\n        targetColumn.appendChild(shiftBlock);\r\n    };\r\n\r\n    // --- Helper Functions for Dates ---\r\n    const getWeekDates = (startDate) => Array.from({ length: 7 }).map((_, i) => {\r\n        const date = new Date(startDate);\r\n        date.setDate(date.getDate() + i);\r\n        return date;\r\n    });\r\n\r\n    const getEndDate = (startDate) => {\r\n        const endDate = new Date(startDate);\r\n        endDate.setDate(endDate.getDate() + 7);\r\n        return endDate;\r\n    };\r\n    \r\n    const getApiDate = (d) => d.toISOString().split('T')[0];\r\n\r\n    // --- Event Handlers ---\r\n    const handleWeekChange = (days) => {\r\n        currentStartDate.setDate(currentStartDate.getDate() + days);\r\n        if (currentLocationId) {\r\n            loadAndRenderWeeklySchedule(currentLocationId);\r\n        } else {\r\n            showModalMessage('Please select a location first.', true);\r\n        }\r\n    };\r\n\r\n    prevWeekBtn.addEventListener('click', () => handleWeekChange(-7));\r\n    nextWeekBtn.addEventListener('click', () => handleWeekChange(7));\r\n\r\n    if (printScheduleBtn) {\r\n        printScheduleBtn.addEventListener('click', () => {\r\n            if (!currentLocationId) {\r\n                showModalMessage('Please select a location to print a schedule.', true);\r\n                return;\r\n            }\r\n            const locationName = allLocations.find(loc => String(loc.location_id) === String(currentLocationId))?.location_name || 'Selected Location';\r\n            const url = `printable-schedule.html?startDate=${getApiDate(currentStartDate)}&endDate=${getApiDate(getEndDate(currentStartDate))}&locationId=${currentLocationId}&locationName=${encodeURIComponent(locationName)}`;\r\n            window.open(url, '_blank');\r\n        });\r\n    }\r\n\r\n    createShiftForm.addEventListener('submit', async (e) => {\r\n        e.preventDefault();\r\n        \r\n        const startDate = startDateInput.value;\r\n        const startTime = startTimeSelect.value;\r\n        const endDate = endDateInput.value;\r\n        const endTime = endTimeSelect.value;\r\n\r\n        if (!startDate || !startTime || !endDate || !endTime) {\r\n            return showModalMessage('Please provide all date and time fields for the shift.', true);\r\n        }\r\n\r\n        const shiftStartDateTimeString = `${startDate}T${startTime}:00`; \r\n        const shiftEndDateTimeString = `${endDate}T${endTime}:00`; \r\n        \r\n        if (new Date(shiftStartDateTimeString).getTime() >= new Date(shiftEndDateTimeString).getTime()) {\r\n             showModalMessage('Shift end time must be after start time.', true);\r\n             return;\r\n        }\r\n\r\n        const shiftData = {\r\n            employee_id: employeeSelect.value,\r\n            location_id: locationSelect.value,\r\n            start_time: shiftStartDateTimeString,\r\n            end_time: shiftEndDateTimeString,\r\n            notes: document.getElementById('notes-input').value\r\n        };\r\n\r\n        if (!shiftData.employee_id || !shiftData.location_id) {\r\n            return showModalMessage('Please select an employee and location for the shift.', true);\r\n        }\r\n        \r\n        try {\r\n            await apiRequest('POST', '/api/shifts', shiftData);\r\n            showModalMessage('Shift created successfully!', false);\r\n            createShiftForm.reset();\r\n            loadAndRenderWeeklySchedule(currentLocationId); \r\n        } catch (error) {\r\n            showModalMessage(`Error creating shift: ${error.message}`, true);\r\n        }\r\n    });\r\n    \r\n    if (locationSelector) {\r\n        locationSelector.addEventListener('change', () => {\r\n            const newLocationId = locationSelector.value;\r\n            if (newLocationId) {\r\n                localStorage.setItem(SUPER_ADMIN_PREF_LOCATION_KEY, newLocationId);\r\n                currentLocationId = newLocationId;\r\n                loadAndRenderWeeklySchedule(newLocationId);\r\n            } else {\r\n                 localStorage.removeItem(SUPER_ADMIN_PREF_LOCATION_KEY);\r\n                 currentLocationId = null;\r\n                 currentWeekDisplay.textContent = 'Select a location';\r\n                 calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please select a location to view the schedule.</p>';\r\n            }\r\n        });\r\n    }\r\n\r\n    calendarGridWrapper.addEventListener('click', async (e) => {\r\n        if (e.target.classList.contains('delete-shift-btn')) {\r\n            const shiftId = e.target.dataset.shiftId;\r\n            const confirmed = await showConfirmModal('Are you sure you want to delete this shift?');\r\n            if (confirmed) {\r\n                try {\r\n                    await apiRequest('DELETE', `/api/shifts/${shiftId}`);\r\n                    showModalMessage('Shift deleted successfully!', false);\r\n                    loadAndRenderWeeklySchedule(currentLocationId);\r\n                } catch (error) {\r\n                    showModalMessage(`Error deleting shift: ${error.message}`, true);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (deleteShiftsForm) {\r\n        deleteShiftsForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const beforeDate = document.getElementById('delete-before-date').value;\r\n            if (!beforeDate) {\r\n                showModalMessage('Please select a date.', true);\r\n                return;\r\n            }\r\n            const confirmed = await showConfirmModal(`Are you sure you want to delete all shifts before ${beforeDate}? This action cannot be undone.`);\r\n            if (confirmed) {\r\n                try {\r\n                    const result = await apiRequest('DELETE', `/api/shifts?beforeDate=${beforeDate}`);\r\n                    showModalMessage(result.message || 'Old shifts deleted.', false);\r\n                    loadAndRenderWeeklySchedule(currentLocationId); // Refresh the view\r\n                } catch (error) {\r\n                    showModalMessage(`Error deleting old shifts: ${error.message}`, true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Initial Page Load ---\r\n    const initializePage = async () => {\r\n        populateTimeSelects();\r\n\r\n        try {\r\n            const locations = await apiRequest('GET', '/api/locations');\r\n            allLocations = locations;\r\n            \r\n            if (userRole === 'super_admin') {\r\n                if(locationSelectorContainer) locationSelectorContainer.style.display = 'block';\r\n                if (locationSelector) {\r\n                    locationSelector.innerHTML = '<option value=\"\">Select a Location</option>';\r\n                    if (locations && locations.length > 0) {\r\n                        locations.forEach(loc => {\r\n                            locationSelector.add(new Option(loc.location_name, loc.location_id));\r\n                        });\r\n\r\n                        const savedLocationId = localStorage.getItem(SUPER_ADMIN_PREF_LOCATION_KEY);\r\n                        let initialLocationId = null;\r\n\r\n                        if (savedLocationId && locations.some(loc => String(loc.location_id) === savedLocationId)) {\r\n                            initialLocationId = savedLocationId;\r\n                        } else {\r\n                            initialLocationId = locations[0].location_id; \r\n                        }\r\n                        \r\n                        locationSelector.value = initialLocationId;\r\n                        currentLocationId = initialLocationId;\r\n                        loadAndRenderWeeklySchedule(initialLocationId);\r\n\r\n                    } else {\r\n                        currentWeekDisplay.textContent = 'No Locations';\r\n                        calendarGridWrapper.innerHTML = '<p style=\"text-align:center; padding: 20px; color: var(--text-medium);\">Please create a location in Admin Settings.</p>';\r\n                    }\r\n                }\r\n            } else {\r\n                if(locationSelectorContainer) locationSelectorContainer.style.display = 'none';\r\n                const user = await apiRequest('GET', '/api/users/me');\r\n                if (user && user.location_id) {\r\n                    currentLocationId = user.location_id;\r\n                    loadAndRenderWeeklySchedule(user.location_id);\r\n                } else {\r\n                    showModalMessage('Your account is not assigned to a location. Please contact your administrator.', true);\r\n                    currentWeekDisplay.textContent = 'No Location Assigned';\r\n                }\r\n            }\r\n        } catch (error) {\r\n             showModalMessage(`Failed to initialize scheduling page: ${error.message}`, true);\r\n             console.error('Failed to initialize scheduling page:', error);\r\n        }\r\n    };\r\n\r\n    initializePage();\r\n}\r\n", "// js/pages/apply.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the job application page.\r\n */\r\nexport function handleApplyPage() {\r\n    const jobDetailsContainer = document.getElementById('job-details-container');\r\n    const applyForm = document.getElementById('apply-form');\r\n    const applyCard = document.getElementById('apply-card');\r\n\r\n    // Debugging logs to confirm elements are found\r\n    console.log(\"[apply.js] Elements found:\", { jobDetailsContainer, applyForm, applyCard });\r\n    \r\n    // Get the jobId from the URL query parameters\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const jobId = urlParams.get('jobId');\r\n\r\n    // If no jobId is provided in the URL, display an error and exit\r\n    if (!jobId) {\r\n        if (jobDetailsContainer) {\r\n            jobDetailsContainer.innerHTML = '<h2>Job Not Found</h2><p>No job ID was provided in the URL.</p>';\r\n        } else if (applyCard) { // Fallback if jobDetailsContainer is not found\r\n            applyCard.innerHTML = '<h2>Job Not Found</h2><p>No job ID was provided in the URL.</p>';\r\n        }\r\n        console.error(\"[apply.js] No jobId found in URL.\");\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Loads job details from the API based on the jobId and displays them.\r\n     */\r\n    async function loadJobDetails() {\r\n        if (!jobDetailsContainer) {\r\n            console.error(\"[apply.js] jobDetailsContainer not found. Cannot load job details.\");\r\n            // If jobDetailsContainer is missing, display error in applyCard or as modal\r\n            if (applyCard) {\r\n                applyCard.innerHTML = '<h2>Error</h2><p>Page structure missing. Please contact support.</p>';\r\n            } else {\r\n                showModalMessage('Page structure missing. Please contact support.', true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        jobDetailsContainer.innerHTML = '<p style=\"color: var(--text-medium);\">Loading job details...</p>'; // Show loading state\r\n        try {\r\n            // Fetch job posting details from the public endpoint\r\n            const job = await apiRequest('GET', `/job-postings/${jobId}`);\r\n            \r\n            if (job) {\r\n                document.title = `Apply for ${job.title} - Flow Business Suite`; // Update page title\r\n                \r\n                // Construct job details HTML\r\n                const detailsHtml = `\r\n                    <h2>${job.title}</h2>\r\n                    <p><strong>Location:</strong> ${job.location_name || 'Company Wide'}</p>\r\n                    <p><strong>Description:</strong><br>${job.description ? job.description.replace(/\\n/g, '<br>') : 'N/A'}</p>\r\n                    ${job.requirements ? `<p><strong>Requirements:</strong><br>${job.requirements.replace(/\\n/g, '<br>')}</p>` : ''}\r\n                `;\r\n                jobDetailsContainer.innerHTML = detailsHtml; // Display job details\r\n\r\n                // After successfully loading job details, show the application form\r\n                if (applyForm) {\r\n                    applyForm.style.display = 'block'; // Make the form visible\r\n                    console.log(\"[apply.js] Application form set to display: block.\");\r\n                } else {\r\n                    console.warn(\"[apply.js] applyForm element not found, cannot make it visible.\");\r\n                }\r\n            } else {\r\n                 jobDetailsContainer.innerHTML = '<h2>Job Not Found</h2><p>The job you are looking for does not exist.</p>';\r\n                 console.warn(\"[apply.js] Job not found for ID:\", jobId);\r\n                 // If job not found, ensure form remains hidden\r\n                 if (applyForm) {\r\n                     applyForm.style.display = 'none';\r\n                 }\r\n            }\r\n        } catch (error) {\r\n            jobDetailsContainer.innerHTML = `<h2>Error</h2><p>Could not load job details. ${error.message}</p>`;\r\n            console.error('Error loading job details:', error);\r\n            // On error, ensure form remains hidden\r\n            if (applyForm) {\r\n                applyForm.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    // Event listener for the application form submission\r\n    // This listener is now attached only if applyForm is found at script initialization\r\n    if (applyForm) {\r\n        applyForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault(); // Prevent default form submission\r\n            \r\n            // Collect all application data from the form fields\r\n            const applicationData = {\r\n                name: document.getElementById('applicant-name').value.trim(),\r\n                email: document.getElementById('applicant-email').value.trim(),\r\n                address: document.getElementById('applicant-address').value.trim(),\r\n                phone: document.getElementById('applicant-phone').value.trim(),\r\n                date_of_birth: document.getElementById('applicant-dob').value,\r\n                availability: document.getElementById('applicant-availability').value,\r\n                is_authorized: document.getElementById('applicant-authorized').value === 'Yes', // Convert to boolean\r\n            };\r\n\r\n            // Basic validation\r\n            if (!applicationData.name || !applicationData.email || !applicationData.availability) {\r\n                showModalMessage('Please fill in your Full Name, Email Address, and Availability.', true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Send application data to the public API endpoint\r\n                await apiRequest('POST', `/apply/${jobId}`, applicationData);\r\n                \r\n                // On successful submission, replace the form with a success message\r\n                if(applyCard) {\r\n                    applyCard.innerHTML = `\r\n                        <div style=\"text-align: center; padding: 40px;\">\r\n                            <h2 style=\"color: var(--primary-accent);\">Application Submitted!</h2>\r\n                            <p style=\"color: var(--text-light);\">Thank you for your interest. We have received your application and will be in touch if you are selected for an interview.</p>\r\n                            <p style=\"margin-top: 20px; font-weight: 600; color: var(--text-medium);\">You may now safely close this browser tab.</p>\r\n                        </div>\r\n                    `;\r\n                }\r\n            } catch (error) {\r\n                showModalMessage(`Error submitting application: ${error.message}`, true);\r\n                console.error('Error submitting application:', error);\r\n            }\r\n        });\r\n    } else {\r\n        console.error(\"[apply.js] Application form element (id='apply-form') not found. Submission listener not attached.\");\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    loadJobDetails(); // Load job details when the page loads\r\n}\r\n", "// js/pages/onboardingView.js\r\nimport { apiRequest, showModalMessage, showConfirmModal } from '../utils.js';\r\n\r\n/**\r\n * Handles the logic for the employee's onboarding view page (new-hire-view.html).\r\n */\r\nexport function handleOnboardingViewPage() { // Ensure this is exported\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    if (!authToken) {\r\n        window.location.href = \"login.html\";\r\n        return;\r\n    }\r\n\r\n    const welcomeMessage = document.getElementById('welcome-message');\r\n    const messagesContainer = document.getElementById('messages-container');\r\n    const onboardingInfoContainer = document.getElementById('onboarding-info-container');\r\n    const onboardingTaskListDiv = document.getElementById('onboarding-task-list');\r\n    const taskListOverviewDiv = document.getElementById('task-list-overview');\r\n    const employeeScheduleListDiv = document.getElementById('employee-schedule-list');\r\n    const printScheduleBtn = document.getElementById('print-employee-schedule-btn');\r\n\r\n    let currentUserId = null;\r\n\r\n    function getUserIdFromToken(token) {\r\n        try {\r\n            const base64Url = token.split('.')[1];\r\n            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n            }).join(''));\r\n            const payload = JSON.parse(jsonPayload);\r\n            return payload.id;\r\n        } catch (e) {\r\n            console.error(\"Error decoding token:\", e);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function loadWelcomeMessage() {\r\n        if (!welcomeMessage) return;\r\n        try {\r\n            const user = await apiRequest('GET', '/api/users/me');\r\n            const userName = user && user.full_name ? user.full_name.split(' ')[0] : 'Employee';\r\n            welcomeMessage.textContent = `Welcome, ${userName}!`;\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch user for welcome message:\", error);\r\n            welcomeMessage.textContent = 'Welcome!';\r\n        }\r\n    }\r\n\r\n    async function loadMessages() {\r\n        if (!messagesContainer) return;\r\n        try {\r\n            const messages = await apiRequest('GET', '/api/messages');\r\n            messagesContainer.innerHTML = '';\r\n            if (messages && messages.length > 0) {\r\n                const messagesHeader = document.createElement('h3');\r\n                messagesHeader.textContent = \"Messages for You\";\r\n                messagesContainer.appendChild(messagesHeader);\r\n\r\n                messages.forEach(msg => {\r\n                    const msgItem = document.createElement('div');\r\n                    msgItem.className = 'message-item';\r\n                    \r\n                    msgItem.innerHTML = `\r\n                        <p>${msg.content}</p> \r\n                        <div class=\"message-actions\">\r\n                            ${!msg.is_read ? '<span class=\"new-message-indicator\">New</span>' : ''}\r\n                            <button class=\"btn btn-danger btn-sm delete-message-btn\" data-message-id=\"${msg.message_id}\">Delete</button>\r\n                        </div>\r\n                    `;\r\n                    messagesContainer.appendChild(msgItem);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to load messages:\", error);\r\n        }\r\n    }\r\n\r\n    messagesContainer.addEventListener('click', async (e) => {\r\n        if (e.target.classList.contains('delete-message-btn')) {\r\n            const messageId = e.target.dataset.messageId;\r\n            \r\n            const confirmed = await showConfirmModal(\"Are you sure you want to permanently delete this message?\");\r\n\r\n            if (confirmed) {\r\n                try {\r\n                    await apiRequest('DELETE', `/api/messages/${messageId}`);\r\n                    e.target.closest('.message-item').remove();\r\n                } catch (error) {\r\n                    showModalMessage(`Could not delete message: ${error.message}`, true);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    async function loadOnboardingTasks() {\r\n        if (!onboardingTaskListDiv) return;\r\n        onboardingTaskListDiv.innerHTML = '<p>Loading your onboarding tasks...</p>';\r\n        \r\n        try {\r\n            const tasks = await apiRequest('GET', `/api/onboarding-tasks?user_id=${currentUserId}`);\r\n            renderOnboardingTasks(tasks);\r\n        } catch (error) {\r\n            onboardingTaskListDiv.innerHTML = '<p style=\"color: #e74c3c;\">Error loading tasks.</p>';\r\n        }\r\n    }\r\n\r\n    function renderOnboardingTasks(tasks) {\r\n        if (!onboardingTaskListDiv) return;\r\n        onboardingTaskListDiv.innerHTML = '';\r\n\r\n        if (tasks && tasks.length > 0) {\r\n            onboardingInfoContainer.style.display = 'block';\r\n            tasks.forEach(task => {\r\n                const taskItem = document.createElement('div');\r\n                taskItem.className = `checklist-item ${task.completed ? 'completed' : ''}`;\r\n                taskItem.dataset.taskId = task.id;\r\n\r\n                taskItem.innerHTML = `\r\n                    <div class=\"checklist-item-title\">\r\n                        <input type=\"checkbox\" class=\"task-checkbox\" ${task.completed ? 'checked' : ''}>\r\n                        <span>${task.description}</span>\r\n                        ${task.document_name ? `<br><small>Attached: <a href=\"${task.document_name}\" target=\"_blank\">${task.document_name.split('/').pop()}</a></small>` : ''}\r\n                    </div>\r\n                `;\r\n                onboardingTaskListDiv.appendChild(taskItem);\r\n            });\r\n        } else {\r\n            if (onboardingInfoContainer) onboardingInfoContainer.style.display = 'none';\r\n        }\r\n    }\r\n    \r\n    async function loadEmployeeSchedule() {\r\n        if (!employeeScheduleListDiv) return;\r\n        employeeScheduleListDiv.innerHTML = '<p>Loading your schedule...</p>';\r\n\r\n        const today = new Date();\r\n        const startDate = new Date(today.setDate(today.getDate() - today.getDay())).toISOString().split('T')[0];\r\n        const endDate = new Date(today.setDate(today.getDate() + 7)).toISOString().split('T')[0];\r\n\r\n        try {\r\n            const shifts = await apiRequest('GET', `/api/shifts?user_id=${currentUserId}&startDate=${startDate}&endDate=${endDate}`);\r\n            employeeScheduleListDiv.innerHTML = '';\r\n            if (shifts && shifts.length > 0) {\r\n                shifts.forEach(shift => {\r\n                    const shiftItem = document.createElement('div');\r\n                    shiftItem.className = 'schedule-list-item';\r\n                    const shiftDate = new Date(shift.start_time);\r\n                    const startTime = shiftDate.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n                    const endTime = new Date(shift.end_time).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n                    shiftItem.innerHTML = `\r\n                        <strong>${shiftDate.toLocaleDateString(undefined, { weekday: 'long', month: 'short', day: 'numeric' })}</strong>\r\n                        <p>${startTime} - ${endTime} at ${shift.location_name}</p>\r\n                    `;\r\n                    employeeScheduleListDiv.appendChild(shiftItem);\r\n                });\r\n            } else {\r\n                employeeScheduleListDiv.innerHTML = '<p>You have no shifts scheduled for this week.</p>';\r\n            }\r\n        } catch (error) {\r\n            employeeScheduleListDiv.innerHTML = '<p style=\"color: #e74c3c;\">Could not load schedule.</p>';\r\n        }\r\n    }\r\n\r\n    // --- Initial Page Load Actions ---\r\n    currentUserId = getUserIdFromToken(authToken);\r\n    if (!currentUserId) {\r\n        showModalMessage('Could not verify user. Please log in again.', true);\r\n        window.location.href = 'login.html';\r\n        return;\r\n    }\r\n\r\n    loadWelcomeMessage();\r\n    loadMessages();\r\n    loadOnboardingTasks();\r\n    loadEmployeeSchedule();\r\n}\r\n", "// js/pages/suiteHub.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\n/**\r\n * Handles all logic for the Suite Hub page.\r\n */\r\nexport async function handleSuiteHubPage() {\r\n    const greetingContainer = document.getElementById('greeting-container');\r\n    const sendMessageForm = document.getElementById('send-message-form');\r\n    const messageEmployeeSelect = document.getElementById('message-employee-select');\r\n    const messageContent = document.getElementById('message-content');\r\n    const sendMessageStatus = document.getElementById('send-message-status');\r\n\r\n    // Fetch user info for greeting and role check\r\n    const fetchUserInfo = async () => {\r\n        try {\r\n            const user = await apiRequest('GET', '/api/users/me');\r\n            if (greetingContainer) {\r\n                greetingContainer.innerHTML = `<h2 style=\"color: var(--primary-accent);\">Welcome, ${user.full_name}!</h2>`;\r\n            }\r\n\r\n            // Only populate employee list for admins\r\n            if (user.role === 'super_admin' || user.role === 'location_admin') {\r\n                await populateEmployeeSelect(user.location_id);\r\n            } else {\r\n                // Hide the message form for regular employees, or show a message\r\n                if (sendMessageForm) {\r\n                    sendMessageForm.style.display = 'none';\r\n                    const messageContainer = sendMessageForm.parentElement;\r\n                    messageContainer.innerHTML = '<h3>Messaging</h3><p style=\"color: var(--text-medium);\">Messaging is available for admin users.</p>';\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching user info for Suite Hub:', error);\r\n            showModalMessage('Failed to load user information.', true);\r\n        }\r\n    };\r\n\r\n    // Populate employee dropdown\r\n    const populateEmployeeSelect = async (adminLocationId) => {\r\n        try {\r\n            const users = await apiRequest('GET', '/api/users');\r\n            messageEmployeeSelect.innerHTML = '<option value=\"\">Select an employee</option>'; // Clear existing options\r\n\r\n            // Filter users based on admin's location if location_admin\r\n            const filteredUsers = users.filter(user => \r\n                user.role === 'employee' || \r\n                (user.role === 'location_admin' && String(user.user_id) !== String(localStorage.getItem('userId')))\r\n            ).filter(user => {\r\n                if (localStorage.getItem('userRole') === 'location_admin') {\r\n                    return String(user.location_id) === String(adminLocationId);\r\n                }\r\n                return true; // Super admin sees all\r\n            });\r\n\r\n\r\n            filteredUsers.forEach(user => {\r\n                const option = document.createElement('option');\r\n                option.value = user.user_id;\r\n                option.textContent = `${user.full_name} (${user.role === 'employee' ? user.position || 'Employee' : 'Admin'})`;\r\n                messageEmployeeSelect.appendChild(option);\r\n            });\r\n        } catch (error) {\r\n            console.error('Error populating employee select:', error);\r\n            showModalMessage('Failed to load employee list.', true);\r\n        }\r\n    };\r\n\r\n    // Handle message form submission\r\n    if (sendMessageForm) {\r\n        sendMessageForm.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n            sendMessageStatus.textContent = 'Sending message...';\r\n            sendMessageStatus.style.color = 'var(--text-medium)';\r\n\r\n            const recipientId = messageEmployeeSelect.value;\r\n            const content = messageContent.value.trim();\r\n\r\n            if (!recipientId) {\r\n                sendMessageStatus.textContent = 'Please select a recipient.';\r\n                sendMessageStatus.style.color = '#ff8a80';\r\n                return;\r\n            }\r\n            if (!content) {\r\n                sendMessageStatus.textContent = 'Message content cannot be empty.';\r\n                sendMessageStatus.style.color = '#ff8a80';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await apiRequest('POST', '/api/messages', { recipient_id: recipientId, content });\r\n                sendMessageStatus.textContent = 'Message sent successfully!';\r\n                sendMessageStatus.style.color = 'var(--primary-accent)';\r\n                messageContent.value = ''; // Clear message input\r\n                messageEmployeeSelect.value = ''; // Reset select\r\n\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n                sendMessageStatus.textContent = `Error sending message: ${error.message}`;\r\n                sendMessageStatus.style.color = '#ff8a80';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initial data fetch\r\n    fetchUserInfo();\r\n}\r\n", "// js/pages/pricing.js\r\nimport { apiRequest, showModalMessage } from '../utils.js';\r\n\r\nexport function handlePricingPage() {\r\n    // IMPORTANT: Replace with your actual publishable key from Stripe Dashboard\r\n    const stripePublicKey = 'pk_live_51Ra4RJG06NHrwsY9lqejmXiGn8DAGzwlrqTuarPZzIb3p1yIPchUaPGAXuKe7yJD73UCvQ3ydKzoclwRi0DiIrbP00xbXj54td'; \r\n    const stripe = Stripe(stripePublicKey);\r\n\r\n    const modal = document.getElementById('register-checkout-modal-overlay');\r\n    const form = document.getElementById('register-checkout-form');\r\n    let selectedPlan = null; // This variable will store the plan selected for checkout\r\n\r\n    // Get references to the specific Pro and Enterprise buttons\r\n    const proPlanButton = document.querySelector('.choose-plan-btn[data-plan=\"pro\"]');\r\n    const enterprisePlanButton = document.querySelector('.choose-plan-btn[data-plan=\"enterprise\"]');\r\n\r\n    // Handle click for Pro and Enterprise buttons directly\r\n    const handlePaidPlanClick = async (event) => {\r\n        // Ensure the clicked element is a button and has a data-plan attribute\r\n        if (!event.currentTarget || event.currentTarget.tagName !== 'BUTTON' || !event.currentTarget.dataset.plan) {\r\n            console.error(\"Invalid element clicked for paid plan handler.\");\r\n            return;\r\n        }\r\n\r\n        selectedPlan = event.currentTarget.dataset.plan;\r\n        \r\n        console.log('Clicked paid plan:', selectedPlan); \r\n\r\n        if (localStorage.getItem('authToken')) {\r\n            // User is already logged in, proceed to create a Stripe checkout session\r\n            await createCheckoutSession(selectedPlan);\r\n        } else {\r\n            // User is not logged in, show the registration/checkout modal\r\n            if (modal) modal.style.display = 'flex';\r\n        }\r\n    };\r\n\r\n    // Attach listeners directly to the paid plan buttons\r\n    if (proPlanButton) {\r\n        proPlanButton.addEventListener('click', handlePaidPlanClick);\r\n    }\r\n    if (enterprisePlanButton) {\r\n        enterprisePlanButton.addEventListener('click', handlePaidPlanClick);\r\n    }\r\n    \r\n    // The Free plan button is an <a> tag and is handled by its href directly in HTML.\r\n    // No JavaScript listener is needed for the free plan button now.\r\n\r\n    // Handle submission of the registration form within the checkout modal\r\n    if (form) {\r\n        form.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const errorEl = document.getElementById('register-checkout-error-message');\r\n            errorEl.textContent = '';\r\n            errorEl.style.display = 'none'; // Hide error message initially\r\n\r\n            const companyName = document.getElementById('reg-co-name').value;\r\n            const fullName = document.getElementById('reg-full-name').value;\r\n            const email = document.getElementById('reg-email').value;\r\n            const password = document.getElementById('reg-password').value;\r\n\r\n            try {\r\n                // Step 1: Register the new company and user via API\r\n                await apiRequest(\"POST\", \"/api/register\", { companyName, fullName, email, password });\r\n\r\n                // Step 2: Log the newly registered user in to get an auth token\r\n                const loginData = await apiRequest(\"POST\", \"/api/login\", { email, password });\r\n                if (!loginData.token) throw new Error(\"Login failed after registration.\");\r\n                localStorage.setItem(\"authToken\", loginData.token);\r\n                localStorage.setItem(\"userRole\", loginData.role);\r\n                localStorage.setItem(\"userId\", loginData.userId); // Store user ID for later use\r\n\r\n                // Step 3: Proceed to create the Stripe checkout session for the selected paid plan\r\n                await createCheckoutSession(selectedPlan);\r\n\r\n            } catch (error) {\r\n                errorEl.textContent = error.message;\r\n                errorEl.style.display = 'block'; // Show error message\r\n                console.error('Registration/Checkout error:', error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle the cancel button click on the registration/checkout modal\r\n    const cancelBtn = document.getElementById('reg-checkout-cancel-btn');\r\n    if (cancelBtn) {\r\n        cancelBtn.addEventListener('click', () => {\r\n            if (modal) modal.style.display = 'none'; // Hide the modal\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a Stripe Checkout Session on the backend and redirects the user.\r\n     * @param {string} plan The ID of the plan ('pro' or 'enterprise').\r\n     */\r\n    async function createCheckoutSession(plan) {\r\n        try {\r\n            // Make an API request to your backend to create the Stripe session\r\n            const session = await apiRequest('POST', '/api/create-checkout-session', { plan });\r\n            if (session && session.id) {\r\n                // If session is successfully created, redirect the user to Stripe Checkout\r\n                await stripe.redirectToCheckout({ sessionId: session.id });\r\n            } else {\r\n                // Display an error if the session ID is missing\r\n                showModalMessage('Could not initiate checkout session. Please try again.', true);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating checkout session:', error);\r\n            // Display a user-friendly error message\r\n            showModalMessage('Could not initiate checkout. Please try again.', true);\r\n        }\r\n    }\r\n}\r\n", "import { apiRequest } from '../utils.js';\r\n\r\nexport function handlePrintableSchedulePage() {\r\n    const scheduleContainer = document.getElementById('schedule-container');\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const startDate = urlParams.get('startDate');\r\n    const endDate = urlParams.get('endDate');\r\n    const locationId = urlParams.get('locationId');\r\n    const locationName = urlParams.get('locationName');\r\n\r\n    if (!startDate || !endDate || !locationId) {\r\n        scheduleContainer.innerHTML = '<p>Error: Missing schedule information.</p>';\r\n        return;\r\n    }\r\n\r\n    async function loadAndRenderPrintableSchedule() {\r\n        try {\r\n            const shifts = await apiRequest('GET', `/api/shifts?startDate=${startDate}&endDate=${endDate}&location_id=${locationId}`);\r\n            \r\n            const weekEndingDate = new Date(endDate);\r\n            weekEndingDate.setDate(weekEndingDate.getDate() - 1);\r\n\r\n            let tableHtml = `\r\n                <div class=\"schedule-header\">\r\n                    <h1>Work Schedule</h1>\r\n                </div>\r\n                <div class=\"schedule-info\">\r\n                    <span><strong>Location:</strong> ${locationName}</span>\r\n                    <span><strong>Week Ending:</strong> ${weekEndingDate.toLocaleDateString()}</span>\r\n                </div>\r\n                <table class=\"schedule-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Employee</th>\r\n                            <th>Sun</th>\r\n                            <th>Mon</th>\r\n                            <th>Tue</th>\r\n                            <th>Wed</th>\r\n                            <th>Thu</th>\r\n                            <th>Fri</th>\r\n                            <th>Sat</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n            `;\r\n\r\n            const employees = {};\r\n            shifts.forEach(shift => {\r\n                if (!employees[shift.employee_name]) {\r\n                    employees[shift.employee_name] = Array(7).fill('');\r\n                }\r\n                const shiftDate = new Date(shift.start_time);\r\n                const dayIndex = shiftDate.getDay();\r\n                const startTime = shiftDate.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n                const endTime = new Date(shift.end_time).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\r\n                employees[shift.employee_name][dayIndex] += `<div>${startTime} - ${endTime}</div>`;\r\n            });\r\n\r\n            for (const [name, schedule] of Object.entries(employees)) {\r\n                tableHtml += `<tr><td>${name}</td>`;\r\n                schedule.forEach(dayHtml => {\r\n                    tableHtml += `<td>${dayHtml}</td>`;\r\n                });\r\n                tableHtml += `</tr>`;\r\n            }\r\n\r\n            tableHtml += `\r\n                    </tbody>\r\n                </table>\r\n            `;\r\n\r\n            scheduleContainer.innerHTML = tableHtml;\r\n\r\n        } catch (error) {\r\n            scheduleContainer.innerHTML = `<p>Error loading schedule: ${error.message}</p>`;\r\n        }\r\n    }\r\n\r\n    loadAndRenderPrintableSchedule();\r\n}\r\n", "    // js/app.js (Main Router - Self-Starting) - MASTER SOLUTION: Final Version\n\n    // Import all page handlers using ESM import syntax for browser compatibility\n    import { handleLoginPage } from './pages/login.js';\n    import { handleRegisterPage } from './pages/register.js';\n    import { handleDashboardPage } from './pages/dashboard.js';\n    import { handleChecklistsPage } from './pages/checklists.js';\n    import { handleAdminPage } from './pages/admin.js';\n    import { handleAccountPage } from './pages/account.js';\n    import { handleDocumentsPage } from './pages/documents.js';\n    import { handleHiringPage } from './pages/hiring.js';\n    import { handleSchedulingPage } from './pages/scheduling.js';\n    import { handleApplyPage } from './pages/apply.js';\n    import { handleOnboardingViewPage } from './pages/onboardingView.js';\n    import { handleSuiteHubPage } from './pages/suiteHub.js';\n    import { handlePricingPage } from './pages/pricing.js';\n    import { handlePrintableSchedulePage } from './pages/printable-schedule.js';\n\n    /**\n     * Sets up the settings dropdown menu on pages that have it.\n     */\n    function setupSettingsDropdown() {\n        const settingsButton = document.getElementById(\"settings-button\");\n        const settingsDropdown = document.getElementById(\"settings-dropdown\");\n        const logoutButton = document.getElementById(\"logout-button\");\n\n        if (settingsButton && settingsDropdown) {\n            settingsButton.addEventListener(\"click\", event => {\n                event.stopPropagation();\n                settingsDropdown.style.display = settingsDropdown.style.display === \"block\" ? \"none\" : \"block\";\n            });\n            document.addEventListener(\"click\", event => {\n                if (settingsButton && !settingsButton.contains(event.target) && !settingsDropdown.contains(event.target)) {\n                    settingsDropdown.style.display = \"none\";\n                }\n            });\n        }\n        if (logoutButton) {\n            logoutButton.addEventListener(\"click\", () => {\n                localStorage.removeItem(\"authToken\");\n                localStorage.removeItem(\"userRole\");\n                localStorage.removeItem('userId');\n                console.log('User logged out. Local storage cleared.');\n                window.location.href = \"login.html\";\n            });\n        }\n    }\n\n    /**\n     * This is the main function for the application. It acts as a router,\n     * determining which page is currently active and calling the appropriate\n     * logic for it.\n     */\n    function main() {\n        const path = window.location.pathname;\n\n        // A list of pages that have the main header with the settings dropdown\n        const pagesWithSettings = [\n            \"suite-hub.html\", \"dashboard.html\", \"checklists.html\", \"admin.html\",\n            \"account.html\", \"documents.html\", \"hiring.html\", \"scheduling.html\", \n            \"new-hire-view.html\", \"help.html\", \"pricing.html\" // ADDED pricing.html HERE\n        ];\n\n        // Setup the dropdown if the current page needs it\n        if (pagesWithSettings.some(p => path.includes(p))) {\n            setupSettingsDropdown();\n        }\n\n        // Route to the correct page handler based on the URL\n        if (path.includes(\"login.html\")) handleLoginPage();\n        else if (path.includes(\"register.html\")) handleRegisterPage();\n        else if (path.includes(\"suite-hub.html\")) handleSuiteHubPage();\n        else if (path.includes(\"dashboard.html\")) handleDashboardPage();\n        else if (path.includes(\"checklists.html\")) handleChecklistsPage();\n        else if (path.includes(\"admin.html\")) handleAdminPage();\n        else if (path.includes(\"account.html\")) handleAccountPage();\n        else if (path.includes(\"documents.html\")) handleDocumentsPage();\n        else if (path.includes(\"hiring.html\")) handleHiringPage();\n        else if (path.includes(\"scheduling.html\")) handleSchedulingPage();\n        else if (path.includes(\"apply.html\")) handleApplyPage();\n        else if (path.includes(\"new-hire-view.html\")) handleOnboardingViewPage();\n        else if (path.includes(\"pricing.html\")) handlePricingPage();\n        else if (path.includes(\"printable-schedule.html\")) handlePrintableSchedulePage();\n        // Note: help.html does not need a specific handler as its logic is self-contained.\n    }\n\n    // --- AUTOMATIC STARTUP ---\n    document.addEventListener('DOMContentLoaded', main);\n    "],
  "mappings": "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",
  "names": []
}
