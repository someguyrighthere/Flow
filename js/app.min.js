const API_BASE_URL="https://flow-gz1r.onrender.com";let stripe;if(typeof Stripe!=="undefined"){stripe=Stripe("pk_live_51Ra4RJG06NHrwsY9lqejmXiGn8DAGzwlrqTuarPZzIb3p1yIPchUaPGAXuKe7yJD73UCvQ3ydKzoclwRi0DiIrbP00xbXj54td")}else{console.warn("Stripe.js not loaded. Stripe functionalities will not work on this page.")}async function apiRequest(method,path,body=null,isFormData=false){const token=localStorage.getItem("authToken");const options={method:method,headers:{}};if(token){options.headers["Authorization"]=`Bearer ${token}`}if(body){if(isFormData){options.body=body}else{options.headers["Content-Type"]="application/json";options.body=JSON.stringify(body)}}const response=await fetch(`${API_BASE_URL}${path}`,options);if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||"Something went wrong")}if(response.status===204||response.status===200&&response.headers.get("content-length")==="0"){return null}return response.json()}function showModalMessage(message,isError=false){const modalOverlay=document.getElementById("message-modal-overlay");const modalMessage=document.getElementById("modal-message-text");const modalCloseButton=document.getElementById("modal-close-button");if(modalOverlay&&modalMessage&&modalCloseButton){modalMessage.textContent=message;modalMessage.style.color=isError?"#ff8a80":"var(--text-light)";modalOverlay.style.display="flex";modalOverlay.style.zIndex="1000";modalCloseButton.onclick=()=>{modalOverlay.style.display="none"};modalOverlay.onclick=event=>{if(event.target===modalOverlay){modalOverlay.style.display="none"}}}else{console.error("Modal elements not found for showModalMessage. Message:",message);if(isError){console.error(`ERROR: ${message}`)}else{console.log(`MESSAGE: ${message}`)}}}function showConfirmModal(message,confirmButtonText="Confirm"){return new Promise(resolve=>{const confirmModalOverlay=document.getElementById("confirm-modal-overlay");const confirmModalMessage=document.getElementById("confirm-modal-message");const modalConfirmButton=document.getElementById("modal-confirm");const modalCancelButton=document.getElementById("modal-cancel");if(!confirmModalOverlay||!confirmModalMessage||!modalConfirmButton||!modalCancelButton){console.error("Confirmation modal elements not found. Falling back to native confirm.");resolve(window.confirm(message));return}confirmModalMessage.textContent=message;modalConfirmButton.textContent=confirmButtonText;confirmModalOverlay.style.display="flex";const handleConfirm=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(true)};const handleCancel=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(false)};modalConfirmButton.addEventListener("click",handleConfirm);modalCancelButton.addEventListener("click",handleCancel);confirmModalOverlay.onclick=event=>{if(event.target===confirmModalOverlay){handleCancel()}}})}function setupSettingsDropdown(){const settingsButton=document.getElementById("settings-button");const settingsDropdown=document.getElementById("settings-dropdown");const logoutButton=document.getElementById("logout-button");const upgradePlanLink=document.getElementById("upgrade-plan-link");if(settingsButton&&settingsDropdown){settingsButton.addEventListener("click",async event=>{event.stopPropagation();settingsDropdown.style.display=settingsDropdown.style.display==="block"?"none":"block";if(settingsDropdown.style.display==="block"&&upgradePlanLink){if(localStorage.getItem("authToken")){try{const profile=await apiRequest("GET","/profile");if(profile&&profile.plan_id==="free"){upgradePlanLink.style.display="block"}else{upgradePlanLink.style.display="none"}}catch(error){console.error("Error fetching profile for upgrade link:",error);upgradePlanLink.style.display="none"}}else{upgradePlanLink.style.display="none"}}});document.addEventListener("click",event=>{if(!settingsButton.contains(event.target)&&!settingsDropdown.contains(event.target)){settingsDropdown.style.display="none"}})}if(logoutButton){logoutButton.addEventListener("click",()=>{localStorage.removeItem("authToken");localStorage.removeItem("userRole");window.location.href="login.html"})}}function handleLoginPage(){const loginForm=document.getElementById("login-form");if(!loginForm){return}loginForm.addEventListener("submit",async e=>{e.preventDefault();const emailInput=document.getElementById("email");const passwordInput=document.getElementById("password");const email=emailInput.value.trim();const password=passwordInput.value;const errorMessage=document.getElementById("error-message");if(errorMessage){errorMessage.textContent="";errorMessage.classList.remove("visible")}if(!email||!password){if(errorMessage){errorMessage.textContent="Email and password are required.";errorMessage.classList.add("visible")}return}const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!emailRegex.test(email)){if(errorMessage){errorMessage.textContent="Please enter a valid email address.";errorMessage.classList.add("visible")}return}if(password.length<6){if(errorMessage){errorMessage.textContent="Password must be at least 6 characters long.";errorMessage.classList.add("visible")}return}try{const data=await apiRequest("POST","/login",{email:email,password:password});localStorage.setItem("authToken",data.token);localStorage.setItem("userRole",data.role);if(data.role==="super_admin"||data.role==="location_admin"){window.location.href="suite-hub.html"}else{window.location.href="new-hire-view.html"}}catch(error){console.error("Login API error:",error);if(errorMessage){errorMessage.textContent=`Login Failed: ${error.message}`;errorMessage.classList.add("visible")}showModalMessage(`Login Failed: ${error.message}`,true)}})}function handleRegisterPage(){const registerForm=document.getElementById("register-form");if(!registerForm){return}registerForm.addEventListener("submit",async e=>{e.preventDefault();const companyNameInput=document.getElementById("company-name");const fullNameInput=document.getElementById("full-name");const emailInput=document.getElementById("email");const passwordInput=document.getElementById("password");const errorMessage=document.getElementById("error-message");const company_name=companyNameInput.value.trim();const full_name=fullNameInput.value.trim();const email=emailInput.value.trim();const password=passwordInput.value;errorMessage.textContent="";errorMessage.classList.remove("visible");const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!company_name||!full_name||!email||!password||password.length<6||!emailRegex.test(email)){errorMessage.textContent="Please fill all fields correctly. Password must be at least 6 characters and email valid.";errorMessage.classList.add("visible");return}try{const data=await apiRequest("POST","/register",{company_name:company_name,full_name:full_name,email:email,password:password});showModalMessage("Account created successfully! Please log in.",false);companyNameInput.value="";fullNameInput.value="";emailInput.value="";passwordInput.value="";setTimeout(()=>{window.location.href="login.html"},2e3)}catch(error){console.error("Registration API error:",error);if(errorMessage){errorMessage.textContent=`Registration Failed: ${error.message}`;errorMessage.classList.add("visible")}showModalMessage(`Registration Failed: ${error.message}`,true)}})}function handleSuiteHubPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const urlParams=new URLSearchParams(window.location.search);const paymentStatus=urlParams.get("payment");const sessionId=urlParams.get("session_id");if(paymentStatus==="success"){showModalMessage("Payment successful! Your subscription has been updated.",false);history.replaceState({},document.title,window.location.pathname)}else if(paymentStatus==="cancelled"){showModalMessage("Payment cancelled. You can try again or choose another plan.",true);history.replaceState({},document.title,window.location.pathname)}}function handleAccountPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const displayProfileName=document.getElementById("display-profile-name");const displayProfileEmail=document.getElementById("display-profile-email");const profileNameInput=document.getElementById("profile-name");const profileEmailInput=document.getElementById("profile-email");const updateProfileForm=document.getElementById("update-profile-form");const currentPasswordInput=document.getElementById("current-password");const newPasswordInput=document.getElementById("new-password");async function loadProfileInfo(){try{const profile=await apiRequest("GET","/profile");if(displayProfileName)displayProfileName.textContent=profile.fullName||"N/A";if(displayProfileEmail)displayProfileEmail.textContent=profile.email||"N/A";if(profileNameInput)profileNameInput.value=profile.fullName||"";if(profileEmailInput)profileEmailInput.value=profile.email||""}catch(error){console.error("Error loading profile info:",error);showModalMessage(`Failed to load profile: ${error.message}`,true)}}if(updateProfileForm){updateProfileForm.addEventListener("submit",async e=>{e.preventDefault();const fullName=profileNameInput?profileNameInput.value:"";const email=profileEmailInput?profileEmailInput.value:"";const currentPassword=currentPasswordInput?currentPasswordInput.value:"";const newPassword=newPasswordInput?newPasswordInput.value:"";const updatePayload={fullName:fullName,email:email};if(currentPassword&&newPassword){updatePayload.currentPassword=currentPassword;updatePayload.newPassword=newPassword}try{const result=await apiRequest("PUT","/profile",updatePayload);if(result&&result.token){localStorage.setItem("authToken",result.token)}showModalMessage(result.message||"Profile updated successfully!",false);if(currentPasswordInput)currentPasswordInput.value="";if(newPasswordInput)newPasswordInput.value="";loadProfileInfo()}catch(error){console.error("Error updating profile:",error);showModalMessage(`Failed to update profile: ${error.message}`,true)}})}loadProfileInfo()}function handleAdminPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const locationListDiv=document.getElementById("location-list");const userListDiv=document.getElementById("user-list");const newLocationForm=document.getElementById("new-location-form");const inviteAdminForm=document.getElementById("invite-admin-form");const inviteEmployeeForm=document.getElementById("invite-employee-form");const adminLocationSelect=document.getElementById("admin-location-select");const employeeLocationSelect=document.getElementById("employee-location-select");async function loadLocations(){if(!locationListDiv){return}locationListDiv.innerHTML="<p>Loading locations...</p>";try{const locations=await apiRequest("GET","/locations");locationListDiv.innerHTML="";if(locations.length===0){locationListDiv.innerHTML='<p style="color: var(--text-medium);">No locations created yet.</p>';if(adminLocationSelect){adminLocationSelect.innerHTML='<option value="">Select a location</option>';adminLocationSelect.disabled=true}if(employeeLocationSelect){employeeLocationSelect.innerHTML='<option value="">Select a location</option>';employeeLocationSelect.disabled=true}}else{if(adminLocationSelect)adminLocationSelect.disabled=false;if(employeeLocationSelect)employeeLocationSelect.disabled=false;locations.forEach(loc=>{const locDiv=document.createElement("div");locDiv.className="list-item";locDiv.innerHTML=`<span>${loc.location_name} - ${loc.location_address}</span>
                                        <button class="btn-delete" data-type="location" data-id="${loc.location_id}">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 10 0 0 1-1 1H13v9a2 10 0 0 1-2 2H5a2 10 0 0 1-2-2V4h-.5a1 10 0 0 1-1-1V2a1 10 0 0 1 1-1H6a1 10 0 0 1 1-1h2a1 10 0 0 1 1 1h3.5a1 10 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 10 0 0 0 1 1h6a1 10 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                        </button>`;locDiv.addEventListener("click",e=>{if(!e.target.closest(".btn-delete")){showModalMessage(`Location: ${loc.location_name} (ID: ${loc.location_id}) - Address: ${loc.location_address}`,false)}});locationListDiv.appendChild(locDiv)});const locationOptionsHtml=locations.map(loc=>`<option value="${loc.location_id}">${loc.location_name}</option>`).join("");if(adminLocationSelect){adminLocationSelect.innerHTML=`<option value="">Select a location</option>${locationOptionsHtml}`}if(employeeLocationSelect){employeeLocationSelect.innerHTML=`<option value="">Select a location</option>${locationOptionsHtml}`}}}catch(error){console.error("Error loading locations:",error);showModalMessage(`Failed to load locations: ${error.message}`,true)}}async function loadUsers(){if(!userListDiv)return;userListDiv.innerHTML="<p>Loading users...</p>";try{const users=await apiRequest("GET","/users");userListDiv.innerHTML="";if(users.length===0){userListDiv.innerHTML='<p style="color: var(--text-medium);">No users invited yet.</p>'}else{users.forEach(user=>{const userDiv=document.createElement("div");userDiv.className="list-item";let userInfo=`${user.full_name} - Role: ${user.role}`;if(user.location_name){userInfo+=` @ ${user.location_name}`}userDiv.innerHTML=`<span>${userInfo}</span>
                                         <button class="btn-delete" data-type="user" data-id="${user.user_id}">
                                             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 10 0 0 1-1 1H13v9a2 10 0 0 1-2 2H5a2 10 0 0 1-2-2V4h-.5a1 10 0 0 1-1-1V2a1 10 0 0 1 1-1H6a1 10 0 0 1 1-1h2a1 10 0 0 1 1 1h3.5a1 10 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 10 0 0 0 1 1h6a1 10 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                         </button>`;userListDiv.appendChild(userDiv)})}}catch(error){console.error("Error loading users:",error);userListDiv.innerHTML=`<p style="color: #e74c3c;">Error loading users: ${error.message}</p>`}}document.body.addEventListener("click",async e=>{const targetButton=e.target.closest(".btn-delete");if(targetButton){console.log("handleAdminPage: Delete button clicked.");const id=targetButton.dataset.id;const type=targetButton.dataset.type;const confirmationMessage=`Are you sure you want to delete this ${type}? This action cannot be undone.`;const confirmed=await showConfirmModal(confirmationMessage,"Delete");if(confirmed){try{console.log(`handleAdminPage: Deleting ${type} with ID: ${id}.`);if(type==="location"){await apiRequest("DELETE",`/locations/${id}`);showModalMessage("Location deleted successfully!",false);loadLocations();loadUsers()}else if(type==="user"){await apiRequest("DELETE",`/users/${id}`);showModalMessage("User deleted successfully!",false);loadUsers()}console.log(`handleAdminPage: ${type} deleted successfully.`)}catch(error){showModalMessage(`Error deleting ${type}: ${error.message}`,true)}}}});if(newLocationForm){console.log("handleAdminPage: New location form found, attaching listener.");newLocationForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: New location form submitted.");const nameInput=document.getElementById("new-location-name");const addressInput=document.getElementById("new-location-address");const location_name=nameInput.value.trim();const location_address=addressInput.value.trim();try{console.log("handleAdminPage: Creating location via API.");await apiRequest("POST","/locations",{location_name:location_name,location_address:location_address});nameInput.value="";addressInput.value="";showModalMessage("Location created successfully!",false);console.log("handleAdminPage: Location created, reloading lists.");loadLocations()}catch(error){console.error("Error creating location:",error);showModalMessage(`Error creating location: ${error.message}`,true)}})}if(inviteAdminForm){console.log("handleAdminPage: Invite admin form found, attaching listener.");inviteAdminForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: Invite admin form submitted.");const adminName=document.getElementById("admin-name")?document.getElementById("admin-name").value.trim():"";const adminEmail=document.getElementById("admin-email")?document.getElementById("admin-email").value.trim():"";const adminPassword=document.getElementById("admin-password")?document.getElementById("admin-password").value:"";const adminLocationSelectElement=document.getElementById("admin-location-select");const adminLocationId=adminLocationSelectElement?adminLocationSelectElement.value:"";if(!adminName||!adminEmail||!adminPassword||adminPassword.length<6||!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(adminEmail)){showModalMessage("Please provide a full name, valid email, and a password (min 6 chars) for the new admin.",true);return}if(!adminLocationId){showModalMessage("Please select a location to assign the admin.",true);return}try{console.log("handleAdminPage: Inviting admin via API.");await apiRequest("POST","/invite-admin",{full_name:adminName,email:adminEmail,location_id:parseInt(adminLocationId),password:adminPassword});if(document.getElementById("admin-name"))document.getElementById("admin-name").value="";if(document.getElementById("admin-email"))document.getElementById("admin-email").value="";if(document.getElementById("admin-password"))document.getElementById("admin-password").value="";if(adminLocationSelectElement)adminLocationSelectElement.value="";showModalMessage(`Admin invite sent to ${adminEmail} for selected location with the provided temporary password.`,false);console.log("handleAdminPage: Admin invited, reloading users.");loadUsers()}catch(error){console.error("Error inviting admin:",error);showModalMessage(`Failed to invite admin: ${error.message}`,true)}})}if(inviteEmployeeForm){console.log("handleAdminPage: Invite employee form found, attaching listener.");inviteEmployeeForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: Invite employee form submitted.");const employeeName=document.getElementById("employee-name")?document.getElementById("employee-name").value.trim():"";const employeeEmail=document.getElementById("employee-email")?document.getElementById("employee-email").value.trim():"";const employeePassword=document.getElementById("employee-password")?document.getElementById("employee-password").value:"";const employeePosition=document.getElementById("employee-position")?document.getElementById("employee-position").value.trim():"";const employeeId=document.getElementById("employee-id")?document.getElementById("employee-id").value.trim():null;const employeeLocationSelectElement=document.getElementById("employee-location-select");const employeeLocationId=employeeLocationSelectElement?employeeLocationSelectElement.value:"";if(!employeeName||!employeeEmail||!employeePassword||employeePassword.length<6||!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(employeeEmail)){showModalMessage("Full name, valid email, and a password (min 6 chars) are required for employee invitation.",true);return}const locationIdToSend=employeeLocationId?parseInt(employeeLocationId):null;const employeeIdToSend=employeeId?isNaN(parseInt(employeeId))?employeeId:parseInt(employeeId):null;try{console.log("handleAdminPage: Inviting employee via API.");await apiRequest("POST","/invite-employee",{full_name:employeeName,email:employeeEmail,password:employeePassword,position:employeePosition||null,employee_id:employeeIdToSend,location_id:locationIdToSend});if(document.getElementById("employee-name"))document.getElementById("employee-name").value="";if(document.getElementById("employee-email"))document.getElementById("employee-email").value="";if(document.getElementById("employee-password"))document.getElementById("employee-password").value="";if(document.getElementById("employee-position"))document.getElementById("employee-position").value="";if(document.getElementById("employee-id"))document.getElementById("employee-id").value="";if(employeeLocationSelectElement)employeeLocationSelectElement.value="";showModalMessage(`Employee invite sent to ${employeeEmail} with the provided temporary password.`,false);console.log("handleAdminPage: Employee invited, reloading users.");loadUsers()}catch(error){console.error("Error inviting employee:",error);showModalMessage(`Failed to invite employee: ${error.message}`,true)}})}loadLocations();loadUsers()}function handlePricingPage(){console.log("handlePricingPage: Initializing pricing page logic.");const freePlanBtn=document.getElementById("free-plan-btn");const proPlanBtn=document.getElementById("pro-plan-btn");const enterprisePlanBtn=document.getElementById("enterprise-plan-btn");if(!freePlanBtn||!proPlanBtn||!enterprisePlanBtn){console.error("handlePricingPage: One or more pricing plan buttons not found. Check IDs in HTML.");return}console.log("handlePricingPage: All pricing plan buttons found.");const registerCheckoutModalOverlay=document.getElementById("register-checkout-modal-overlay");const registerCheckoutForm=document.getElementById("register-checkout-form");const regCheckoutModalTitle=document.getElementById("register-checkout-modal-title");const regCheckoutErrorMessage=document.getElementById("register-checkout-error-message");const regCheckoutCancelBtn=document.getElementById("reg-checkout-cancel-btn");let selectedPlanForRegistration=null;if(freePlanBtn){freePlanBtn.addEventListener("click",()=>{console.log("handlePricingPage: Free plan button clicked.");showModalMessage("You are currently on the Free plan. No action needed.",false)})}async function initiateStripeCheckout(planId,token){console.log(`initiateStripeCheckout: Proceeding with checkout for plan: ${planId}`);try{if(typeof stripe==="undefined"||stripe===null){console.error("Stripe object is not initialized. Cannot proceed with checkout.");showModalMessage("Payment processing is unavailable. Please refresh the page.",true);return}const response=await apiRequest("POST","/create-checkout-session",{planId:planId});const sessionId=response.sessionId;console.log("initiateStripeCheckout: Received session ID from backend:",sessionId);if(sessionId){console.log("initiateStripeCheckout: Redirecting to Stripe Checkout.");const result=await stripe.redirectToCheckout({sessionId:sessionId});if(result.error){console.error("Stripe Checkout Error:",result.error.message);showModalMessage(`Stripe Checkout Error: ${result.error.message}`,true)}}else{console.error("initiateStripeCheckout: Session ID not received from backend.");showModalMessage("Failed to create Stripe Checkout session. Please try again.",true)}}catch(error){console.error("Error initiating checkout:",error);showModalMessage(`Error initiating checkout: ${error.message}`,true)}}const handlePlanButtonClick=async event=>{console.log("handlePricingPage: Plan button clicked. Target:",event.target);const planId=event.target.dataset.planId;if(!planId){console.error("handlePricingPage: Plan ID not found on button. Check data-plan-id attribute.");showModalMessage("Plan ID not found. Cannot proceed with checkout.",true);return}selectedPlanForRegistration=planId;const authToken=localStorage.getItem("authToken");if(!authToken){console.log("handlePricingPage: No auth token found, displaying registration modal.");regCheckoutModalTitle.textContent=`Sign Up & Subscribe to ${planId.charAt(0).toUpperCase()+planId.slice(1)} Plan`;regCheckoutErrorMessage.textContent="";regCheckoutErrorMessage.classList.remove("visible");registerCheckoutModalOverlay.style.display="flex";document.getElementById("reg-co-name").value="";document.getElementById("reg-full-name").value="";document.getElementById("reg-email").value="";document.getElementById("reg-password").value="";return}console.log("handlePricingPage: Auth token found, proceeding directly with checkout.");await initiateStripeCheckout(planId,authToken)};if(proPlanBtn){proPlanBtn.addEventListener("click",handlePlanButtonClick);console.log("handlePricingPage: Attached click listener to Pro button.")}if(enterprisePlanBtn){enterprisePlanBtn.addEventListener("click",handlePlanButtonClick);console.log("handlePricingPage: Attached click listener to Enterprise button.")}if(registerCheckoutForm){registerCheckoutForm.addEventListener("submit",async e=>{e.preventDefault();console.log("Register/Checkout Form Submitted from modal.");const companyName=document.getElementById("reg-co-name").value.trim();const fullName=document.getElementById("reg-full-name").value.trim();const email=document.getElementById("reg-email").value.trim();const password=document.getElementById("reg-password").value;regCheckoutErrorMessage.textContent="";regCheckoutErrorMessage.classList.remove("visible");const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!companyName||!fullName||!email||!password||password.length<6||!emailRegex.test(email)){regCheckoutErrorMessage.textContent="Please fill all fields correctly. Password must be at least 6 characters and email valid.";regCheckoutErrorMessage.classList.add("visible");return}try{console.log("Attempting to register new user via API call.");const registerResponse=await apiRequest("POST","/register",{company_name:companyName,full_name:fullName,email:email,password:password});if(registerResponse){console.log("Registration successful. Now attempting to log in the new user to get an auth token for checkout.");const loginResponse=await apiRequest("POST","/login",{email:email,password:password});if(loginResponse&&loginResponse.token){localStorage.setItem("authToken",loginResponse.token);localStorage.setItem("userRole",loginResponse.role);registerCheckoutModalOverlay.style.display="none";showModalMessage("Account created successfully! Redirecting to payment...",false);await initiateStripeCheckout(selectedPlanForRegistration,loginResponse.token)}else{throw new Error("Failed to log in after successful registration. Please try logging in manually.")}}else{throw new Error("Registration failed unexpectedly. Please try again.")}}catch(error){console.error("Registration/Checkout process error:",error);regCheckoutErrorMessage.textContent=`Error: ${error.message}`;regCheckoutErrorMessage.classList.add("visible");showModalMessage(`Registration/Payment failed: ${error.message}`,true)}})}if(regCheckoutCancelBtn){regCheckoutCancelBtn.addEventListener("click",()=>{registerCheckoutModalOverlay.style.display="none"})}}function handleSchedulingPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("Scheduling page logic goes here. (Implementation pending)")}function handleHiringPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("Hiring page logic goes here. (Implementation pending)")}function handleSalesAnalyticsPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("Sales Analytics page logic goes here. (Implementation pending)")}function handleDashboardPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("Dashboard page logic goes here. (Implementation pending)")}function handleDocumentsPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const uploadDocumentForm=document.getElementById("upload-document-form");const documentTitleInput=document.getElementById("document-title");const documentFileInput=document.getElementById("document-file");const documentDescriptionInput=document.getElementById("document-description");const documentListDiv=document.getElementById("document-list");async function loadDocuments(){console.log("Loading documents...");documentListDiv.innerHTML='<p style="color: var(--text-medium);">Loading documents...</p>';try{const documents=await apiRequest("GET","/documents");documentListDiv.innerHTML="";if(documents.length===0){documentListDiv.innerHTML='<p style="color: var(--text-medium);">No documents uploaded yet.</p>'}else{documents.forEach(doc=>{const docItem=document.createElement("div");docItem.className="document-item";docItem.innerHTML=`
                        <h4>${doc.title}</h4>
                        <p>File: ${doc.file_name} (${doc.mime_type||"Unknown Type"})</p>
                        <p>${doc.description||"No description provided."}</p>
                        <p style="font-size:0.8em; color:var(--text-medium);">Uploaded by: ${doc.uploaded_by} on ${new Date(doc.upload_date).toLocaleDateString()}</p>
                        <div class="actions">
                            <button class="btn-download" data-document-id="${doc.document_id}">Download</button>
                            <button class="btn-delete" data-document-id="${doc.document_id}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 10 0 0 1-1 1H13v9a2 10 0 0 1-2 2H5a2 10 0 0 1-2-2V4h-.5a1 10 0 0 1-1-1V2a1 10 0 0 1 1-1H6a1 10 0 0 1 1-1h2a1 10 0 0 1 1 1h3.5a1 10 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 10 0 0 0 1 1h6a1 10 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                            </button>
                        </div>
                    `;documentListDiv.appendChild(docItem)})}}catch(error){console.error("Error loading documents:",error);documentListDiv.innerHTML=`<p style="color: #e74c3c;">Error loading documents: ${error.message}</p>`}}if(uploadDocumentForm){uploadDocumentForm.addEventListener("submit",async e=>{e.preventDefault();console.log("Upload document form submitted.");const title=documentTitleInput.value.trim();const description=documentDescriptionInput.value.trim();const file=documentFileInput.files[0];if(!title||!file){showModalMessage("Document title and a file are required for upload.",true);return}const formData=new FormData;formData.append("title",title);formData.append("description",description);formData.append("document_file",file);try{console.log("Attempting to upload document via API.");await apiRequest("POST","/documents/upload",formData,true);showModalMessage("Document uploaded successfully!",false);documentTitleInput.value="";documentFileInput.value="";documentDescriptionInput.value="";loadDocuments()}catch(error){console.error("Error uploading document:",error);showModalMessage(`Error uploading document: ${error.message}`,true)}})}if(documentListDiv){documentListDiv.addEventListener("click",async e=>{const downloadButton=e.target.closest(".btn-download");const deleteButton=e.target.closest(".btn-delete");if(downloadButton){const documentId=downloadButton.dataset.documentId;console.log(`Download button clicked for document ID: ${documentId}`);window.location.href=`${API_BASE_URL}/documents/download/${documentId}`}else if(deleteButton){const documentId=deleteButton.dataset.documentId;console.log(`Delete button clicked for document ID: ${documentId}`);const confirmed=await showConfirmModal("Are you sure you want to delete this document? This action cannot be undone.","Delete");if(confirmed){try{console.log(`Attempting to delete document ID: ${documentId} via API.`);await apiRequest("DELETE",`/documents/${documentId}`);showModalMessage("Document deleted successfully!",false);loadDocuments()}catch(error){console.error("Error deleting document:",error);showModalMessage(`Error deleting document: ${error.message}`,true)}}}})}loadDocuments()}function handleChecklistsPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("Checklists page logic goes here. (Implementation pending)")}function handleNewHireViewPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}console.log("New Hire View page logic goes here. (Implementation pending)")}document.addEventListener("DOMContentLoaded",()=>{setupSettingsDropdown();const path=window.location.pathname;console.log("DOMContentLoaded: Current path is",path);if(path.includes("login.html")){handleLoginPage()}else if(path.includes("register.html")){handleRegisterPage()}else if(path.includes("pricing.html")){handlePricingPage()}else if(path.includes("suite-hub.html")){handleSuiteHubPage()}else if(path.includes("account.html")){handleAccountPage()}else if(path.includes("admin.html")){handleAdminPage()}else if(path.includes("scheduling.html")){handleSchedulingPage()}else if(path.includes("hiring.html")){handleHiringPage()}else if(path.includes("dashboard.html")){handleDashboardPage()}else if(path.includes("documents.html")){handleDocumentsPage()}else if(path.includes("checklists.html")){handleChecklistsPage()}else if(path.includes("new-hire-view.html")){handleNewHireViewPage()}else if(path==="/"||path==="/index.html"||path===""){console.log("Index or root page loaded.")}else{console.warn(`No specific handler found for path: ${path}`)}});