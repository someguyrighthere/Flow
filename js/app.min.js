const API_BASE_URL="http://localhost:3000/api";async function apiRequest(method,path,body=null){const token=localStorage.getItem("authToken");const options={method:method,headers:{"Content-Type":"application/json"}};if(token)options.headers["Authorization"]=`Bearer ${token}`;if(body)options.body=JSON.stringify(body);const response=await fetch(`${API_BASE_URL}${path}`,options);if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||"Something went wrong")}if(response.status===204||response.status===200&&response.headers.get("content-length")==="0"){return null}return response.json()}function showModalMessage(message,isError=false){const modalOverlay=document.getElementById("message-modal-overlay");const modalMessage=document.getElementById("modal-message-text");const modalCloseButton=document.getElementById("modal-close-button");if(modalOverlay&&modalMessage&&modalCloseButton){modalMessage.textContent=message;modalMessage.style.color=isError?"#ff8a80":"var(--text-light)";modalOverlay.style.display="flex";modalCloseButton.onclick=()=>{modalOverlay.style.display="none"};modalOverlay.onclick=event=>{if(event.target===modalOverlay){modalOverlay.style.display="none"}}}else{console.error("Modal elements not found for showModalMessage. Message:",message);if(isError){console.error(`ERROR: ${message}`)}else{console.log(`MESSAGE: ${message}`)}}}function showConfirmModal(message,confirmButtonText="Confirm"){return new Promise(resolve=>{const confirmModalOverlay=document.getElementById("confirm-modal-overlay");const confirmModalMessage=document.getElementById("confirm-modal-message");const modalConfirmButton=document.getElementById("modal-confirm");const modalCancelButton=document.getElementById("modal-cancel");if(!confirmModalOverlay||!confirmModalMessage||!modalConfirmButton||!modalCancelButton){console.error("Confirmation modal elements not found. Falling back to native confirm.");resolve(window.confirm(message));return}confirmModalMessage.textContent=message;modalConfirmButton.textContent=confirmButtonText;confirmModalOverlay.style.display="flex";const handleConfirm=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(true)};const handleCancel=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(false)};modalConfirmButton.addEventListener("click",handleConfirm);modalCancelButton.addEventListener("click",handleCancel);confirmModalOverlay.onclick=event=>{if(event.target===confirmModalOverlay){handleCancel()}}})}function setupSettingsDropdown(){const settingsButton=document.getElementById("settings-button");const settingsDropdown=document.getElementById("settings-dropdown");const logoutButton=document.getElementById("logout-button");if(settingsButton&&settingsDropdown){settingsButton.addEventListener("click",event=>{event.stopPropagation();settingsDropdown.style.display=settingsDropdown.style.display==="block"?"none":"block"});document.addEventListener("click",event=>{if(settingsDropdown.style.display==="block"&&!settingsButton.contains(event.target)&&!settingsDropdown.contains(event.target)){settingsDropdown.style.display="none"}})}if(logoutButton){logoutButton.addEventListener("click",async()=>{const confirmed=await showConfirmModal("Are you sure you want to log out?","Logout");if(confirmed){localStorage.removeItem("authToken");window.location.href="login.html"}})}}document.addEventListener("DOMContentLoaded",()=>{const page=window.location.pathname;if(page.includes("login.html")){handleLoginPage()}else if(page.includes("suite-hub.html")){handleSuiteHubPage()}else if(page.includes("account.html")){handleAccountPage()}else if(page.includes("admin.html")){handleAdminPage()}else if(page.includes("pricing.html")){handlePricingPage()}else if(page.includes("scheduling.html")){handleSchedulingPage()}else if(page.includes("hiring.html")){handleHiringPage()}else if(page.includes("documents.html")){handleDocumentsPage()}setupSettingsDropdown()});function handleLoginPage(){const loginForm=document.getElementById("login-form");if(!loginForm){console.error("Login form not found on this page.");return}loginForm.addEventListener("submit",async e=>{e.preventDefault();const emailInput=document.getElementById("email");const passwordInput=document.getElementById("password");const email=emailInput.value;const password=passwordInput.value;const errorMessage=document.getElementById("error-message");if(errorMessage){errorMessage.textContent="";errorMessage.classList.remove("visible")}if(!email||!password){if(errorMessage){errorMessage.textContent="Email and password are required.";errorMessage.classList.add("visible")}return}const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!emailRegex.test(email)){if(errorMessage){errorMessage.textContent="Please enter a valid email address.";errorMessage.classList.add("visible")}return}if(password.length<6){if(errorMessage){errorMessage.textContent="Password must be at least 6 characters long.";errorMessage.classList.add("visible")}return}try{const data=await apiRequest("POST","/login",{email:email,password:password});localStorage.setItem("authToken",data.token);if(data.role==="super_admin"||data.role==="location_admin"){window.location.href="suite-hub.html"}else{window.location.href="new-hire-view.html"}}catch(error){if(errorMessage){errorMessage.textContent=`Login Failed: ${error.message}`;errorMessage.classList.add("visible")}console.error("Login API error:",error)}})}function handleSuiteHubPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const urlParams=new URLSearchParams(window.location.search);const paymentStatus=urlParams.get("payment");const sessionId=urlParams.get("session_id");if(paymentStatus==="success"){showModalMessage("Payment successful! Your subscription has been updated.",false);history.replaceState({},document.title,window.location.pathname)}else if(paymentStatus==="cancelled"){showModalMessage("Payment cancelled. You can try again or choose another plan.",true);history.replaceState({},document.title,window.location.pathname)}}function handleAccountPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const displayProfileName=document.getElementById("display-profile-name");const displayProfileEmail=document.getElementById("display-profile-email");const profileNameInput=document.getElementById("profile-name");const profileEmailInput=document.getElementById("profile-email");const updateProfileForm=document.getElementById("update-profile-form");const currentPasswordInput=document.getElementById("current-password");const newPasswordInput=document.getElementById("new-password");async function loadProfileInfo(){try{const profile=await apiRequest("GET","/profile");if(displayProfileName)displayProfileName.textContent=profile.fullName||"N/A";if(displayProfileEmail)displayProfileEmail.textContent=profile.email||"N/A";if(profileNameInput)profileNameInput.value=profile.fullName||"";if(profileEmailInput)profileEmailInput.value=profile.email||""}catch(error){console.error("Error loading profile info:",error);showModalMessage(`Failed to load profile: ${error.message}`,true)}}if(updateProfileForm){updateProfileForm.addEventListener("submit",async e=>{e.preventDefault();const fullName=profileNameInput?profileNameInput.value:"";const email=profileEmailInput?profileEmailInput.value:"";const currentPassword=currentPasswordInput?currentPasswordInput.value:"";const newPassword=newPasswordInput?newPasswordInput.value:"";const updatePayload={fullName:fullName,email:email};if(currentPassword&&newPassword){updatePayload.currentPassword=currentPassword;updatePayload.newPassword=newPassword}try{const result=await apiRequest("PUT","/profile",updatePayload);if(result&&result.token){localStorage.setItem("authToken",result.token)}showModalMessage(result.message||"Profile updated successfully!",false);if(currentPasswordInput)currentPasswordInput.value="";if(newPasswordInput)newPasswordInput.value="";loadProfileInfo()}catch(error){console.error("Error updating profile:",error);showModalMessage(`Failed to update profile: ${error.message}`,true)}})}loadProfileInfo()}function handleAdminPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const locationListDiv=document.getElementById("location-list");const userListDiv=document.getElementById("user-list");const newLocationForm=document.getElementById("new-location-form");const inviteAdminForm=document.getElementById("invite-admin-form");const adminLocationSelect=document.getElementById("admin-location-select");const inviteEmployeeForm=document.getElementById("invite-employee-form");const employeeLocationSelect=document.getElementById("employee-location-select");async function loadLocations(){if(!locationListDiv)return;locationListDiv.innerHTML="<p>Loading locations...</p>";try{const locations=await apiRequest("GET","/locations");locationListDiv.innerHTML="";if(locations.length===0){locationListDiv.innerHTML='<p style="color: var(--text-medium);">No locations created yet.</p>';if(adminLocationSelect){adminLocationSelect.innerHTML='<option value="">No locations available</option>';adminLocationSelect.disabled=true}if(employeeLocationSelect){employeeLocationSelect.innerHTML='<option value="">No locations available</option>';employeeLocationSelect.disabled=true}}else{if(adminLocationSelect)adminLocationSelect.disabled=false;if(employeeLocationSelect)employeeLocationSelect.disabled=false;if(adminLocationSelect){adminLocationSelect.innerHTML='<option value="">Select a location</option>';locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;adminLocationSelect.appendChild(option)})}if(employeeLocationSelect){employeeLocationSelect.innerHTML='<option value="">Select a location</option>';locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;employeeLocationSelect.appendChild(option)})}locations.forEach(loc=>{const locDiv=document.createElement("div");locDiv.className="list-item";locDiv.innerHTML=`<span>${loc.location_name} - ${loc.location_address}</span>
                                        <button class="btn-delete" data-type="location" data-id="${loc.location_id}">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                        </button>`;locationListDiv.appendChild(locDiv)})}}catch(error){console.error("Error loading locations:",error);showModalMessage(`Failed to load locations: ${error.message}`,true)}}async function loadUsers(){if(!userListDiv)return;userListDiv.innerHTML="<p>Loading users...</p>";try{const users=await apiRequest("GET","/users");userListDiv.innerHTML="";if(users.length===0){userListDiv.innerHTML='<p style="color: var(--text-medium);">No users invited yet.</p>'}else{users.forEach(user=>{const userDiv=document.createElement("div");userDiv.className="list-item";let userInfo=`${user.full_name} - Role: ${user.role}`;if(user.location_name){userInfo+=` @ ${user.location_name}`}userDiv.innerHTML=`<span>${userInfo}</span>
                                         <button class="btn-delete" data-type="user" data-id="${user.user_id}">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                        </button>`;userListDiv.appendChild(userDiv)})}}catch(error){console.error("Error loading users:",error);userListDiv.innerHTML=`<p style="color: #e74c3c;">Error loading users: ${error.message}</p>`}}document.body.addEventListener("click",async e=>{const targetButton=e.target.closest(".btn-delete");if(targetButton){const id=targetButton.dataset.id;const type=targetButton.dataset.type;const confirmationMessage=`Are you sure you want to delete this ${type}?`;const confirmed=await showConfirmModal(confirmationMessage,"Delete");if(confirmed){try{if(type==="location"){await apiRequest("DELETE",`/locations/${id}`);showModalMessage("Location deleted successfully!",false);loadLocations();loadUsers()}else if(type==="user"){await apiRequest("DELETE",`/users/${id}`);showModalMessage("User deleted successfully!",false);loadUsers()}}catch(error){showModalMessage(`Error deleting ${type}: ${error.message}`,true)}}}});if(newLocationForm){newLocationForm.addEventListener("submit",async e=>{e.preventDefault();const nameInput=document.getElementById("new-location-name");const addressInput=document.getElementById("new-location-address");const location_name=nameInput.value;const location_address=addressInput.value;try{await apiRequest("POST","/locations",{location_name:location_name,location_address:location_address});nameInput.value="";addressInput.value="";showModalMessage("Location created successfully!",false);loadLocations()}catch(error){console.error("Error creating location:",error);showModalMessage(`Error creating location: ${error.message}`,true)}})}if(inviteAdminForm){inviteAdminForm.addEventListener("submit",async e=>{e.preventDefault();const adminName=document.getElementById("admin-name")?document.getElementById("admin-name").value:"";const adminEmail=document.getElementById("admin-email")?document.getElementById("admin-email").value:"";const adminPassword=document.getElementById("admin-password")?document.getElementById("admin-password").value:"";const adminLocationSelectElement=document.getElementById("admin-location-select");const adminLocationId=adminLocationSelectElement?adminLocationSelectElement.value:"";if(!adminLocationId){showModalMessage("Please select a location to assign the admin.",true);return}if(!adminPassword){showModalMessage("Please enter a temporary password for the new admin.",true);return}try{await apiRequest("POST","/invite-admin",{full_name:adminName,email:adminEmail,location_id:adminLocationId,password:adminPassword});if(document.getElementById("admin-name"))document.getElementById("admin-name").value="";if(document.getElementById("admin-email"))document.getElementById("admin-email").value="";if(document.getElementById("admin-password"))document.getElementById("admin-password").value="";if(adminLocationSelectElement)adminLocationSelectElement.value="";showModalMessage(`Admin invite sent to ${adminEmail} for selected location with the provided temporary password.`,false);loadUsers()}catch(error){console.error("Error inviting admin:",error);showModalMessage(`Failed to invite admin: ${error.message}`,true)}})}if(inviteEmployeeForm){inviteEmployeeForm.addEventListener("submit",async e=>{e.preventDefault();const employeeName=document.getElementById("employee-name")?document.getElementById("employee-name").value:"";const employeeEmail=document.getElementById("employee-email")?document.getElementById("employee-email").value:"";const employeePassword=document.getElementById("employee-password")?document.getElementById("employee-password").value:"";const employeePosition=document.getElementById("employee-position")?document.getElementById("employee-position").value:"";const employeeId=document.getElementById("employee-id")?document.getElementById("employee-id").value:"";const employeeLocationSelectElement=document.getElementById("employee-location-select");const employeeLocationId=employeeLocationSelectElement?parseInt(employeeLocationSelectElement.value):"";if(!employeeName||!employeeEmail||!employeePassword||!employeeLocationId){showModalMessage("Full name, email, temporary password, and location are required for new employees.",true);return}try{await apiRequest("POST","/invite-employee",{full_name:employeeName,email:employeeEmail,password:employeePassword,position:employeePosition,employee_id:employeeId,location_id:employeeLocationId});if(document.getElementById("employee-name"))document.getElementById("employee-name").value="";if(document.getElementById("employee-email"))document.getElementById("employee-email").value="";if(document.getElementById("employee-password"))document.getElementById("employee-password").value="";if(document.getElementById("employee-position"))document.getElementById("employee-position").value="";if(document.getElementById("employee-id"))document.getElementById("employee-id").value="";if(employeeLocationSelectElement)employeeLocationSelectElement.value="";showModalMessage(`Employee invite sent to ${employeeEmail} for selected location.`,false);loadUsers()}catch(error){console.error("Error inviting employee:",error);showModalMessage(`Failed to invite employee: ${error.message}`,true)}})}loadLocations();loadUsers()}function handlePricingPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const freePlanBtn=document.getElementById("free-plan-btn");const proPlanBtn=document.getElementById("pro-plan-btn");const enterprisePlanBtn=document.getElementById("enterprise-plan-btn");const stripe=Stripe("pk_test_51Ra4RJG06NHrwsY922jS3wPjF0020WbJ3PjF0020WbJ3PjF0020WbJ3f0L3hW9yTjY00l8Z7zrHY");async function selectPlan(planId){try{const response=await apiRequest("POST","/create-checkout-session",{planId:planId});const{url}=response;window.location.href=url}catch(error){console.error("Error selecting plan:",error);showModalMessage(`Failed to initiate checkout: ${error.message}`,true)}}if(proPlanBtn){proPlanBtn.addEventListener("click",()=>selectPlan("pro"))}if(enterprisePlanBtn){enterprisePlanBtn.addEventListener("click",()=>selectPlan("enterprise"))}if(freePlanBtn){freePlanBtn.addEventListener("click",()=>{showModalMessage("You are currently on the Free plan. To upgrade, choose Pro or Enterprise.",false)})}}function handleSchedulingPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const calendarGrid=document.getElementById("calendar-grid");const currentWeekDisplay=document.getElementById("current-week-display");const prevWeekBtn=document.getElementById("prev-week-btn");const nextWeekBtn=document.getElementById("next-week-btn");const employeeSelect=document.getElementById("employee-select");const locationSelect=document.getElementById("location-select");const createShiftForm=document.getElementById("create-shift-form");const filterEmployeeSelect=document.getElementById("filter-employee-select");const filterLocationSelect=document.getElementById("filter-location-select");const filterStartDate=document.getElementById("filter-start-date");const filterEndDate=document.getElementById("filter-end-date");const applyFiltersBtn=document.getElementById("apply-filters-btn");const clearFiltersBtn=document.getElementById("clear-filters-btn");let currentWeekStart=new Date;function initializeWeek(){const today=new Date;const dayOfWeek=today.getDay();currentWeekStart=new Date(today);currentWeekStart.setDate(today.getDate()-dayOfWeek);currentWeekStart.setHours(0,0,0,0)}async function populateDropdowns(){try{const employees=await apiRequest("GET","/users?filterRole=employee");const locations=await apiRequest("GET","/locations");if(employeeSelect){employeeSelect.innerHTML='<option value="">Select Employee</option>';employees.forEach(emp=>{const option=document.createElement("option");option.value=emp.user_id;option.textContent=emp.full_name;employeeSelect.appendChild(option)})}if(filterEmployeeSelect){filterEmployeeSelect.innerHTML='<option value="">All Employees</option>';employees.forEach(emp=>{const option=document.createElement("option");option.value=emp.user_id;option.textContent=emp.full_name;filterEmployeeSelect.appendChild(option)})}if(locationSelect){locationSelect.innerHTML='<option value="">Select Location</option>';locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;locationSelect.appendChild(option)})}if(filterLocationSelect){filterLocationSelect.innerHTML='<option value="">All Locations</option>';locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;filterLocationSelect.appendChild(option)})}}catch(error){console.error("Error populating dropdowns:",error);showModalMessage(`Failed to load employees or locations: ${error.message}`,true)}}function renderCalendar(schedules=[]){if(!calendarGrid)return;calendarGrid.querySelectorAll(".calendar-day-header:not(:first-child), .calendar-day-cell").forEach(el=>el.remove());const daysOfWeek=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];const currentWeekEndDate=new Date(currentWeekStart);currentWeekEndDate.setDate(currentWeekEndDate.getDate()+6);currentWeekDisplay.textContent=`${currentWeekStart.toLocaleDateString("en-US",{month:"short",day:"numeric"})} - ${currentWeekEndDate.toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"})}`;const dayCells={};for(let i=0;i<7;i++){const date=new Date(currentWeekStart);date.setDate(currentWeekStart.getDate()+i);const dayHeader=document.createElement("div");dayHeader.className="calendar-day-header";dayHeader.textContent=`${daysOfWeek[date.getDay()]} (${date.getMonth()+1}/${date.getDate()})`;dayHeader.style.gridColumn=i+2;dayHeader.style.gridRow=1;calendarGrid.appendChild(dayHeader);const dayCell=document.createElement("div");dayCell.className="calendar-day-cell";dayCell.dataset.date=date.toISOString().split("T")[0];dayCell.style.gridColumn=i+2;dayCell.style.gridRow="2 / span 24";calendarGrid.appendChild(dayCell);dayCells[date.toISOString().split("T")[0]]=dayCell}const timeColumn=document.getElementById("time-column");if(timeColumn&&timeColumn.children.length===0){for(let i=0;i<24;i++){const timeSlot=document.createElement("div");timeSlot.className="calendar-time-slot";const hour=i<10?`0${i}`:`${i}`;timeSlot.textContent=`${hour}:00`;timeColumn.appendChild(timeSlot)}}schedules.forEach(shift=>{const shiftStartTime=new Date(shift.start_time);const shiftEndTime=new Date(shift.end_time);const shiftDate=shiftStartTime.toISOString().split("T")[0];const targetCell=dayCells[shiftDate];if(targetCell){const shiftDiv=document.createElement("div");shiftDiv.className="calendar-shift";const startHour=shiftStartTime.getHours()+shiftStartTime.getMinutes()/60;const endHour=shiftEndTime.getHours()+shiftEndTime.getMinutes()/60;const durationHours=endHour-startHour;const topOffset=startHour*30;const height=durationHours*30;shiftDiv.style.top=`${topOffset}px`;shiftDiv.style.height=`${height}px`;shiftDiv.innerHTML=`<strong>${shift.employee_name}</strong><br>${shiftStartTime.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})} - ${shiftEndTime.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}`;if(shift.notes){shiftDiv.title=shift.notes}const deleteButton=document.createElement("button");deleteButton.className="btn-delete";deleteButton.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>`;deleteButton.onclick=async e=>{e.stopPropagation();const confirmDelete=await showConfirmModal(`Are you sure you want to delete this shift for ${shift.employee_name}?`,"Delete Shift");if(confirmDelete){try{await apiRequest("DELETE",`/schedules/${shift.schedule_id}`);showModalMessage("Shift deleted successfully!",false);loadSchedules()}catch(error){showModalMessage(`Failed to delete shift: ${error.message}`,true)}}};shiftDiv.appendChild(deleteButton);targetCell.appendChild(shiftDiv)}})}async function loadSchedules(){const employeeId=filterEmployeeSelect?filterEmployeeSelect.value:"";const locationId=filterLocationSelect?filterLocationSelect.value:"";const startDate=filterStartDate?filterStartDate.value:"";const endDate=filterEndDate?filterEndDate.value:"";const apiStartDate=currentWeekStart.toISOString().split("T")[0];const apiEndDate=new Date(currentWeekStart);apiEndDate.setDate(currentWeekStart.getDate()+6);const apiEndDateString=apiEndDate.toISOString().split("T")[0];const queryParams=new URLSearchParams({start_date:apiStartDate,end_date:apiEndDateString});if(employeeId)queryParams.append("employee_id",employeeId);if(locationId)queryParams.append("location_id",locationId);if(startDate&&endDate){queryParams.set("start_date",startDate);queryParams.set("end_date",endDate)}try{const schedules=await apiRequest("GET",`/schedules?${queryParams.toString()}`);renderCalendar(schedules)}catch(error){console.error("Error loading schedules:",error);showModalMessage(`Failed to load schedules: ${error.message}`,true);renderCalendar([])}}if(prevWeekBtn){prevWeekBtn.addEventListener("click",()=>{currentWeekStart.setDate(currentWeekStart.getDate()-7);loadSchedules()})}if(nextWeekBtn){nextWeekBtn.addEventListener("click",()=>{currentWeekStart.setDate(currentWeekStart.getDate()+7);loadSchedules()})}if(createShiftForm){createShiftForm.addEventListener("submit",async e=>{e.preventDefault();const employeeId=document.getElementById("employee-select").value;const locationId=document.getElementById("location-select").value;const startTime=document.getElementById("start-time-input").value;const endTime=document.getElementById("end-time-input").value;const notes=document.getElementById("notes-input").value;try{await apiRequest("POST","/schedules",{employee_id:employeeId,location_id:locationId,start_time:startTime,end_time:endTime,notes:notes});showModalMessage("Shift created successfully!",false);createShiftForm.reset();loadSchedules()}catch(error){console.error("Error creating shift:",error);showModalMessage(`Failed to create shift: ${error.message}`,true)}})}if(applyFiltersBtn){applyFiltersBtn.addEventListener("click",loadSchedules)}if(clearFiltersBtn){clearFiltersBtn.addEventListener("click",()=>{if(filterEmployeeSelect)filterEmployeeSelect.value="";if(filterLocationSelect)filterLocationSelect.value="";if(filterStartDate)filterStartDate.value="";if(filterEndDate)filterEndDate.value="";initializeWeek();loadSchedules()})}initializeWeek();populateDropdowns();loadSchedules()}function handleHiringPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const createJobPostingForm=document.getElementById("create-job-posting-form");const jobPostingList=document.getElementById("job-posting-list");const jobPostingLocationSelect=document.getElementById("job-posting-location-select");const applicantList=document.getElementById("applicant-list");const filterApplicantJobPostingSelect=document.getElementById("filter-applicant-job-posting-select");const filterApplicantStatus=document.getElementById("filter-applicant-status");const filterApplicantLocationSelect=document.getElementById("filter-applicant-location-select");const applyApplicantFiltersBtn=document.getElementById("apply-applicant-filters-btn");const clearApplicantFiltersBtn=document.getElementById("clear-applicant-filters-btn");const shareLinkModalOverlay=document.getElementById("share-link-modal-overlay");const shareJobLinkInput=document.getElementById("share-job-link-input");const shareJobEmbedCodeInput=document.getElementById("share-job-embed-code-input");const copyLinkBtn=document.getElementById("copy-link-btn");const copyEmbedBtn=document.getElementById("copy-embed-btn");const shareLinkModalCloseButton=document.getElementById("share-link-modal-close-button");async function populateLocationDropdowns(){try{const locations=await apiRequest("GET","/locations");const defaultOption='<option value="">Company Wide (All Locations)</option>';if(jobPostingLocationSelect){jobPostingLocationSelect.innerHTML=defaultOption;locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;jobPostingLocationSelect.appendChild(option)})}if(filterApplicantLocationSelect){filterApplicantLocationSelect.innerHTML=defaultOption;locations.forEach(loc=>{const option=document.createElement("option");option.value=loc.location_id;option.textContent=loc.location_name;filterApplicantLocationSelect.appendChild(option)})}}catch(error){console.error("Error populating location dropdowns:",error);showModalMessage(`Failed to load locations: ${error.message}`,true)}}async function populateJobPostingDropdown(){try{const jobPostings=await apiRequest("GET","/job-postings");const defaultOption='<option value="">All Job Postings</option>';if(filterApplicantJobPostingSelect){filterApplicantJobPostingSelect.innerHTML=defaultOption;jobPostings.forEach(job=>{const option=document.createElement("option");option.value=job.job_posting_id;option.textContent=job.title;filterApplicantJobPostingSelect.appendChild(option)})}}catch(error){console.error("Error populating job posting dropdown:",error);showModalMessage(`Failed to load job postings for filter: ${error.message}`,true)}}async function loadJobPostings(){if(!jobPostingList)return;jobPostingList.innerHTML='<p style="color: var(--text-medium);">Loading job postings...</p>';try{const postings=await apiRequest("GET","/job-postings");jobPostingList.innerHTML="";if(postings.length===0){jobPostingList.innerHTML='<p style="color: var(--text-medium);">No job postings found.</p>'}else{postings.forEach(posting=>{const jobCard=document.createElement("div");jobCard.className="job-posting-item";jobCard.innerHTML=`
                        <h4>${posting.title}</h4>
                        <p><strong>Description:</strong> ${posting.description.substring(0,100)}...</p>
                        ${posting.requirements?`<p><strong>Requirements:</strong> ${posting.requirements.substring(0,100)}...</p>`:""}
                        <p><strong>Status:</strong> ${posting.status}</p>
                        <p><strong>Posted:</strong> ${new Date(posting.created_date).toLocaleDateString()}</p>
                        <div class="actions">
                            <button class="btn btn-secondary btn-sm edit-job-btn" data-id="${posting.job_posting_id}">Edit</button>
                            <button class="btn share-btn" data-id="${posting.job_posting_id}" data-title="${posting.title}">Share Link</button>
                            <button class="btn-delete" data-type="job-posting" data-id="${posting.job_posting_id}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                            </button>
                        </div>
                    `;jobPostingList.appendChild(jobCard)});attachJobPostingListeners()}}catch(error){console.error("Error loading job postings:",error);showModalMessage(`Failed to load job postings: ${error.message}`,true)}}function attachJobPostingListeners(){jobPostingList.querySelectorAll(".btn-delete").forEach(button=>{button.onclick=async e=>{e.stopPropagation();const id=button.dataset.id;const confirmDelete=await showConfirmModal("Are you sure you want to delete this job posting? This will also remove associated applicants.","Delete Job Posting");if(confirmDelete){try{await apiRequest("DELETE",`/job-postings/${id}`);showModalMessage("Job posting deleted successfully!",false);loadJobPostings();populateJobPostingDropdown();loadApplicants()}catch(error){showModalMessage(`Failed to delete job posting: ${error.message}`,true)}}}});jobPostingList.querySelectorAll(".share-btn").forEach(button=>{button.onclick=e=>{e.stopPropagation();const id=button.dataset.id;const title=button.dataset.title;const directLink=`http://localhost:8000/apply.html?job_id=${id}`;const embedCode=`<iframe src="http://localhost:8000/embed-job-apply.html?job_id=${id}" width="600" height="400" frameborder="0"></iframe>`;if(shareJobLinkInput)shareJobLinkInput.value=directLink;if(shareJobEmbedCodeInput)shareJobEmbedCodeInput.value=embedCode;if(shareLinkModalOverlay)shareLinkModalOverlay.style.display="flex"}});if(shareLinkModalCloseButton){shareLinkModalCloseButton.onclick=()=>{if(shareLinkModalOverlay)shareLinkModalOverlay.style.display="none"}}if(copyLinkBtn){copyLinkBtn.onclick=()=>{if(shareJobLinkInput){shareJobLinkInput.select();document.execCommand("copy");showModalMessage("Direct link copied to clipboard!",false)}}}if(copyEmbedBtn){copyEmbedBtn.onclick=()=>{if(shareJobEmbedCodeInput){shareJobEmbedCodeInput.select();document.execCommand("copy");showModalMessage("Embed code copied to clipboard!",false)}}}jobPostingList.querySelectorAll(".edit-job-btn").forEach(button=>{button.onclick=e=>{e.stopPropagation();const id=button.dataset.id;showModalMessage(`Edit functionality for Job Posting ID: ${id} is coming soon!`,false)}})}async function loadApplicants(){if(!applicantList)return;applicantList.innerHTML='<p style="color: var(--text-medium);">Loading applicants...</p>';const params=new URLSearchParams;if(filterApplicantJobPostingSelect&&filterApplicantJobPostingSelect.value){params.append("job_posting_id",filterApplicantJobPostingSelect.value)}if(filterApplicantStatus&&filterApplicantStatus.value){params.append("status",filterApplicantStatus.value)}if(filterApplicantLocationSelect&&filterApplicantLocationSelect.value){params.append("location_id",filterApplicantLocationSelect.value)}try{const applicants=await apiRequest("GET",`/applicants?${params.toString()}`);applicantList.innerHTML="";if(applicants.length===0){applicantList.innerHTML='<p style="color: var(--text-medium);">No applicants found matching criteria.</p>'}else{applicants.forEach(applicant=>{const applicantCard=document.createElement("div");applicantCard.className="applicant-item";applicantCard.innerHTML=`
                        <h4>${applicant.full_name}</h4>
                        <p><strong>Email:</strong> ${applicant.email}</p>
                        <p><strong>Phone:</strong> ${applicant.phone_number||"N/A"}</p>
                        <p><strong>Job Applied:</strong> ${applicant.job_title_name||"N/A"}</p>
                        <p><strong>Status:</strong> ${applicant.status}</p>
                        <p><strong>Applied:</strong> ${new Date(applicant.application_date).toLocaleDateString()}</p>
                        <div class="actions">
                            <button class="btn btn-secondary btn-sm edit-applicant-btn" data-id="${applicant.applicant_id}">Edit Status</button>
                            ${applicant.resume_url?`<a href="${applicant.resume_url}" target="_blank" class="btn btn-secondary btn-sm">View Resume</a>`:""}
                            <button class="btn-delete" data-type="applicant" data-id="${applicant.applicant_id}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                            </button>
                        </div>
                    `;applicantList.appendChild(applicantCard)});attachApplicantListeners()}}catch(error){console.error("Error loading applicants:",error);showModalMessage(`Failed to load applicants: ${error.message}`,true)}}function attachApplicantListeners(){applicantList.querySelectorAll(".btn-delete").forEach(button=>{button.onclick=async e=>{e.stopPropagation();const id=button.dataset.id;const confirmDelete=await showConfirmModal("Are you sure you want to delete this applicant?","Delete Applicant");if(confirmDelete){try{await apiRequest("DELETE",`/applicants/${id}`);showModalMessage("Applicant deleted successfully!",false);loadApplicants()}catch(error){showModalMessage(`Failed to delete applicant: ${error.message}`,true)}}}});applicantList.querySelectorAll(".edit-applicant-btn").forEach(button=>{button.onclick=e=>{e.stopPropagation();const id=button.dataset.id;showModalMessage(`Edit Status functionality for Applicant ID: ${id} is coming soon!`,false)}})}if(createJobPostingForm){createJobPostingForm.addEventListener("submit",async e=>{e.preventDefault();const title=document.getElementById("job-title-input").value;const description=document.getElementById("job-description-input").value;const requirements=document.getElementById("job-requirements-input").value;const locationId=document.getElementById("job-posting-location-select").value;try{await apiRequest("POST","/job-postings",{title:title,description:description,requirements:requirements,location_id:locationId===""?null:parseInt(locationId)});showModalMessage("Job posting created successfully!",false);createJobPostingForm.reset();loadJobPostings();populateJobPostingDropdown()}catch(error){console.error("Error creating job posting:",error);showModalMessage(`Failed to create job posting: ${error.message}`,true)}})}if(applyApplicantFiltersBtn){applyApplicantFiltersBtn.addEventListener("click",loadApplicants)}if(clearApplicantFiltersBtn){clearApplicantFiltersBtn.addEventListener("click",()=>{if(filterApplicantJobPostingSelect)filterApplicantJobPostingSelect.value="";if(filterApplicantStatus)filterApplicantStatus.value="";if(filterApplicantLocationSelect)filterApplicantLocationSelect.value="";loadApplicants()})}populateLocationDropdowns();populateJobPostingDropdown();loadJobPostings();loadApplicants()}function handleDocumentsPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const uploadDocumentForm=document.getElementById("upload-document-form");const documentListDiv=document.getElementById("document-list");function isImageFile(fileType){return fileType.startsWith("image/")}async function loadDocuments(){if(!documentListDiv)return;documentListDiv.innerHTML='<p style="color: var(--text-medium);">Loading documents...</p>';try{const documents=await apiRequest("GET","/documents");documentListDiv.innerHTML="";if(documents.length===0){documentListDiv.innerHTML='<p style="color: var(--text-medium);">No documents uploaded yet.</p>'}else{documents.forEach(doc=>{const docCard=document.createElement("div");docCard.className="document-item";let fileContentHtml="";if(isImageFile(doc.file_type)){fileContentHtml=`<img src="${doc.file_url}" alt="${doc.title}" style="max-width: 100%; height: auto; border-radius: 4px; margin-bottom: 10px;" loading="lazy">`}else{fileContentHtml=`<p>File: <a href="${doc.file_url}" target="_blank" class="btn-download">${doc.file_name}</a></p>`}docCard.innerHTML=`
                        ${fileContentHtml}
                        <h4>${doc.title}</h4>
                        <p><strong>File Type:</strong> ${doc.file_type}</p>
                        <p><strong>Uploaded On:</strong> ${new Date(doc.upload_date).toLocaleDateString()}</p>
                        ${doc.description?`<p><strong>Description:</strong> ${doc.description}</p>`:""}
                        <div class="actions">
                            ${!isImageFile(doc.file_type)?`<a href="${doc.file_url}" target="_blank" class="btn-download">Download</a>`:""}
                            <button class="btn-delete" data-id="${doc.document_id}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                            </button>
                        </div>
                    `;documentListDiv.appendChild(docCard)});attachDocumentListeners()}}catch(error){console.error("Error loading documents:",error);showModalMessage(`Failed to load documents: ${error.message}`,true)}}function attachDocumentListeners(){documentListDiv.querySelectorAll(".btn-delete").forEach(button=>{button.onclick=async e=>{e.stopPropagation();const id=button.dataset.id;const confirmDelete=await showConfirmModal("Are you sure you want to delete this document?","Delete Document");if(confirmDelete){try{await apiRequest("DELETE",`/documents/${id}`);showModalMessage("Document deleted successfully!",false);loadDocuments()}catch(error){showModalMessage(`Failed to delete document: ${error.message}`,true)}}}})}if(uploadDocumentForm){uploadDocumentForm.addEventListener("submit",async e=>{e.preventDefault();const title=document.getElementById("document-title").value;const fileInput=document.getElementById("document-file");const description=document.getElementById("document-description").value;const file=fileInput.files[0];if(!file){showModalMessage("Please select a file to upload.",true);return}const mockFileUploadResponse={file_url:`https://placehold.co/300x200/C86DD7/ffffff?text=${encodeURIComponent(file.name)}`,file_type:file.type||"application/octet-stream"};if(!isImageFile(file.type)){mockFileUploadResponse.file_url=`https://example.com/uploads/${Date.now()}-${file.name}`}try{await apiRequest("POST","/documents",{title:title,file_name:file.name,file_type:mockFileUploadResponse.file_type,file_url:mockFileUploadResponse.file_url,description:description});showModalMessage("Document uploaded and saved successfully!",false);uploadDocumentForm.reset();loadDocuments()}catch(error){console.error("Error uploading document:",error);showModalMessage(`Failed to upload document: ${error.message}`,true)}})}loadDocuments()}