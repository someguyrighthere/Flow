const API_BASE_URL="https://flow-gz1r.onrender.com";let stripe;if(typeof Stripe!=="undefined"){stripe=Stripe("pk_live_51Ra4RJG06NHrwsY9lqejmXiGn8DAGzwlrqTuarPZzIb3p1yIPchUaPGAXuKe7yJD73UCvQ3ydKzoclwRi0DiIrbP00xbXj54td")}else{console.warn("Stripe.js not loaded. Stripe functionalities will not work on this page.")}function showModalMessage(message,isError=false){const modalOverlay=document.getElementById("message-modal-overlay");const modalMessage=document.getElementById("modal-message-text");const modalCloseButton=document.getElementById("modal-close-button");if(modalOverlay&&modalMessage&&modalCloseButton){modalMessage.textContent=message;modalMessage.style.color=isError?"#ff8a80":"var(--text-light)";modalOverlay.style.display="flex";modalOverlay.style.zIndex="1000";modalCloseButton.onclick=()=>{modalOverlay.style.display="none"};modalOverlay.onclick=event=>{if(event.target===modalOverlay){modalOverlay.style.display="none"}}}else{console.error("Modal elements not found for showModalMessage. Message:",message);if(isError){console.error(`ERROR: ${message}`)}else{console.log(`MESSAGE: ${message}`)}}}function showConfirmModal(message,confirmButtonText="Confirm"){return new Promise(resolve=>{const confirmModalOverlay=document.getElementById("confirm-modal-overlay");const confirmModalMessage=document.getElementById("confirm-modal-message");const modalConfirmButton=document.getElementById("modal-confirm");const modalCancelButton=document.getElementById("modal-cancel");if(!confirmModalOverlay||!confirmModalMessage||!modalConfirmButton||!modalCancelButton){console.error("Confirmation modal elements not found. Falling back to native confirm.");resolve(window.confirm(message));return}confirmModalMessage.innerHTML=message;modalConfirmButton.textContent=confirmButtonText;confirmModalOverlay.style.display="flex";const handleConfirm=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(true)};const handleCancel=()=>{confirmModalOverlay.style.display="none";modalConfirmButton.removeEventListener("click",handleConfirm);modalCancelButton.removeEventListener("click",handleCancel);resolve(false)};modalConfirmButton.addEventListener("click",handleConfirm);modalCancelButton.addEventListener("click",handleCancel);confirmModalOverlay.onclick=event=>{if(event.target===confirmModalOverlay){handleCancel()}}})}function setupSettingsDropdown(){const settingsButton=document.getElementById("settings-button");const settingsDropdown=document.getElementById("settings-dropdown");const logoutButton=document.getElementById("logout-button");const upgradePlanLink=document.getElementById("upgrade-plan-link");if(settingsButton&&settingsDropdown){settingsButton.addEventListener("click",async event=>{event.stopPropagation();settingsDropdown.style.display=settingsDropdown.style.display==="block"?"none":"block";if(settingsDropdown.style.display==="block"&&upgradePlanLink){if(localStorage.getItem("authToken")){try{const profile=await apiRequest("GET","/profile");if(profile&&profile.plan_id==="free"){upgradePlanLink.style.display="block"}else{upgradePlanLink.style.display="none"}}catch(error){console.error("Error fetching profile for upgrade link:",error);upgradePlanLink.style.display="none"}}else{upgradePlanLink.style.display="none"}}});document.addEventListener("click",event=>{if(!settingsButton.contains(event.target)&&!settingsDropdown.contains(event.target)){settingsDropdown.style.display="none"}})}if(logoutButton){logoutButton.addEventListener("click",()=>{localStorage.removeItem("authToken");localStorage.removeItem("userRole");window.location.href="login.html"})}}async function apiRequest(method,path,body=null,isFormData=false,onProgress=null,expectBlobResponse=false){const token=localStorage.getItem("authToken");const endpoint=`${API_BASE_URL}${path}`;if(isFormData){return new Promise((resolve,reject)=>{const xhr=new XMLHttpRequest;xhr.open(method,endpoint);if(token){xhr.setRequestHeader("Authorization",`Bearer ${token}`)}if(onProgress&&xhr.upload){xhr.upload.addEventListener("progress",onProgress)}xhr.onload=function(){if(xhr.status>=200&&xhr.status<300){if(xhr.status===204||xhr.status===200&&xhr.responseText.length===0){resolve({})}else{try{const responseData=JSON.parse(xhr.responseText);resolve(responseData)}catch(e){console.warn("API response was not JSON, resolving with success status:",xhr.responseText);resolve({message:"Operation successful",rawResponse:xhr.responseText})}}}else if(xhr.status===401||xhr.status===403){localStorage.removeItem("authToken");localStorage.removeItem("userRole");window.location.href="login.html?sessionExpired=true";reject(new Error("Authentication token missing or invalid."))}else{try{const errorData=JSON.parse(xhr.responseText);reject(new Error(errorData.error||`HTTP error! Status: ${xhr.status}`))}catch(e){reject(new Error(`HTTP error! Status: ${xhr.status} - ${xhr.statusText||"Unknown Error"}`))}}};xhr.onerror=function(){reject(new Error("Network error or request failed. Please check your internet connection."))};xhr.send(body)})}else{const options={method:method,headers:{}};if(token){options.headers["Authorization"]=`Bearer ${token}`}if(body&&(method==="POST"||method==="PUT")){options.headers["Content-Type"]="application/json";options.body=JSON.stringify(body)}const response=await fetch(endpoint,options);if(response.status===401||response.status===403){localStorage.removeItem("authToken");localStorage.removeItem("userRole");window.location.href="login.html?sessionExpired=true";throw new Error("Authentication token missing or invalid.")}if(!response.ok){try{const errorData=await response.json();throw new Error(errorData.error||`HTTP error! Status: ${response.status}`)}catch(e){throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText||"Unknown Error"}`)}}if(expectBlobResponse){return response.blob()}if(response.status===204||response.status===200&&response.headers.get("content-length")==="0"){return null}return response.json()}}function handleLoginPage(){const loginForm=document.getElementById("login-form");if(!loginForm){return}const urlParams=new URLSearchParams(window.location.search);if(urlParams.has("sessionExpired")&&urlParams.get("sessionExpired")==="true"){const errorMessageDiv=document.getElementById("error-message");if(errorMessageDiv){errorMessageDiv.textContent="Your session has expired or is invalid. Please log in again.";errorMessageDiv.classList.add("visible");errorMessageDiv.setAttribute("aria-hidden","false")}urlParams.delete("sessionExpired");window.history.replaceState({},document.title,window.location.pathname+(urlParams.toString()?"?"+urlParams.toString():""))}loginForm.addEventListener("submit",async e=>{e.preventDefault();const emailInput=document.getElementById("email");const passwordInput=document.getElementById("password");const email=emailInput.value.trim();const password=passwordInput.value;const errorMessage=document.getElementById("error-message");if(errorMessage){errorMessage.textContent="";errorMessage.classList.remove("visible");errorMessage.setAttribute("aria-hidden","true")}if(!email||!password){console.log("Login Validation: Email or password empty.");if(errorMessage){errorMessage.textContent="Email and password are required.";errorMessage.classList.add("visible");errorMessage.setAttribute("aria-hidden","false")}return}const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!emailRegex.test(email)){console.log("Login Validation: Invalid email format.");if(errorMessage){errorMessage.textContent="Please enter a valid email address.";errorMessage.classList.add("visible");errorMessage.setAttribute("aria-hidden","false")}return}if(password.length<6){console.log("Login Validation: Password too short.");if(errorMessage){errorMessage.textContent="Password must be at least 6 characters long.";errorMessage.classList.add("visible");errorMessage.setAttribute("aria-hidden","false")}return}try{const data=await apiRequest("POST","/login",{email:email,password:password});localStorage.setItem("authToken",data.token);localStorage.setItem("userRole",data.role);if(data.role==="super_admin"||data.role==="location_admin"){window.location.href="suite-hub.html"}else{window.location.href="new-hire-view.html"}}catch(error){console.error("Login API error:",error);if(errorMessage){errorMessage.textContent=`Login Failed: ${error.message}`;errorMessage.classList.add("visible");errorMessage.setAttribute("aria-hidden","false")}showModalMessage(`Login Failed: ${error.message}`,true)}})}function handleRegisterPage(){const registerForm=document.getElementById("register-form");if(!registerForm){return}registerForm.addEventListener("submit",async e=>{e.preventDefault();const companyNameInput=document.getElementById("company-name");const fullNameInput=document.getElementById("full-name");const emailInput=document.getElementById("email");const passwordInput=document.getElementById("password");const errorMessage=document.getElementById("error-message");const company_name=companyNameInput.value.trim();const full_name=fullNameInput.value.trim();const email=emailInput.value.trim();const password=passwordInput.value;errorMessage.textContent="";errorMessage.classList.remove("visible");errorMessage.setAttribute("aria-hidden","true");const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!company_name||!full_name||!email||!password||password.length<6||!emailRegex.test(email)){errorMessage.textContent="Please fill all fields correctly. Password must be at least 6 characters and email valid.";errorMessage.classList.add("visible");return}try{const data=await apiRequest("POST","/register",{company_name:company_name,full_name:full_name,email:email,password:password});showModalMessage("Account created successfully! Please log in.",false);companyNameInput.value="";fullNameInput.value="";emailInput.value="";passwordInput.value="";setTimeout(()=>{window.location.href="login.html"},2e3)}catch(error){console.error("Registration API error:",error);if(errorMessage){errorMessage.textContent=`Registration Failed: ${error.message}`;errorMessage.classList.add("visible");errorMessage.setAttribute("aria-hidden","false")}showModalMessage(`Registration Failed: ${error.message}`,true)}})}function handleSuiteHubPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const urlParams=new URLSearchParams(window.location.search);const paymentStatus=urlParams.get("payment");const sessionId=urlParams.get("session_id");if(paymentStatus==="success"){showModalMessage("Payment successful! Your subscription has been updated.",false);history.replaceState({},document.title,window.location.pathname)}else if(paymentStatus==="cancelled"){showModalMessage("Payment cancelled. You can try again or choose another plan.",true);history.replaceState({},document.title,window.location.pathname)}}function handleAccountPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const displayProfileName=document.getElementById("display-profile-name");const displayProfileEmail=document.getElementById("display-profile-email");const profileNameInput=document.getElementById("profile-name");const profileEmailInput=document.getElementById("profile-email");const updateProfileForm=document.getElementById("update-profile-form");const currentPasswordInput=document.getElementById("current-password");const newPasswordInput=document.getElementById("new-password");async function loadProfileInfo(){try{const profile=await apiRequest("GET","/profile");if(displayProfileName)displayProfileName.textContent=profile.fullName||"N/A";if(displayProfileEmail)displayProfileEmail.textContent=profile.email||"N/A";if(profileNameInput)profileNameInput.value=profile.fullName||"";if(profileEmailInput)profileEmailInput.value=profile.email||""}catch(error){console.error("Error loading profile info:",error);showModalMessage(`Failed to load profile: ${error.message}`,true)}}if(updateProfileForm){updateProfileForm.addEventListener("submit",async e=>{e.preventDefault();const fullName=profileNameInput?profileNameInput.value:"";const email=profileEmailInput?profileEmailInput.value:"";const currentPassword=currentPasswordInput?currentPasswordInput.value:"";const newPassword=newPasswordInput?newPasswordInput.value:"";const updatePayload={fullName:fullName,email:email};if(currentPassword&&newPassword){updatePayload.currentPassword=currentPassword;updatePayload.newPassword=newPassword}try{const result=await apiRequest("PUT","/profile",updatePayload);if(result&&result.token){localStorage.setItem("authToken",result.token)}showModalMessage(result.message||"Profile updated successfully!",false);if(currentPasswordInput)currentPasswordInput.value="";if(newPasswordInput)newPasswordInput.value="";loadProfileInfo()}catch(error){console.error("Error updating profile:",error);showModalMessage(`Failed to update profile: ${error.message}`,true)}})}loadProfileInfo()}function handleAdminPage(){if(!localStorage.getItem("authToken")){window.location.href="login.html";return}const locationListDiv=document.getElementById("location-list");const userListDiv=document.getElementById("user-list");const newLocationForm=document.getElementById("new-location-form");const inviteAdminForm=document.getElementById("invite-admin-form");const inviteEmployeeForm=document.getElementById("invite-employee-form");const adminLocationSelect=document.getElementById("admin-location-select");const employeeLocationSelect=document.getElementById("employee-location-select");async function loadLocations(){if(!locationListDiv){return}locationListDiv.innerHTML="<p>Loading locations...</p>";try{const locations=await apiRequest("GET","/locations");locationListDiv.innerHTML="";if(locations.length===0){locationListDiv.innerHTML='<p style="color: var(--text-medium);">No locations created yet.</p>';if(adminLocationSelect){adminLocationSelect.innerHTML='<option value="">Select a location</option>';adminLocationSelect.disabled=true}if(employeeLocationSelect){employeeLocationSelect.innerHTML='<option value="">Select a location</option>';employeeLocationSelect.disabled=true}}else{if(adminLocationSelect)adminLocationSelect.disabled=false;if(employeeLocationSelect)employeeLocationSelect.disabled=false;locations.forEach(loc=>{const locDiv=document.createElement("div");locDiv.className="list-item";locDiv.innerHTML=`<span>${loc.location_name} - ${loc.location_address}</span>
                                        <button class="btn-delete" data-type="location" data-id="${loc.location_id}">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 10 0 0 1-1 1H13v9a2 10 0 0 1-2 2H5a2 10 0 0 1-2-2V4h-.5a1 10 0 0 1-1-1V2a1 10 0 0 1 1-1H6a1 10 0 0 1 1-1h2a1 10 0 0 1 1 1h3.5a1 10 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 10 0 0 0 1 1h6a1 10 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                        </button>`;locDiv.addEventListener("click",e=>{if(!e.target.closest(".btn-delete")){showModalMessage(`Location: ${loc.location_name} (ID: ${loc.location_id}) - Address: ${loc.location_address}`,false)}});locationListDiv.appendChild(locDiv)});const locationOptionsHtml=locations.map(loc=>`<option value="${loc.location_id}">${loc.location_name}</option>`).join("");if(adminLocationSelect){adminLocationSelect.innerHTML=`<option value="">Select a location</option>${locationOptionsHtml}`}if(employeeLocationSelect){employeeLocationSelect.innerHTML=`<option value="">Select a location</option>${locationOptionsHtml}`}}}catch(error){console.error("Error loading locations:",error);showModalMessage(`Failed to load locations: ${error.message}`,true)}}async function loadUsers(){if(!userListDiv)return;userListDiv.innerHTML="<p>Loading users...</p>";try{const users=await apiRequest("GET","/users");userListDiv.innerHTML="";if(users.length===0){userListDiv.innerHTML='<p style="color: var(--text-medium);">No users invited yet.</p>'}else{users.forEach(user=>{const userDiv=document.createElement("div");userDiv.className="list-item";let userInfo=`${user.full_name} - Role: ${user.role}`;if(user.location_name){userInfo+=` @ ${user.location_name}`}userDiv.innerHTML=`<span>${userInfo}</span>
                                         <button class="btn-delete" data-type="user" data-id="${user.user_id}">
                                             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/><path d="M14.5 3a1 10 0 0 1-1 1H13v9a2 10 0 0 1-2 2H5a2 10 0 0 1-2-2V4h-.5a1 10 0 0 1-1-1V2a1 10 0 0 1 1-1H6a1 10 0 0 1 1-1h2a1 10 0 0 1 1 1h3.5a1 10 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 10 0 0 0 1 1h6a1 10 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/></svg>
                                         </button>`;userDiv.appendChild(userDiv)})}}catch(error){console.error("Error loading users:",error);userListDiv.innerHTML=`<p style="color: #e74c3c;">Error loading users: ${error.message}</p>`}}document.body.addEventListener("click",async e=>{const targetButton=e.target.closest(".btn-delete");if(targetButton){console.log("handleAdminPage: Delete button clicked.");const id=targetButton.dataset.id;const type=targetButton.dataset.type;const confirmationMessage=`Are you sure you want to delete this ${type}? This action cannot be undone.`;const confirmed=await showConfirmModal(confirmationMessage,"Delete");if(confirmed){try{console.log(`handleAdminPage: Deleting ${type} with ID: ${id}.`);if(type==="location"){await apiRequest("DELETE",`/locations/${id}`);showModalMessage("Location deleted successfully!",false);loadLocations();loadUsers()}else if(type==="user"){await apiRequest("DELETE",`/users/${id}`);showModalMessage("User deleted successfully!",false);loadUsers()}console.log(`handleAdminPage: ${type} deleted successfully.`)}catch(error){showModalMessage(`Error deleting ${type}: ${error.message}`,true)}}}});if(newLocationForm){console.log("handleAdminPage: New location form found, attaching listener.");newLocationForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: New location form submitted.");const nameInput=document.getElementById("new-location-name");const addressInput=document.getElementById("new-location-address");const location_name=nameInput.value.trim();const location_address=addressInput.value.trim();try{console.log("handleAdminPage: Creating location via API.");await apiRequest("POST","/locations",{location_name:location_name,location_address:location_address});nameInput.value="";addressInput.value="";showModalMessage("Location created successfully!",false);console.log("handleAdminPage: Location created, reloading lists.");loadLocations()}catch(error){console.error("Error creating location:",error);showModalMessage(`Error creating location: ${error.message}`,true)}})}if(inviteAdminForm){console.log("handleAdminPage: Invite admin form found, attaching listener.");inviteAdminForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: Invite admin form submitted.");const adminName=document.getElementById("admin-name")?document.getElementById("admin-name").value.trim():"";const adminEmail=document.getElementById("admin-email")?document.getElementById("admin-email").value.trim():"";const adminPassword=document.getElementById("admin-password")?document.getElementById("admin-password").value:"";const adminLocationSelectElement=document.getElementById("admin-location-select");const adminLocationId=adminLocationSelectElement?adminLocationSelectElement.value:"";if(!adminName||!adminEmail||!adminPassword||adminPassword.length<6||!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(adminEmail)){showModalMessage("Please provide a full name, valid email, and a password (min 6 chars) for the new admin.",true);return}if(!adminLocationId){showModalMessage("Please select a location to assign the admin.",true);return}try{console.log("handleAdminPage: Inviting admin via API.");await apiRequest("POST","/invite-admin",{full_name:adminName,email:adminEmail,location_id:parseInt(adminLocationId),password:adminPassword});if(document.getElementById("admin-name"))document.getElementById("admin-name").value="";if(document.getElementById("admin-email"))document.getElementById("admin-email").value="";if(document.getElementById("admin-password"))document.getElementById("admin-password").value="";if(adminLocationSelectElement)adminLocationSelectElement.value="";showModalMessage(`Admin invite sent to ${adminEmail} for selected location with the provided temporary password.`,false);console.log("handleAdminPage: Admin invited, reloading users.");loadUsers()}catch(error){showModalMessage(`Error inviting admin: ${error.message}`,true)}})}if(inviteEmployeeForm){console.log("handleAdminPage: Invite employee form found, attaching listener.");inviteEmployeeForm.addEventListener("submit",async e=>{e.preventDefault();console.log("handleAdminPage: Invite employee form submitted.");const employeeName=document.getElementById("employee-name")?document.getElementById("employee-name").value.trim():"";const employeeEmail=document.getElementById("employee-email")?document.getElementById("employee-email").value.trim():"";const employeePassword=document.getElementById("employee-password")?document.getElementById("employee-password").value:"";const employeePosition=document.getElementById("employee-position")?document.getElementById("employee-position").value.trim():"";const employeeId=document.getElementById("employee-id")?document.getElementById("employee-id").value.trim():null;const employeeLocationSelectElement=document.getElementById("employee-location-select");const employeeLocationId=employeeLocationSelectElement?employeeLocationSelectElement.value:"";if(!employeeName||!employeeEmail||!employeePassword||employeePassword.length<6||!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(employeeEmail)){showModalMessage("Full name, valid email, and a password (min 6 chars) are required for employee invitation.",true);return}const locationIdToSend=employeeLocationId?parseInt(employeeLocationId):null;const employeeIdToSend=employeeId?isNaN(parseInt(employeeId))?employeeId:parseInt(employeeId):null;try{console.log("handleAdminPage: Inviting employee via API.");await apiRequest("POST","/invite-employee",{full_name:employeeName,email:employeeEmail,password:employeePassword,position:employeePosition||null,employee_id:employeeIdToSend,location_id:locationIdToSend});if(document.getElementById("employee-name"))document.getElementById("employee-name").value="";if(document.getElementById("employee-email"))document.getElementById("employee-email").value="";if(document.getElementById("employee-password"))document.getElementById("employee-password").value="";if(document.getElementById("employee-position"))document.getElementById("employee-position").value="";if(document.getElementById("employee-id"))document.getElementById("employee-id").value="";if(employeeLocationSelectElement)employeeLocationSelectElement.value="";showModalMessage(`Employee invite sent to ${employeeEmail} with the provided temporary password.`,false);console.log("handleAdminPage: Employee invited, reloading users.");loadUsers()}catch(error){showModalMessage(`Error inviting employee: ${error.message}`,true)}})}loadLocations();loadUsers()}