{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"filename\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\server.test.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"_exploded\":true,\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$47\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$48\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.27.4:development":{"value":{"code":"\"use strict\";\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// --- Imports ---\nvar express = require('express');\nvar sqlite3 = require('sqlite3').verbose();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar cors = require('cors'); // Import cors\nvar path = require('path');\nvar csv = require('csv-parser'); // For CSV parsing\nvar _require = require('stream'),\n  Readable = _require.Readable; // For creating a readable stream from a string\nvar rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\nvar morgan = require('morgan'); // Import morgan for request logging\n\n// Load environment variables from .env file in development\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\n  require('dotenv').config();\n}\n\n// Import the Stripe library and initialize it with your secret key\n// Use process.env.STRIPE_SECRET_KEY for production\nvar stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\n\n// --- App Initialization ---\nvar app = express();\n\n// Configure CORS for production environment\nvar allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\n\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n  allowedOrigins.push('null');\n}\nvar corsOptions = {\n  origin: function origin(_origin, callback) {\n    // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\n    if (!_origin) {\n      // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\n      if (allowedOrigins.includes('null') || process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n        return callback(null, true);\n      }\n      var msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(msg), false);\n    }\n    if (allowedOrigins.indexOf(_origin) === -1) {\n      var _msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(_msg), false);\n    }\n    return callback(null, true);\n  },\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  // Allow cookies to be sent\n  optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\napp.use(cors(corsOptions));\n\n// Use process.env.PORT for production, fallback to 3000 for local development\nvar PORT = process.env.PORT || 3000;\n\n// Define a webhook secret for Stripe. This should also be an environment variable.\nvar STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\n\n// --- Rate Limiting Configuration ---\nvar authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 10,\n  // Max 10 requests per 15 minutes per IP\n  message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\n  standardHeaders: true,\n  // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false // Disable the `X-RateLimit-*` headers\n});\n\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\n// This route needs the raw body for signature verification.\napp.post('/api/stripe-webhook', express.raw({\n  type: 'application/json'\n}), /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req, res) {\n    var sig, event, session, userId, planId, subscriptionUpdated, subscriptionDeleted, invoiceSucceeded, invoiceFailed, _t, _t2;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          sig = req.headers['stripe-signature'];\n          _context.p = 1;\n          event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n          _context.n = 3;\n          break;\n        case 2:\n          _context.p = 2;\n          _t = _context.v;\n          console.error(\"Webhook Error: \".concat(_t.message));\n          return _context.a(2, res.status(400).send(\"Webhook Error: \".concat(_t.message)));\n        case 3:\n          _t2 = event.type;\n          _context.n = _t2 === 'checkout.session.completed' ? 4 : _t2 === 'customer.subscription.updated' ? 5 : _t2 === 'customer.subscription.deleted' ? 6 : _t2 === 'invoice.payment_succeeded' ? 7 : _t2 === 'invoice.payment_failed' ? 8 : 9;\n          break;\n        case 4:\n          session = event.data.object;\n          console.log('Checkout Session Completed:', session.id);\n          userId = session.metadata.userId;\n          planId = session.metadata.planId;\n          if (session.payment_status === 'paid' && userId && planId) {\n            db.run('UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?', [session.customer, session.subscription, 'active', planId, userId], function (err) {\n              if (err) console.error('Database update error for checkout.session.completed:', err.message);else console.log(\"User \".concat(userId, \" subscription updated to \").concat(planId, \" (active).\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 5:\n          subscriptionUpdated = event.data.object;\n          console.log('Subscription Updated:', subscriptionUpdated.id);\n          if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?', [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.updated:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionUpdated.customer, \" status updated to \").concat(subscriptionUpdated.status, \" and plan to \").concat(subscriptionUpdated.plan.id, \".\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 6:\n          subscriptionDeleted = event.data.object;\n          console.log('Subscription Deleted:', subscriptionDeleted.id);\n          if (subscriptionDeleted.customer) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?', ['cancelled', 'free', subscriptionDeleted.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.deleted:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionDeleted.customer, \" marked as cancelled and reverted to free.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 7:\n          invoiceSucceeded = event.data.object;\n          console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\n          if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);else console.log(\"Subscription \".concat(invoiceSucceeded.subscription, \" status set to active.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 8:\n          invoiceFailed = event.data.object;\n          console.log('Invoice Payment Failed:', invoiceFailed.id);\n          if (invoiceFailed.subscription && invoiceFailed.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['past_due', invoiceFailed.subscription, invoiceFailed.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_failed:', err.message);else console.log(\"Subscription \".concat(invoiceFailed.subscription, \" status set to past_due.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 9:\n          console.log(\"Unhandled event type \".concat(event.type));\n        case 10:\n          res.status(200).json({\n            received: true\n          });\n        case 11:\n          return _context.a(2);\n      }\n    }, _callee, null, [[1, 2]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\napp.use(express.json());\n\n// --- JWT Secret ---\n// CRUCIAL FOR TESTING: Directly access process.env.JWT_SECRET without fallback.\n// This ensures tests control the secret used by the app instance.\nvar JWT_SECRET = process.env.JWT_SECRET; // Ensure it *must* come from process.env\n\n// --- Request Logging (using Morgan) ---\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\napp.use(morgan('dev'));\n\n// --- Serve Static Files (Frontend) with Caching ---\n// This middleware serves static files from the 'onboardflow' root directory\n// and sets Cache-Control headers for browser caching.\napp.use(express[\"static\"](path.join(__dirname, '..'), {\n  maxAge: '7d',\n  // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\n  immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\n}));\n\n// --- Database Setup ---\nvar db = new sqlite3.Database('./onboardflow.db', function (err) {\n  if (err) {\n    // Log database connection error and exit\n    console.error(\"Error opening database:\", err.message);\n    process.exit(1); // Exit process if database connection fails\n  } else {\n    console.log(\"Successfully connected to the database.\");\n    db.get(\"PRAGMA foreign_keys = ON\");\n    db.serialize(function () {\n      db.run(\"CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Users (\\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER,\\n                location_id INTEGER,\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL UNIQUE,\\n                password_hash TEXT NOT NULL,\\n                position TEXT,\\n                employee_id TEXT,\\n                role TEXT NOT NULL,\\n                stripe_customer_id TEXT,\\n                stripe_subscription_id TEXT,\\n                subscription_status TEXT,\\n                plan_id TEXT,\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Schedules (\\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                employee_id INTEGER NOT NULL,\\n                location_id INTEGER NOT NULL,\\n                start_time TEXT NOT NULL,\\n                end_time TEXT NOT NULL,\\n                notes TEXT,\\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // NEW: Create JobPostings table\n      db.run(\"CREATE TABLE IF NOT EXISTS JobPostings (\\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: link job posting to a specific location\\n                title TEXT NOT NULL,\\n                description TEXT NOT NULL,\\n                requirements TEXT, -- Optional: job requirements\\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\\n                created_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // Update Applicants table schema to link to JobPostings and add phone_number\n      db.run(\"CREATE TABLE IF NOT EXISTS Applicants (\\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL,\\n                phone_number TEXT, -- NEW: Phone number field\\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\\n                notes TEXT,\\n                application_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\\n            )\");\n      // NEW: Create Documents table for file/video uploads\n      db.run(\"CREATE TABLE IF NOT EXISTS Documents (\\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                user_id INTEGER NOT NULL, -- User who uploaded the document\\n                title TEXT NOT NULL,\\n                file_name TEXT NOT NULL,\\n                file_type TEXT NOT NULL,\\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\\n                description TEXT,\\n                upload_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\\n            )\");\n    });\n  }\n});\n\n// --- Authentication Middleware ---\nfunction authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) {\n    return res.status(401).json({\n      error: 'Unauthorized: No token provided.'\n    });\n  }\n  jwt.verify(token, JWT_SECRET, function (err, user) {\n    if (err) {\n      // Log the specific JWT error for debugging\n      console.error(\"JWT Verification Error:\", err.message);\n      return res.status(403).json({\n        error: 'Forbidden: Invalid or expired token.'\n      });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// --- Helper for Input Validation ---\nvar isValidEmail = function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\n\n// Apply rate limiting to authentication routes\napp.post('/api/register', authLimiter, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(req, res, next) {\n    var _req$body, company_name, full_name, email, password, password_hash, _t3;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          // Added 'next'\n          _req$body = req.body, company_name = _req$body.company_name, full_name = _req$body.full_name, email = _req$body.email, password = _req$body.password; // Input Validation for Registration\n          if (!(!company_name || typeof company_name !== 'string' || company_name.trim() === '')) {\n            _context2.n = 1;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Company name is required and must be a non-empty string.\"\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context2.n = 2;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context2.n = 3;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context2.n = 4;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          _context2.p = 4;\n          _context2.n = 5;\n          return bcrypt.hash(password, 10);\n        case 5:\n          password_hash = _context2.v;\n          db.serialize(function () {\n            db.run('BEGIN TRANSACTION');\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function (err) {\n              if (err) {\n                db.run('ROLLBACK');\n                console.error(\"Database error creating company:\", err);\n                return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\n              }\n              var newCompanyId = this.lastID;\n              db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')\", [newCompanyId, null, full_name, email, password_hash], function (userInsertErr) {\n                if (userInsertErr) {\n                  db.run('ROLLBACK');\n                  console.error(\"Database error creating user:\", userInsertErr);\n                  if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                    return res.status(409).json({\n                      error: 'Email already registered.'\n                    });\n                  }\n                  return next(new Error(\"Could not create user.\")); // Pass error\n                }\n                db.run('COMMIT');\n                res.status(201).json({\n                  message: \"Company and user registered successfully!\",\n                  userId: this.lastID\n                });\n              });\n            });\n          });\n          _context2.n = 7;\n          break;\n        case 6:\n          _context2.p = 6;\n          _t3 = _context2.v;\n          console.error(\"Registration error:\", _t3);\n          next(_t3); // Pass error to error handling middleware\n        case 7:\n          return _context2.a(2);\n      }\n    }, _callee2, null, [[4, 6]]);\n  }));\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/login', authLimiter, function (req, res, next) {\n  // Added 'next'\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n\n  // Input Validation for Login\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  if (!password || typeof password !== 'string' || password.length === 0) {\n    return res.status(400).json({\n      error: \"Password is required.\"\n    });\n  }\n  db.get(\"SELECT * FROM Users WHERE email = ?\", [email], /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(err, user) {\n      var isMatch, payload, token;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (!err) {\n              _context3.n = 1;\n              break;\n            }\n            console.error(\"Database error during login:\", err);\n            return _context3.a(2, next(new Error(\"A server error occurred during login.\")));\n          case 1:\n            if (user) {\n              _context3.n = 2;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 2:\n            _context3.n = 3;\n            return bcrypt.compare(password, user.password_hash);\n          case 3:\n            isMatch = _context3.v;\n            if (isMatch) {\n              _context3.n = 4;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 4:\n            payload = {\n              userId: user.user_id,\n              email: user.email,\n              role: user.role,\n              fullName: user.full_name,\n              companyId: user.company_id,\n              locationId: user.location_id,\n              subscriptionStatus: user.subscription_status,\n              planId: user.plan_id\n            };\n            token = jwt.sign(payload, JWT_SECRET, {\n              expiresIn: '1h'\n            });\n            res.status(200).json({\n              message: \"Login successful!\",\n              token: token,\n              role: user.role\n            });\n          case 5:\n            return _context3.a(2);\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});\napp.post('/api/invite-admin', authenticateToken, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(req, res, next) {\n    var _req$body3, full_name, email, password, location_id, _req$user, companyId, role, password_hash, _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          // Added 'next'\n          _req$body3 = req.body, full_name = _req$body3.full_name, email = _req$body3.email, password = _req$body3.password, location_id = _req$body3.location_id;\n          _req$user = req.user, companyId = _req$user.companyId, role = _req$user.role; // Input Validation for Invite Admin\n          if (!(role !== 'super_admin')) {\n            _context4.n = 1;\n            break;\n          }\n          return _context4.a(2, res.status(403).json({\n            error: 'Access Denied: Only super admins can invite other admins.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context4.n = 3;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context4.n = 4;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          if (!(typeof location_id !== 'number' || location_id <= 0)) {\n            _context4.n = 5;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid location ID is required.\"\n          }));\n        case 5:\n          _context4.p = 5;\n          _context4.n = 6;\n          return bcrypt.hash(password, 10);\n        case 6:\n          password_hash = _context4.v;\n          db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n            if (err) {\n              console.error(\"Database error checking location:\", err);\n              return next(new Error('Database error when verifying location.'));\n            } // Pass error\n            if (!location) {\n              return res.status(400).json({\n                error: 'Selected location does not exist or does not belong to your company.'\n              });\n            }\n            db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash], function (userInsertErr) {\n              if (userInsertErr) {\n                console.error(\"Database error inviting admin:\", userInsertErr);\n                if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                  return res.status(409).json({\n                    error: 'Email already registered.'\n                  });\n                }\n                return next(new Error('Failed to invite admin.')); // Pass error\n              }\n              res.status(201).json({\n                message: \"Location admin invited successfully!\",\n                userId: this.lastID\n              });\n            });\n          });\n          _context4.n = 8;\n          break;\n        case 7:\n          _context4.p = 7;\n          _t4 = _context4.v;\n          console.error(\"Invite admin error:\", _t4);\n          next(_t4);\n        case 8:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[5, 7]]);\n  }));\n  return function (_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\n// NEW: API endpoint for inviting employees\napp.post('/api/invite-employee', authenticateToken, /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(req, res, next) {\n    var _req$body4, full_name, email, password, position, employee_id, location_id, _req$user2, companyId, role, currentUserLocationId, isLocationIdValid, password_hash, locationVerification, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _req$body4 = req.body, full_name = _req$body4.full_name, email = _req$body4.email, password = _req$body4.password, position = _req$body4.position, employee_id = _req$body4.employee_id, location_id = _req$body4.location_id;\n          _req$user2 = req.user, companyId = _req$user2.companyId, role = _req$user2.role, currentUserLocationId = _req$user2.locationId; // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\n          if (['super_admin', 'location_admin'].includes(role)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Only admins can invite employees.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context5.n = 2;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context5.n = 3;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context5.n = 4;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          // Corrected location_id validation: Must be a number > 0.\n          // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\n          // For location_admin, it must match their current location.\n          // This revised logic correctly checks for null OR a valid positive integer.\n          isLocationIdValid = location_id === null || typeof location_id === 'number' && !isNaN(location_id) && location_id > 0;\n          if (isLocationIdValid) {\n            _context5.n = 5;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\"\n          }));\n        case 5:\n          if (!(position !== undefined && typeof position !== 'string')) {\n            _context5.n = 6;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Position must be a string if provided.'\n          }));\n        case 6:\n          if (!(employee_id !== undefined && typeof employee_id !== 'string')) {\n            _context5.n = 7;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Employee ID must be a string if provided.'\n          }));\n        case 7:\n          if (!(role === 'location_admin')) {\n            _context5.n = 8;\n            break;\n          }\n          if (!(location_id !== currentUserLocationId)) {\n            _context5.n = 8;\n            break;\n          }\n          if (location_id === null && currentUserLocationId === null) {\n            _context5.n = 8;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Location admin can only invite employees to their assigned location.'\n          }));\n        case 8:\n          _context5.p = 8;\n          _context5.n = 9;\n          return bcrypt.hash(password, 10);\n        case 9:\n          password_hash = _context5.v;\n          if (!(location_id !== null)) {\n            _context5.n = 11;\n            break;\n          }\n          _context5.n = 10;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n              if (err) reject(err);\n              resolve(location);\n            });\n          });\n        case 10:\n          locationVerification = _context5.v;\n          if (locationVerification) {\n            _context5.n = 11;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Selected location does not exist or does not belong to your company.'\n          }));\n        case 11:\n          db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash, position, employee_id],\n          // Default new employees to 'employee' role\n          function (userInsertErr) {\n            if (userInsertErr) {\n              console.error(\"Database error inviting employee:\", userInsertErr);\n              if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                return res.status(409).json({\n                  error: 'Email already registered.'\n                });\n              }\n              return next(new Error('Failed to invite employee.'));\n            }\n            res.status(201).json({\n              message: \"Employee invited successfully!\",\n              userId: this.lastID\n            });\n          });\n          _context5.n = 13;\n          break;\n        case 12:\n          _context5.p = 12;\n          _t5 = _context5.v;\n          console.error(\"Invite employee error:\", _t5);\n          next(_t5);\n        case 13:\n          return _context5.a(2);\n      }\n    }, _callee5, null, [[8, 12]]);\n  }));\n  return function (_x1, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}());\napp.get('/api/profile', authenticateToken, function (req, res) {\n  var _req$user3 = req.user,\n    userId = _req$user3.userId,\n    fullName = _req$user3.fullName,\n    email = _req$user3.email,\n    role = _req$user3.role,\n    companyId = _req$user3.companyId,\n    locationId = _req$user3.locationId,\n    subscriptionStatus = _req$user3.subscriptionStatus,\n    planId = _req$user3.planId;\n  res.status(200).json({\n    userId: userId,\n    fullName: fullName,\n    email: email,\n    role: role,\n    companyId: companyId,\n    locationId: locationId,\n    subscriptionStatus: subscriptionStatus,\n    planId: planId\n  });\n});\napp.put('/api/profile', authenticateToken, /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(req, res, next) {\n    var _req$body5, fullName, email, currentPassword, newPassword, userId;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          // Added 'next'\n          _req$body5 = req.body, fullName = _req$body5.fullName, email = _req$body5.email, currentPassword = _req$body5.currentPassword, newPassword = _req$body5.newPassword;\n          userId = req.user.userId; // Input Validation for Profile Update\n          if (!(fullName === undefined && email === undefined && (!currentPassword || !newPassword))) {\n            _context7.n = 1;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'No data provided for update.'\n          }));\n        case 1:\n          if (!(fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === ''))) {\n            _context7.n = 2;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"Full name must be a non-empty string if provided.\"\n          }));\n        case 2:\n          if (!(email !== undefined && !isValidEmail(email))) {\n            _context7.n = 3;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"A valid email address must be provided if changing email.\"\n          }));\n        case 3:\n          if (!(newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6))) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"New password must be at least 6 characters long if changing password.\"\n          }));\n        case 4:\n          if (!(currentPassword && !newPassword || !currentPassword && newPassword)) {\n            _context7.n = 5;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'Both current password and new password are required to change password.'\n          }));\n        case 5:\n          db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(err, user) {\n              var updateSql, updateParams, clauses, changesMade, existingUser, isMatch, newPasswordHash, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.n) {\n                  case 0:\n                    if (!err) {\n                      _context6.n = 1;\n                      break;\n                    }\n                    console.error(\"Database error fetching user for profile update:\", err);\n                    return _context6.a(2, next(new Error(\"Server error during profile update.\")));\n                  case 1:\n                    if (user) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    return _context6.a(2, res.status(404).json({\n                      error: \"User not found.\"\n                    }));\n                  case 2:\n                    updateSql = 'UPDATE Users SET ';\n                    updateParams = [];\n                    clauses = [];\n                    changesMade = false;\n                    if (fullName !== undefined && fullName !== user.full_name) {\n                      clauses.push('full_name = ?');\n                      updateParams.push(fullName);\n                      changesMade = true;\n                    }\n                    if (!(email !== undefined && email !== user.email)) {\n                      _context6.n = 8;\n                      break;\n                    }\n                    _context6.p = 3;\n                    _context6.n = 4;\n                    return new Promise(function (resolve, reject) {\n                      db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], function (err, row) {\n                        if (err) reject(err);\n                        resolve(row);\n                      });\n                    });\n                  case 4:\n                    existingUser = _context6.v;\n                    if (!existingUser) {\n                      _context6.n = 5;\n                      break;\n                    }\n                    return _context6.a(2, res.status(409).json({\n                      error: 'Email already in use by another account.'\n                    }));\n                  case 5:\n                    _context6.n = 7;\n                    break;\n                  case 6:\n                    _context6.p = 6;\n                    _t6 = _context6.v;\n                    console.error(\"Database error checking existing email:\", _t6);\n                    return _context6.a(2, next(new Error(\"Server error verifying email availability.\")));\n                  case 7:\n                    clauses.push('email = ?');\n                    updateParams.push(email);\n                    changesMade = true;\n                  case 8:\n                    if (!(currentPassword && newPassword)) {\n                      _context6.n = 12;\n                      break;\n                    }\n                    _context6.n = 9;\n                    return bcrypt.compare(currentPassword, user.password_hash);\n                  case 9:\n                    isMatch = _context6.v;\n                    if (isMatch) {\n                      _context6.n = 10;\n                      break;\n                    }\n                    return _context6.a(2, res.status(401).json({\n                      error: \"Current password incorrect.\"\n                    }));\n                  case 10:\n                    _context6.n = 11;\n                    return bcrypt.hash(newPassword, 10);\n                  case 11:\n                    newPasswordHash = _context6.v;\n                    clauses.push('password_hash = ?');\n                    updateParams.push(newPasswordHash);\n                    changesMade = true;\n                  case 12:\n                    if (changesMade) {\n                      _context6.n = 13;\n                      break;\n                    }\n                    return _context6.a(2, res.status(200).json({\n                      message: 'No changes detected. Profile remains the same.'\n                    }));\n                  case 13:\n                    updateSql += clauses.join(', ') + ' WHERE user_id = ?';\n                    updateParams.push(userId);\n                    db.run(updateSql, updateParams, function (updateErr) {\n                      if (updateErr) {\n                        console.error(\"Database error updating profile:\", updateErr);\n                        return next(new Error('Failed to update profile.'));\n                      } // Pass error\n                      if (this.changes > 0) {\n                        db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], function (fetchErr, updatedUser) {\n                          if (fetchErr || !updatedUser) {\n                            console.error(\"Error fetching updated user for new token:\", fetchErr);\n                            return res.status(200).json({\n                              message: 'Profile updated successfully, but token could not be refreshed.'\n                            });\n                          }\n                          var newPayload = {\n                            userId: updatedUser.user_id,\n                            email: updatedUser.email,\n                            role: updatedUser.role,\n                            fullName: updatedUser.full_name,\n                            companyId: updatedUser.company_id,\n                            locationId: updatedUser.location_id,\n                            subscriptionStatus: updatedUser.subscription_status,\n                            planId: user.plan_id\n                          };\n                          var newToken = jwt.sign(newPayload, JWT_SECRET, {\n                            expiresIn: '1h'\n                          });\n                          res.status(200).json({\n                            message: 'Profile updated successfully!',\n                            token: newToken\n                          });\n                        });\n                      } else {\n                        res.status(200).json({\n                          message: 'No changes applied as data was identical.'\n                        });\n                      }\n                    });\n                  case 14:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[3, 6]]);\n            }));\n            return function (_x15, _x16) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 6:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}());\napp.get('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user4 = req.user,\n    companyId = _req$user4.companyId,\n    role = _req$user4.role;\n  var sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\n  var params = [companyId];\n\n  // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\n  if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view locations.'\n    });\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching locations:\", err);\n      return next(new Error('Database error fetching locations.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp.post('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body6 = req.body,\n    location_name = _req$body6.location_name,\n    location_address = _req$body6.location_address;\n  var _req$user5 = req.user,\n    companyId = _req$user5.companyId,\n    role = _req$user5.role;\n\n  // Input Validation for Create Location\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can create locations.'\n    });\n  }\n  if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Location name is required and must be a non-empty string.\"\n    });\n  }\n  if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\n    return res.status(400).json({\n      error: \"Location address is required and must be a non-empty string.\"\n    });\n  }\n  db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function (err) {\n    if (err) {\n      console.error(\"Database error creating location:\", err);\n      return next(new Error('Failed to create location.'));\n    } // Pass error\n    res.status(201).json({\n      message: 'Location created!',\n      locationId: this.lastID\n    });\n  });\n});\napp[\"delete\"]('/api/locations/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user6 = req.user,\n    companyId = _req$user6.companyId,\n    role = _req$user6.role;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete locations.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID provided.'\n    });\n  }\n  db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting location:\", err);\n      return next(new Error('Failed to delete location.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Location not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.get('/api/users', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user7 = req.user,\n    companyId = _req$user7.companyId,\n    role = _req$user7.role,\n    currentUserId = _req$user7.userId,\n    currentUserLocationId = _req$user7.locationId;\n  var _req$query = req.query,\n    filterRole = _req$query.filterRole,\n    filterLocationId = _req$query.filterLocationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view users.'\n    });\n  }\n\n  // Input validation for filterRole and filterLocationId\n  var allowedRoles = ['super_admin', 'location_admin', 'employee'];\n  if (filterRole && (!allowedRoles.includes(filterRole) || role === 'location_admin' && filterRole === 'super_admin')) {\n    return res.status(400).json({\n      error: 'Invalid filter role provided or insufficient permissions to filter by this role.'\n    });\n  }\n  if (filterLocationId && isNaN(parseInt(filterLocationId))) {\n    return res.status(400).json({\n      error: 'Invalid filter location ID provided.'\n    });\n  }\n  if (filterRole) {\n    if (role === 'super_admin' || role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin') || role === 'employee' && filterRole === 'employee') {\n      sql += \" AND Users.role = ?\";\n      params.push(filterRole);\n    } else {\n      // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by role.'\n      });\n    }\n  }\n  if (filterLocationId) {\n    // Ensure location_admin can only filter by their own location\n    if (role === 'super_admin' || role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId) {\n      sql += \" AND Users.location_id = ?\";\n      params.push(filterLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by location.'\n      });\n    }\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching users:\", err);\n      return next(new Error('Database error fetching users.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/users/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user8 = req.user,\n    companyId = _req$user8.companyId,\n    role = _req$user8.role,\n    authenticatedUserId = _req$user8.userId;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete users.'\n    });\n  }\n  if (parseInt(id) === authenticatedUserId) {\n    return res.status(403).json({\n      error: 'Cannot delete your own super admin account via this interface.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid user ID provided.'\n    });\n  }\n  db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting user:\", err);\n      return next(new Error('Failed to delete user.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'User not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.post('/api/create-checkout-session', authenticateToken, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(req, res, next) {\n    var planId, _req$user9, userId, email, companyId, allowedPlanIds, priceIdMap, stripePriceId, customerId, userRecord, customer, session, _t7;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          // Added 'next'\n          planId = req.body.planId;\n          _req$user9 = req.user, userId = _req$user9.userId, email = _req$user9.email, companyId = _req$user9.companyId; // Input Validation for planId\n          allowedPlanIds = ['pro', 'enterprise'];\n          if (!(!planId || !allowedPlanIds.includes(planId))) {\n            _context8.n = 1;\n            break;\n          }\n          return _context8.a(2, res.status(400).json({\n            error: 'Invalid plan ID provided.'\n          }));\n        case 1:\n          priceIdMap = {\n            'pro': process.env.STRIPE_PRICE_ID_PRO,\n            // Use environment variable\n            'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\n          };\n          stripePriceId = priceIdMap[planId];\n          if (stripePriceId) {\n            _context8.n = 2;\n            break;\n          }\n          return _context8.a(2, res.status(500).json({\n            error: 'Stripe price ID not configured for this plan.'\n          }));\n        case 2:\n          _context8.p = 2;\n          _context8.n = 3;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], function (err, row) {\n              if (err) reject(err);\n              resolve(row);\n            });\n          });\n        case 3:\n          userRecord = _context8.v;\n          if (!(userRecord && userRecord.stripe_customer_id)) {\n            _context8.n = 4;\n            break;\n          }\n          customerId = userRecord.stripe_customer_id;\n          _context8.n = 6;\n          break;\n        case 4:\n          _context8.n = 5;\n          return stripeInstance.customers.create({\n            email: email,\n            metadata: {\n              userId: userId,\n              companyId: companyId\n            }\n          });\n        case 5:\n          customer = _context8.v;\n          customerId = customer.id;\n          db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], function (err) {\n            if (err) console.error('Failed to save Stripe customer ID to DB:', err);\n          });\n        case 6:\n          _context8.n = 7;\n          return stripeInstance.checkout.sessions.create({\n            customer: customerId,\n            mode: 'subscription',\n            line_items: [{\n              price: stripePriceId,\n              quantity: 1\n            }],\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\n            success_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}\"),\n            cancel_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/pricing.html?payment=cancelled\"),\n            metadata: {\n              userId: userId,\n              planId: planId\n            }\n          });\n        case 7:\n          session = _context8.v;\n          res.status(200).json({\n            url: session.url\n          });\n          _context8.n = 9;\n          break;\n        case 8:\n          _context8.p = 8;\n          _t7 = _context8.v;\n          console.error('Error creating Stripe Checkout Session:', _t7);\n          next(_t7);\n        case 9:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[2, 8]]);\n  }));\n  return function (_x17, _x18, _x19) {\n    return _ref8.apply(this, arguments);\n  };\n}());\napp.post('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body7 = req.body,\n    employee_id = _req$body7.employee_id,\n    location_id = _req$body7.location_id,\n    start_time = _req$body7.start_time,\n    end_time = _req$body7.end_time,\n    notes = _req$body7.notes;\n  var _req$user0 = req.user,\n    companyId = _req$user0.companyId,\n    role = _req$user0.role,\n    currentUserId = _req$user0.userId;\n\n  // Input Validation for Create Schedule\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create schedules.'\n    });\n  }\n  if (typeof employee_id !== 'number' || employee_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid employee ID is required.'\n    });\n  }\n  if (typeof location_id !== 'number' || location_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid location ID is required.'\n    });\n  }\n  if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\n    return res.status(400).json({\n      error: 'Valid start and end times are required.'\n    });\n  }\n  if (new Date(start_time) >= new Date(end_time)) {\n    return res.status(400).json({\n      error: 'Start time must be before end time.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], function (err, employee) {\n    if (err) {\n      console.error(\"Database error verifying employee:\", err);\n      return next(new Error('Database error during employee verification.'));\n    } // Pass error\n    if (!employee) {\n      return res.status(400).json({\n        error: 'Employee not found in your company.'\n      });\n    }\n    db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n      if (err) {\n        console.error(\"Database error verifying location:\", err);\n        return next(new Error('Database error during location verification.'));\n      } // Pass error\n      if (!location) {\n        return res.status(400).json({\n          error: 'Location not found in your company.'\n        });\n      }\n      db.run('INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes], function (insertErr) {\n        if (insertErr) {\n          console.error(\"Database error creating schedule:\", insertErr);\n          return next(new Error('Failed to create schedule.'));\n        } // Pass error\n        res.status(201).json({\n          message: 'Schedule created successfully!',\n          scheduleId: this.lastID\n        });\n      });\n    });\n  });\n});\napp.get('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query2 = req.query,\n    employee_id = _req$query2.employee_id,\n    location_id = _req$query2.location_id,\n    start_date = _req$query2.start_date,\n    end_date = _req$query2.end_date;\n  var _req$user1 = req.user,\n    companyId = _req$user1.companyId,\n    role = _req$user1.role,\n    currentUserId = _req$user1.userId,\n    currentUserLocationId = _req$user1.locationId;\n  var sql = \"SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\\n               FROM Schedules\\n               JOIN Users ON Schedules.employee_id = Users.user_id\\n               JOIN Locations ON Schedules.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND Schedules.location_id = ?\";\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  }\n\n  // Input validation for query parameters\n  if (employee_id && isNaN(parseInt(employee_id))) {\n    return res.status(400).json({\n      error: 'Invalid employee ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (start_date && isNaN(new Date(start_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid start date filter provided.'\n    });\n  }\n  if (end_date && isNaN(new Date(end_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid end date filter provided.'\n    });\n  }\n  if (employee_id && (role === 'super_admin' || role === 'location_admin' && parseInt(employee_id) === currentUserId || role === 'employee' && parseInt(employee_id) === currentUserId)) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole); // This should be employee_id, not filterRole\n  }\n  if (location_id && (role === 'super_admin' || role === 'location_admin' && parseInt(location_id) === currentUserLocationId)) {\n    sql += \" AND Schedules.location_id = ?\";\n    params.push(location_id);\n  }\n  if (start_date) {\n    sql += \" AND Schedules.start_time >= ?\";\n    params.push(start_date);\n  }\n  if (end_date) {\n    sql += \" AND Schedules.end_time <= ?\";\n    params.push(end_date);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching schedules:\", err);\n      return next(new Error('Database error fetching schedules.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/schedules/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user10 = req.user,\n    companyId = _req$user10.companyId,\n    role = _req$user10.role,\n    currentUserId = _req$user10.userId,\n    currentUserLocationId = _req$user10.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid schedule ID provided.'\n    });\n  }\n  if (role === 'employee') {\n    return res.status(403).json({\n      error: 'Access Denied: Employees cannot delete schedules.'\n    });\n  }\n  var sql = \"DELETE FROM Schedules WHERE schedule_id = ?\";\n  var params = [id];\n  if (role === 'location_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)\";\n    params.push(currentUserLocationId, companyId);\n  } else if (role === 'super_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)\";\n    params.push(companyId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting schedule:\", err);\n      return next(new Error('Failed to delete schedule.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Schedule not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Hiring Routes ---\n\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\napp.post('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body8 = req.body,\n    title = _req$body8.title,\n    description = _req$body8.description,\n    requirements = _req$body8.requirements,\n    location_id = _req$body8.location_id;\n  var _req$user11 = req.user,\n    companyId = _req$user11.companyId,\n    role = _req$user11.role,\n    currentUserLocationId = _req$user11.locationId;\n  var created_date = new Date().toISOString(); // Current date/time for creation\n\n  // Input Validation for Create Job Posting\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create job postings.'\n    });\n  }\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: \"Job title is required and must be a non-empty string.\"\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\napp.get('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query3 = req.query,\n    status = _req$query3.status,\n    location_id = _req$query3.location_id;\n  var _req$user12 = req.user,\n    companyId = _req$user12.companyId,\n    role = _req$user12.role,\n    currentUserLocationId = _req$user12.locationId;\n  var sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\n  var params = [companyId];\n\n  // Authorization: super_admin sees all, location_admin sees their location's postings\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    // Employees generally shouldn't see job postings list via this admin API\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view job postings.'\n    });\n  }\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid job posting status filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += ' AND status = ?';\n    params.push(status);\n  }\n  // Only super admin can filter by any location_id beyond their own scope\n  if (location_id && role === 'super_admin') {\n    sql += \" AND location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching job postings:\", err);\n      return next(new Error('Database error fetching job postings.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp.put('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body9 = req.body,\n    title = _req$body9.title,\n    description = _req$body9.description,\n    requirements = _req$body9.requirements,\n    status = _req$body9.status,\n    location_id = _req$body9.location_id;\n  var _req$user13 = req.user,\n    companyId = _req$user13.companyId,\n    role = _req$user13.role,\n    currentUserLocationId = _req$user13.locationId;\n\n  // Input Validation for Job Posting Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update job postings.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\n    return res.status(400).json({\n      error: 'Job title must be a non-empty string if provided.'\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  var allowedStatuses = ['Open', 'Closed', 'Filled'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE JobPostings SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (title !== undefined) {\n    clauses.push('title = ?');\n    updateParams.push(title);\n  }\n  // Line 1009 fix: Ensure this line and surrounding logic is correct.\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp[\"delete\"]('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user14 = req.user,\n    companyId = _req$user14.companyId,\n    role = _req$user14.role,\n    currentUserLocationId = _req$user14.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete job postings.'\n    });\n  }\n  var sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete their own location's postings\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting job posting:\", err);\n      return next(new Error('Failed to delete job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Update Applicant API endpoints to use job_posting_id\napp.post('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body0 = req.body,\n    job_posting_id = _req$body0.job_posting_id,\n    full_name = _req$body0.full_name,\n    email = _req$body0.email,\n    notes = _req$body0.notes,\n    location_id = _req$body0.location_id,\n    phone_number = _req$body0.phone_number; // Added phone_number\n  var _req$user15 = req.user,\n    companyId = _req$user15.companyId,\n    role = _req$user15.role,\n    currentUserLocationId = _req$user15.locationId;\n  var application_date = new Date().toISOString(); // Current date/time for application\n\n  // Input Validation for Adding Applicant\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can add applicants.'\n    });\n  }\n  if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid job posting ID is required.'\n    });\n  }\n  if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Full name is required and must be a non-empty string.\"\n    });\n  }\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\n  if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\n    return res.status(400).json({\n      error: \"Phone number is required.\"\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // Verify job_posting_id belongs to the company, and for location_admin, to their location\n  db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, jobPosting) {\n    if (err) {\n      console.error(\"Database error verifying job posting:\", err);\n      return next(new Error('Database error when verifying job posting.'));\n    } // Pass error\n    if (!jobPosting) {\n      return res.status(400).json({\n        error: 'Job Posting not found or does not belong to your company.'\n      });\n    }\n\n    // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\n    if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.'\n      });\n    }\n    db.run('INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date],\n    // Use location_id from payload or job posting\n    function (insertErr) {\n      if (insertErr) {\n        console.error(\"Database error creating applicant:\", insertErr);\n        return next(new Error('Failed to create applicant.'));\n      } // Pass error\n      res.status(201).json({\n        message: 'Applicant added successfully!',\n        applicantId: this.lastID\n      });\n    });\n  });\n});\napp.get('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query4 = req.query,\n    job_posting_id = _req$query4.job_posting_id,\n    status = _req$query4.status,\n    location_id = _req$query4.location_id; // Added job_posting_id, status, location_id filters\n  var _req$user16 = req.user,\n    companyId = _req$user16.companyId,\n    role = _req$user16.role,\n    currentUserId = _req$user16.userId,\n    currentUserLocationId = _req$user16.locationId;\n  var sql = \"SELECT Applicants.*, JobPostings.title AS job_title_name\\n               FROM Applicants\\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\\n               WHERE Applicants.company_id = ?\";\n  var params = [companyId];\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid applicant status filter provided.'\n    });\n  }\n  if (job_posting_id && isNaN(parseInt(job_posting_id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += \" AND Applicants.status = ?\";\n    params.push(status);\n  }\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)\"; // Location admin sees applicants for their location or unassigned\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Applicants.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view applicants.'\n    });\n  }\n\n  // Apply job_posting_id filter if provided\n  if (job_posting_id) {\n    sql += \" AND Applicants.job_posting_id = ?\";\n    params.push(job_posting_id);\n  }\n  // Apply location filter from query params for super_admin\n  if (location_id && role === 'super_admin') {\n    sql += \" AND Applicants.location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching applicants:\", err);\n      return next(new Error('Database error fetching applicants.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\napp.put('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body1 = req.body,\n    full_name = _req$body1.full_name,\n    email = _req$body1.email,\n    status = _req$body1.status,\n    resume_url = _req$body1.resume_url,\n    notes = _req$body1.notes,\n    location_id = _req$body1.location_id,\n    job_posting_id = _req$body1.job_posting_id,\n    phone_number = _req$body1.phone_number;\n  var _req$user17 = req.user,\n    companyId = _req$user17.companyId,\n    role = _req$user17.role,\n    currentUserLocationId = _req$user17.locationId;\n\n  // Input Validation for Applicant Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update applicant records.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\n    return res.status(400).json({\n      error: \"Full name must be a non-empty string if provided.\"\n    });\n  }\n  if (email !== undefined && !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address must be provided if changing email.\"\n    });\n  }\n  if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\n    return res.status(400).json({\n      error: \"Phone number must be a non-empty string if provided.\"\n    });\n  }\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (resume_url !== undefined && typeof resume_url !== 'string') {\n    // Assuming resume_url is a string URL\n    return res.status(400).json({\n      error: 'Resume URL must be a string if provided.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\n    return res.status(400).json({\n      error: 'Job posting ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE Applicants SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (full_name !== undefined) {\n    clauses.push('full_name = ?');\n    updateParams.push(full_name);\n  }\n  if (email !== undefined) {\n    clauses.push('email = ?');\n    updateParams.push(email);\n  }\n  if (phone_number !== undefined) {\n    clauses.push('phone_number = ?');\n    updateParams.push(phone_number);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n  if (resume_url !== undefined) {\n    clauses.push('resume_url = ?');\n    updateParams.push(resume_url);\n  }\n  if (notes !== undefined) {\n    clauses.push('notes = ?');\n    updateParams.push(notes);\n  }\n\n  // Admins can update location_id or job_posting_id, with restrictions for location_admin\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot assign applicants to another location.'\n        });\n      }\n      // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (job_posting_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    } else if (role === 'location_admin') {\n      // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\n      db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, job) {\n        if (err) {\n          console.error(\"DB error verifying job posting for update:\", err);\n          return next(new Error('Database error verifying job posting.'));\n        } // Pass error\n        if (!job) {\n          return res.status(400).json({\n            error: 'Job Posting not found or does not belong to your company.'\n          });\n        }\n        if (job.location_id !== null && job.location_id !== currentUserLocationId) {\n          return res.status(403).json({\n            error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.'\n          });\n        }\n      });\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // For location_admin, ensure they can only update applicants within their assigned location\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating applicant:\", err);\n      return next(new Error('Failed to update applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Applicant updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\napp[\"delete\"]('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user18 = req.user,\n    companyId = _req$user18.companyId,\n    role = _req$user18.role,\n    currentUserLocationId = _req$user18.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete applicants.'\n    });\n  }\n  var sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete applicants in their own location\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting applicant:\", err);\n      return next(new Error('Failed to delete applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Document Management Routes ---\n\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\napp.post('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body10 = req.body,\n    title = _req$body10.title,\n    file_name = _req$body10.file_name,\n    file_type = _req$body10.file_type,\n    file_url = _req$body10.file_url,\n    description = _req$body10.description;\n  var _req$user19 = req.user,\n    companyId = _req$user19.companyId,\n    userId = _req$user19.userId;\n  var upload_date = new Date().toISOString();\n\n  // Input Validation for Document Upload\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: 'Document title is required and must be a non-empty string.'\n    });\n  }\n  if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\n    return res.status(400).json({\n      error: 'File name is required and must be a non-empty string.'\n    });\n  }\n  if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\n    return res.status(400).json({\n      error: 'File type is required and must be a non-empty string.'\n    });\n  }\n  // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\n  var urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\n  if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\n    return res.status(400).json({\n      error: 'A valid file URL (starting with http or https) is required.'\n    });\n  }\n  if (description !== undefined && typeof description !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.run('INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, userId, title, file_name, file_type, file_url, description, upload_date], function (err) {\n    if (err) {\n      console.error(\"Database error uploading document:\", err);\n      return next(new Error('Failed to upload document metadata.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Document metadata saved successfully!',\n      documentId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\napp.get('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user20 = req.user,\n    companyId = _req$user20.companyId,\n    userId = _req$user20.userId,\n    role = _req$user20.role;\n  var sql = 'SELECT * FROM Documents WHERE company_id = ?';\n  var params = [companyId];\n\n  // Non-super-admins only see their own documents\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching documents:\", err);\n      return next(new Error('Database error fetching documents.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\napp[\"delete\"]('/api/documents/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user21 = req.user,\n    companyId = _req$user21.companyId,\n    userId = _req$user21.userId,\n    role = _req$user21.role;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid document ID provided.'\n    });\n  }\n  var sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Only super_admin or the original uploader can delete\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting document:\", err);\n      return next(new Error('Failed to delete document.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Document not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\n// This should always be the LAST route in your Express app\napp.get(/'*'/, function (req, res) {\n  // Correctly serve the index.html from the parent directory\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// --- Global Error Handling Middleware ---\n// This should be the very last middleware in your Express app\napp.use(function (err, req, res, next) {\n  console.error(\"Unhandled Error: \".concat(err.stack)); // Log the full stack trace for debugging\n  // Respond with a generic error message for the client\n  res.status(500).json({\n    error: 'An unexpected server error occurred. Please try again later.'\n    // In development, you might send more details:\n    // message: err.message,\n    // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// --- Server Start ---\n// This conditional export allows the app to be imported for testing\n// without starting the server listener when the test runner requires it.\nif (require.main === module) {\n  // Only listen if this file is run directly (not required as a module)\n  app.listen(PORT, function () {\n    console.log(\"Server is running successfully on http://localhost:\".concat(PORT));\n  });\n} else {\n  // Export the app for testing purposes\n  module.exports = app;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","express","require","sqlite3","verbose","bcrypt","jwt","cors","path","csv","_require","Readable","rateLimit","morgan","process","env","NODE_ENV","main","module","config","stripeInstance","STRIPE_SECRET_KEY","app","allowedOrigins","CORS_ORIGIN","split","push","corsOptions","origin","callback","includes","msg","Error","indexOf","methods","credentials","optionsSuccessStatus","use","PORT","STRIPE_WEBHOOK_SECRET","authLimiter","windowMs","max","message","standardHeaders","legacyHeaders","post","raw","type","_ref","_callee","req","res","sig","event","session","userId","planId","subscriptionUpdated","subscriptionDeleted","invoiceSucceeded","invoiceFailed","_t","_t2","_context","headers","webhooks","constructEvent","body","console","error","concat","status","send","data","object","log","id","metadata","payment_status","db","run","customer","subscription","err","plan","json","received","_x","_x2","JWT_SECRET","join","__dirname","maxAge","immutable","Database","exit","get","serialize","authenticateToken","next","authHeader","token","verify","user","isValidEmail","email","test","_ref2","_callee2","_req$body","company_name","full_name","password","password_hash","_t3","_context2","trim","hash","newCompanyId","lastID","userInsertErr","_x3","_x4","_x5","_req$body2","_ref3","_callee3","isMatch","payload","_context3","compare","user_id","role","fullName","companyId","company_id","locationId","location_id","subscriptionStatus","subscription_status","plan_id","sign","expiresIn","_x6","_x7","_ref4","_callee4","_req$body3","_req$user","_t4","_context4","location","_x8","_x9","_x0","_ref5","_callee5","_req$body4","position","employee_id","_req$user2","currentUserLocationId","isLocationIdValid","locationVerification","_t5","_context5","isNaN","undefined","reject","_x1","_x10","_x11","_req$user3","put","_ref6","_callee7","_req$body5","currentPassword","newPassword","_context7","_ref7","_callee6","updateSql","updateParams","clauses","changesMade","existingUser","newPasswordHash","_t6","_context6","row","updateErr","changes","fetchErr","updatedUser","newPayload","newToken","_x15","_x16","_x12","_x13","_x14","_req$user4","sql","params","all","rows","_req$body6","location_name","location_address","_req$user5","_req$user6","parseInt","_req$user7","currentUserId","_req$query","query","filterRole","filterLocationId","allowedRoles","_req$user8","authenticatedUserId","_ref8","_callee8","_req$user9","allowedPlanIds","priceIdMap","stripePriceId","customerId","userRecord","_t7","_context8","STRIPE_PRICE_ID_PRO","STRIPE_PRICE_ID_ENT","stripe_customer_id","customers","checkout","sessions","mode","line_items","price","quantity","success_url","FRONTEND_URL","cancel_url","url","_x17","_x18","_x19","_req$body7","start_time","end_time","notes","_req$user0","Date","getTime","employee","insertErr","scheduleId","_req$query2","start_date","end_date","_req$user1","_req$user10","_req$body8","title","description","requirements","_req$user11","created_date","toISOString","_req$query3","_req$user12","allowedStatuses","_req$body9","_req$user13","_req$user14","_req$body0","job_posting_id","phone_number","_req$user15","application_date","jobPosting","applicantId","_req$query4","_req$user16","_req$body1","resume_url","_req$user17","job","_req$user18","_req$body10","file_name","file_type","file_url","_req$user19","upload_date","urlRegex","documentId","_req$user20","_req$user21","sendFile","stack","listen","exports"],"sourceRoot":"C:\\Users\\xarcy\\OneDrive\\Desktop\\onboardflow\\backend\\test\\","sources":["server.test.cjs"],"sourcesContent":["// --- Imports ---\r\nconst express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors'); // Import cors\r\nconst path = require('path');\r\nconst csv = require('csv-parser'); // For CSV parsing\r\nconst { Readable } = require('stream'); // For creating a readable stream from a string\r\nconst rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\r\nconst morgan = require('morgan'); // Import morgan for request logging\r\n\r\n// Load environment variables from .env file in development\r\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\r\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\r\n    require('dotenv').config();\r\n}\r\n\r\n// Import the Stripe library and initialize it with your secret key\r\n// Use process.env.STRIPE_SECRET_KEY for production\r\nconst stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\r\n\r\n// --- App Initialization ---\r\nconst app = express();\r\n\r\n// Configure CORS for production environment\r\nconst allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\r\n\r\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\r\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\r\n    allowedOrigins.push('null');\r\n}\r\n\r\nconst corsOptions = {\r\n    origin: function (origin, callback) {\r\n        // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\r\n        if (!origin) {\r\n            // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\r\n            if (allowedOrigins.includes('null') || (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN)) {\r\n                return callback(null, true);\r\n            }\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n\r\n        if (allowedOrigins.indexOf(origin) === -1) {\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n        return callback(null, true);\r\n    },\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Allow cookies to be sent\r\n    optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n\r\n// Use process.env.PORT for production, fallback to 3000 for local development\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Define a webhook secret for Stripe. This should also be an environment variable.\r\nconst STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\r\n\r\n// --- Rate Limiting Configuration ---\r\nconst authLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 10, // Max 10 requests per 15 minutes per IP\r\n    message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\r\n// This route needs the raw body for signature verification.\r\napp.post('/api/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {\r\n    const sig = req.headers['stripe-signature'];\r\n\r\n    let event;\r\n\r\n    try {\r\n        event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n    } catch (err) {\r\n        console.error(`Webhook Error: ${err.message}`);\r\n        return res.status(400).send(`Webhook Error: ${err.message}`);\r\n    }\r\n\r\n    // Handle the event\r\n    switch (event.type) {\r\n        case 'checkout.session.completed':\r\n            const session = event.data.object;\r\n            console.log('Checkout Session Completed:', session.id);\r\n            const userId = session.metadata.userId;\r\n            const planId = session.metadata.planId;\r\n            if (session.payment_status === 'paid' && userId && planId) {\r\n                db.run(\r\n                    'UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?',\r\n                    [session.customer, session.subscription, 'active', planId, userId],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for checkout.session.completed:', err.message);\r\n                        else console.log(`User ${userId} subscription updated to ${planId} (active).`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.updated':\r\n            const subscriptionUpdated = event.data.object;\r\n            console.log('Subscription Updated:', subscriptionUpdated.id);\r\n            if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?',\r\n                    [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.updated:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionUpdated.customer} status updated to ${subscriptionUpdated.status} and plan to ${subscriptionUpdated.plan.id}.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.deleted':\r\n            const subscriptionDeleted = event.data.object;\r\n            console.log('Subscription Deleted:', subscriptionDeleted.id);\r\n            if (subscriptionDeleted.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?',\r\n                    ['cancelled', 'free', subscriptionDeleted.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.deleted:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionDeleted.customer} marked as cancelled and reverted to free.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_succeeded':\r\n            const invoiceSucceeded = event.data.object;\r\n            console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\r\n            if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);\r\n                        else console.log(`Subscription ${invoiceSucceeded.subscription} status set to active.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_failed':\r\n            const invoiceFailed = event.data.object;\r\n            console.log('Invoice Payment Failed:', invoiceFailed.id);\r\n            if (invoiceFailed.subscription && invoiceFailed.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['past_due', invoiceFailed.subscription, invoiceFailed.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_failed:', err.message);\r\n                        else console.log(`Subscription ${invoiceFailed.subscription} status set to past_due.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        default:\r\n            console.log(`Unhandled event type ${event.type}`);\r\n    }\r\n    res.status(200).json({ received: true });\r\n});\r\n\r\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\r\napp.use(express.json());\r\n\r\n// --- JWT Secret ---\r\n// CRUCIAL FOR TESTING: Directly access process.env.JWT_SECRET without fallback.\r\n// This ensures tests control the secret used by the app instance.\r\nconst JWT_SECRET = process.env.JWT_SECRET; // Ensure it *must* come from process.env\r\n\r\n// --- Request Logging (using Morgan) ---\r\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\r\napp.use(morgan('dev'));\r\n\r\n// --- Serve Static Files (Frontend) with Caching ---\r\n// This middleware serves static files from the 'onboardflow' root directory\r\n// and sets Cache-Control headers for browser caching.\r\napp.use(express.static(path.join(__dirname, '..'), {\r\n    maxAge: '7d', // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\r\n    immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\r\n}));\r\n\r\n// --- Database Setup ---\r\nconst db = new sqlite3.Database('./onboardflow.db', (err) => {\r\n    if (err) {\r\n        // Log database connection error and exit\r\n        console.error(\"Error opening database:\", err.message);\r\n        process.exit(1); // Exit process if database connection fails\r\n    } else {\r\n        console.log(\"Successfully connected to the database.\");\r\n        db.get(\"PRAGMA foreign_keys = ON\");\r\n        db.serialize(() => {\r\n            db.run(`CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Users (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER,\r\n                location_id INTEGER,\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL UNIQUE,\r\n                password_hash TEXT NOT NULL,\r\n                position TEXT,\r\n                employee_id TEXT,\r\n                role TEXT NOT NULL,\r\n                stripe_customer_id TEXT,\r\n                stripe_subscription_id TEXT,\r\n                subscription_status TEXT,\r\n                plan_id TEXT,\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Schedules (\r\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                employee_id INTEGER NOT NULL,\r\n                location_id INTEGER NOT NULL,\r\n                start_time TEXT NOT NULL,\r\n                end_time TEXT NOT NULL,\r\n                notes TEXT,\r\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // NEW: Create JobPostings table\r\n            db.run(`CREATE TABLE IF NOT EXISTS JobPostings (\r\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: link job posting to a specific location\r\n                title TEXT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                requirements TEXT, -- Optional: job requirements\r\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\r\n                created_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // Update Applicants table schema to link to JobPostings and add phone_number\r\n            db.run(`CREATE TABLE IF NOT EXISTS Applicants (\r\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\r\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL,\r\n                phone_number TEXT, -- NEW: Phone number field\r\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\r\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\r\n                notes TEXT,\r\n                application_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\r\n            )`);\r\n            // NEW: Create Documents table for file/video uploads\r\n            db.run(`CREATE TABLE IF NOT EXISTS Documents (\r\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL, -- User who uploaded the document\r\n                title TEXT NOT NULL,\r\n                file_name TEXT NOT NULL,\r\n                file_type TEXT NOT NULL,\r\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\r\n                description TEXT,\r\n                upload_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\r\n            )`);\r\n        });\r\n    }\r\n});\r\n\r\n// --- Authentication Middleware ---\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1];\r\n    if (token == null) {\r\n        return res.status(401).json({ error: 'Unauthorized: No token provided.' });\r\n    }\r\n    jwt.verify(token, JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            // Log the specific JWT error for debugging\r\n            console.error(\"JWT Verification Error:\", err.message);\r\n            return res.status(403).json({ error: 'Forbidden: Invalid or expired token.' });\r\n        }\r\n        req.user = user;\r\n        next();\r\n    });\r\n}\r\n\r\n// --- Helper for Input Validation ---\r\nconst isValidEmail = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\r\n\r\n// Apply rate limiting to authentication routes\r\napp.post('/api/register', authLimiter, async (req, res, next) => { // Added 'next'\r\n    const { company_name, full_name, email, password } = req.body;\r\n\r\n    // Input Validation for Registration\r\n    if (!company_name || typeof company_name !== 'string' || company_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Company name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Password is required and must be at least 6 characters long.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.serialize(() => {\r\n            db.run('BEGIN TRANSACTION');\r\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function(err) {\r\n                if (err) { \r\n                    db.run('ROLLBACK'); \r\n                    console.error(\"Database error creating company:\", err);\r\n                    return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\r\n                }\r\n                const newCompanyId = this.lastID;\r\n                db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')`, [newCompanyId, null, full_name, email, password_hash], function(userInsertErr) {\r\n                    if (userInsertErr) { \r\n                        db.run('ROLLBACK'); \r\n                        console.error(\"Database error creating user:\", userInsertErr);\r\n                        if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { \r\n                            return res.status(409).json({ error: 'Email already registered.' }); \r\n                        }\r\n                        return next(new Error(\"Could not create user.\")); // Pass error\r\n                    }\r\n                    db.run('COMMIT');\r\n                    res.status(201).json({ message: \"Company and user registered successfully!\", userId: this.lastID });\r\n                });\r\n            });\r\n        });\r\n    } catch (error) { \r\n        console.error(\"Registration error:\", error);\r\n        next(error); // Pass error to error handling middleware\r\n    }\r\n});\r\n\r\napp.post('/api/login', authLimiter, (req, res, next) => { // Added 'next'\r\n    const { email, password } = req.body;\r\n\r\n    // Input Validation for Login\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length === 0) {\r\n        return res.status(400).json({ error: \"Password is required.\" });\r\n    }\r\n\r\n    db.get(\"SELECT * FROM Users WHERE email = ?\", [email], async (err, user) => {\r\n        if (err) {\r\n            console.error(\"Database error during login:\", err);\r\n            return next(new Error(\"A server error occurred during login.\")); // Pass error\r\n        }\r\n        if (!user) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const isMatch = await bcrypt.compare(password, user.password_hash);\r\n        if (!isMatch) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const payload = { userId: user.user_id, email: user.email, role: user.role, fullName: user.full_name, companyId: user.company_id, locationId: user.location_id, subscriptionStatus: user.subscription_status, planId: user.plan_id };\r\n        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });\r\n        res.status(200).json({ message: \"Login successful!\", token, role: user.role });\r\n    });\r\n});\r\n\r\napp.post('/api/invite-admin', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { full_name, email, password, location_id } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Invite Admin\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can invite other admins.' }); }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) { // Assuming location_id is an integer ID\r\n        return res.status(400).json({ error: \"A valid location ID is required.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error checking location:\", err); return next(new Error('Database error when verifying location.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' }); }\r\n            db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')`, [companyId, location_id, full_name, email, password_hash], function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting admin:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite admin.')); // Pass error\r\n                }\r\n                res.status(201).json({ message: \"Location admin invited successfully!\", userId: this.lastID });\r\n            });\r\n        });\r\n    } catch (error) { console.error(\"Invite admin error:\", error); next(error); } // Pass error\r\n});\r\n\r\n// NEW: API endpoint for inviting employees\r\napp.post('/api/invite-employee', authenticateToken, async (req, res, next) => {\r\n    const { full_name, email, password, position, employee_id, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\r\n    if (!['super_admin', 'location_admin'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can invite employees.' });\r\n    }\r\n\r\n    // Input Validation for Invite Employee\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    \r\n    // Corrected location_id validation: Must be a number > 0.\r\n    // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\r\n    // For location_admin, it must match their current location.\r\n    // This revised logic correctly checks for null OR a valid positive integer.\r\n    const isLocationIdValid = location_id === null || (typeof location_id === 'number' && !isNaN(location_id) && location_id > 0);\r\n    if (!isLocationIdValid) {\r\n        return res.status(400).json({ error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\" });\r\n    }\r\n    \r\n    if (position !== undefined && typeof position !== 'string') {\r\n        return res.status(400).json({ error: 'Position must be a string if provided.' });\r\n    }\r\n    if (employee_id !== undefined && typeof employee_id !== 'string') {\r\n        return res.status(400).json({ error: 'Employee ID must be a string if provided.' });\r\n    }\r\n\r\n    // Location Admin specific check: ensure they are inviting to their assigned location or null\r\n    // If location_admin tries to set a location that is NOT their own, block it.\r\n    // Allow location_admin to set to null if their current location is null.\r\n    if (role === 'location_admin') {\r\n        // A location admin can ONLY assign an employee to their own location or to null (unassigned)\r\n        if (location_id !== currentUserLocationId) {\r\n            // If the target location_id is not the current user's location, check if both are null\r\n            if (!(location_id === null && currentUserLocationId === null)) {\r\n                return res.status(403).json({ error: 'Access Denied: Location admin can only invite employees to their assigned location.' });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n\r\n        // Verify the location_id belongs to the company and, if location_admin, matches their assigned location\r\n        // This check is crucial if location_id is NOT null\r\n        if (location_id !== null) {\r\n            const locationVerification = await new Promise((resolve, reject) => {\r\n                db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n                    if (err) reject(err);\r\n                    resolve(location);\r\n                });\r\n            });\r\n            if (!locationVerification) {\r\n                return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' });\r\n            }\r\n        }\r\n\r\n        db.run(\r\n            `INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')`,\r\n            [companyId, location_id, full_name, email, password_hash, position, employee_id,], // Default new employees to 'employee' role\r\n            function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting employee:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite employee.'));\r\n                }\r\n                res.status(201).json({ message: \"Employee invited successfully!\", userId: this.lastID });\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Invite employee error:\", error);\r\n        next(error);\r\n    }\r\n});\r\n\r\n\r\napp.get('/api/profile', authenticateToken, (req, res) => {\r\n    const { userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId } = req.user;\r\n    res.status(200).json({ userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId });\r\n});\r\n\r\napp.put('/api/profile', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { fullName, email, currentPassword, newPassword } = req.body;\r\n    const { userId } = req.user;\r\n\r\n    // Input Validation for Profile Update\r\n    if (fullName === undefined && email === undefined && (!currentPassword || !newPassword)) {\r\n        return res.status(400).json({ error: 'No data provided for update.' });\r\n    }\r\n    if (fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6)) {\r\n        return res.status(400).json({ error: \"New password must be at least 6 characters long if changing password.\" });\r\n    }\r\n    if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {\r\n        return res.status(400).json({ error: 'Both current password and new password are required to change password.' });\r\n    }\r\n\r\n\r\n    db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], async (err, user) => {\r\n        if (err) { console.error(\"Database error fetching user for profile update:\", err); return next(new Error(\"Server error during profile update.\")); } // Pass error\r\n        if (!user) { return res.status(404).json({ error: \"User not found.\" }); }\r\n        let updateSql = 'UPDATE Users SET ';\r\n        const updateParams = [];\r\n        const clauses = [];\r\n        let changesMade = false;\r\n        if (fullName !== undefined && fullName !== user.full_name) {\r\n            clauses.push('full_name = ?');\r\n            updateParams.push(fullName);\r\n            changesMade = true;\r\n        }\r\n        if (email !== undefined && email !== user.email) {\r\n            try { // Added try-catch for async await in db.get\r\n                const existingUser = await new Promise((resolve, reject) => {\r\n                    db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], (err, row) => {\r\n                        if (err) reject(err);\r\n                        resolve(row);\r\n                    });\r\n                });\r\n                if (existingUser) { return res.status(409).json({ error: 'Email already in use by another account.' }); }\r\n            } catch (dbErr) {\r\n                console.error(\"Database error checking existing email:\", dbErr);\r\n                return next(new Error(\"Server error verifying email availability.\"));\r\n            }\r\n            clauses.push('email = ?');\r\n            updateParams.push(email);\r\n            changesMade = true;\r\n        }\r\n        if (currentPassword && newPassword) {\r\n            const isMatch = await bcrypt.compare(currentPassword, user.password_hash);\r\n            if (!isMatch) { return res.status(401).json({ error: \"Current password incorrect.\" }); }\r\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\r\n            clauses.push('password_hash = ?');\r\n            updateParams.push(newPasswordHash);\r\n            changesMade = true;\r\n        }\r\n        if (!changesMade) { return res.status(200).json({ message: 'No changes detected. Profile remains the same.' }); }\r\n        updateSql += clauses.join(', ') + ' WHERE user_id = ?';\r\n        updateParams.push(userId);\r\n        db.run(updateSql, updateParams, function(updateErr) {\r\n            if (updateErr) { console.error(\"Database error updating profile:\", updateErr); return next(new Error('Failed to update profile.')); } // Pass error\r\n            if (this.changes > 0) {\r\n                db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], (fetchErr, updatedUser) => {\r\n                    if (fetchErr || !updatedUser) { console.error(\"Error fetching updated user for new token:\", fetchErr); return res.status(200).json({ message: 'Profile updated successfully, but token could not be refreshed.' }); }\r\n                    const newPayload = { userId: updatedUser.user_id, email: updatedUser.email, role: updatedUser.role, fullName: updatedUser.full_name, companyId: updatedUser.company_id, locationId: updatedUser.location_id, subscriptionStatus: updatedUser.subscription_status, planId: user.plan_id };\r\n                    const newToken = jwt.sign(newPayload, JWT_SECRET, { expiresIn: '1h' });\r\n                    res.status(200).json({ message: 'Profile updated successfully!', token: newToken });\r\n                });\r\n            } else { res.status(200).json({ message: 'No changes applied as data was identical.' }); }\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role } = req.user;\r\n    let sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\r\n    if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view locations.' });\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching locations:\", err); return next(new Error('Database error fetching locations.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.post('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { location_name, location_address } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Create Location\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can create locations.' }); }\r\n    if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Location name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\r\n        return res.status(400).json({ error: \"Location address is required and must be a non-empty string.\" });\r\n    }\r\n\r\n    db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function(err) {\r\n        if (err) { console.error(\"Database error creating location:\", err); return next(new Error('Failed to create location.')); } // Pass error\r\n        res.status(201).json({ message: 'Location created!', locationId: this.lastID });\r\n    });\r\n});\r\n\r\napp.delete('/api/locations/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete locations.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting location:\", err); return next(new Error('Failed to delete location.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Location not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.get('/api/users', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n    const { filterRole, filterLocationId } = req.query;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view users.' });\r\n    }\r\n\r\n    // Input validation for filterRole and filterLocationId\r\n    const allowedRoles = ['super_admin', 'location_admin', 'employee'];\r\n    if (filterRole && (!allowedRoles.includes(filterRole) || (role === 'location_admin' && filterRole === 'super_admin'))) {\r\n        return res.status(400).json({ error: 'Invalid filter role provided or insufficient permissions to filter by this role.' });\r\n    }\r\n    if (filterLocationId && isNaN(parseInt(filterLocationId))) {\r\n        return res.status(400).json({ error: 'Invalid filter location ID provided.' });\r\n    }\r\n\r\n\r\n    if (filterRole) {\r\n        if (role === 'super_admin' || (role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin')) || (role === 'employee' && filterRole === 'employee')) {\r\n            sql += ` AND Users.role = ?`;\r\n            params.push(filterRole);\r\n        } else {\r\n            // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by role.' });\r\n        }\r\n    }\r\n    if (filterLocationId) {\r\n        // Ensure location_admin can only filter by their own location\r\n        if (role === 'super_admin' || (role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId)) {\r\n            sql += ` AND Users.location_id = ?`;\r\n            params.push(filterLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by location.' });\r\n        }\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching users:\", err); return next(new Error('Database error fetching users.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/users/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: authenticatedUserId } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete users.' }); }\r\n    if (parseInt(id) === authenticatedUserId) { return res.status(403).json({ error: 'Cannot delete your own super admin account via this interface.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid user ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting user:\", err); return next(new Error('Failed to delete user.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'User not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.post('/api/create-checkout-session', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { planId } = req.body;\r\n    const { userId, email, companyId } = req.user;\r\n\r\n    // Input Validation for planId\r\n    const allowedPlanIds = ['pro', 'enterprise'];\r\n    if (!planId || !allowedPlanIds.includes(planId)) {\r\n        return res.status(400).json({ error: 'Invalid plan ID provided.' });\r\n    }\r\n\r\n    const priceIdMap = {\r\n        'pro': process.env.STRIPE_PRICE_ID_PRO,       // Use environment variable\r\n        'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\r\n    };\r\n    const stripePriceId = priceIdMap[planId];\r\n    if (!stripePriceId) { return res.status(500).json({ error: 'Stripe price ID not configured for this plan.' }); } // Changed from 400 to 500 as this is a server-side config issue\r\n    try {\r\n        let customerId;\r\n        const userRecord = await new Promise((resolve, reject) => {\r\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], (err, row) => {\r\n                if (err) reject(err);\r\n                resolve(row);\r\n            });\r\n        });\r\n        if (userRecord && userRecord.stripe_customer_id) {\r\n            customerId = userRecord.stripe_customer_id;\r\n        } else {\r\n            const customer = await stripeInstance.customers.create({ email: email, metadata: { userId: userId, companyId: companyId, }, });\r\n            customerId = customer.id;\r\n            db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], (err) => {\r\n                if (err) console.error('Failed to save Stripe customer ID to DB:', err);\r\n            });\r\n        }\r\n        const session = await stripeInstance.checkout.sessions.create({\r\n            customer: customerId,\r\n            mode: 'subscription',\r\n            line_items: [{ price: stripePriceId, quantity: 1, }, ],\r\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\r\n            success_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}`,\r\n            cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/pricing.html?payment=cancelled`,\r\n            metadata: { userId: userId, planId: planId, },\r\n        });\r\n        res.status(200).json({ url: session.url });\r\n    } catch (error) { console.error('Error creating Stripe Checkout Session:', error); next(error); } // Pass error\r\n});\r\n\r\napp.post('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_time, end_time, notes } = req.body;\r\n    const { companyId, role, userId: currentUserId } = req.user;\r\n\r\n    // Input Validation for Create Schedule\r\n    if (role !== 'super_admin' && role !== 'location_admin') { return res.status(403).json({ error: 'Access Denied: Only admins can create schedules.' }); }\r\n    if (typeof employee_id !== 'number' || employee_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid employee ID is required.' });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid location ID is required.' });\r\n    }\r\n    if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\r\n        return res.status(400).json({ error: 'Valid start and end times are required.' });\r\n    }\r\n    if (new Date(start_time) >= new Date(end_time)) {\r\n        return res.status(400).json({ error: 'Start time must be before end time.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], (err, employee) => {\r\n        if (err) { console.error(\"Database error verifying employee:\", err); return next(new Error('Database error during employee verification.')); } // Pass error\r\n        if (!employee) { return res.status(400).json({ error: 'Employee not found in your company.' }); }\r\n        db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error verifying location:\", err); return next(new Error('Database error during location verification.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Location not found in your company.' }); }\r\n            db.run(\r\n                'INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes],\r\n                function(insertErr) {\r\n                    if (insertErr) { console.error(\"Database error creating schedule:\", insertErr); return next(new Error('Failed to create schedule.')); } // Pass error\r\n                    res.status(201).json({ message: 'Schedule created successfully!', scheduleId: this.lastID });\r\n                }\r\n            );\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_date, end_date } = req.query;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\r\n               FROM Schedules\r\n               JOIN Users ON Schedules.employee_id = Users.user_id\r\n               JOIN Locations ON Schedules.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND Schedules.location_id = ?`;\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    if (employee_id && isNaN(parseInt(employee_id))) {\r\n        return res.status(400).json({ error: 'Invalid employee ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n    if (start_date && isNaN(new Date(start_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid start date filter provided.' });\r\n    }\r\n    if (end_date && isNaN(new Date(end_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid end date filter provided.' });\r\n    }\r\n\r\n\r\n    if (employee_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(employee_id) === currentUserId) || (role === 'employee' && parseInt(employee_id) === currentUserId))) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole); // This should be employee_id, not filterRole\r\n    }\r\n    if (location_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(location_id) === currentUserLocationId))) {\r\n        sql += ` AND Schedules.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n    if (start_date) {\r\n        sql += ` AND Schedules.start_time >= ?`;\r\n        params.push(start_date);\r\n    }\r\n    if (end_date) {\r\n        sql += ` AND Schedules.end_time <= ?`;\r\n        params.push(end_date);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching schedules:\", err); return next(new Error('Database error fetching schedules.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/schedules/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid schedule ID provided.' });\r\n    }\r\n\r\n    if (role === 'employee') {\r\n        return res.status(403).json({ error: 'Access Denied: Employees cannot delete schedules.' });\r\n    }\r\n\r\n    let sql = `DELETE FROM Schedules WHERE schedule_id = ?`;\r\n    const params = [id];\r\n\r\n    if (role === 'location_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)`;\r\n        params.push(currentUserLocationId, companyId);\r\n    } else if (role === 'super_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)`;\r\n        params.push(companyId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting schedule:\", err); return next(new Error('Failed to delete schedule.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Schedule not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Hiring Routes ---\r\n\r\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\r\napp.post('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, description, requirements, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const created_date = new Date().toISOString(); // Current date/time for creation\r\n\r\n    // Input Validation for Create Job Posting\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can create job postings.' });\r\n    }\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: \"Job title is required and must be a non-empty string.\" });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\r\napp.get('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { status, location_id } = req.query;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Authorization: super_admin sees all, location_admin sees their location's postings\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        // Employees generally shouldn't see job postings list via this admin API\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view job postings.' });\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid job posting status filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n\r\n    if (status) {\r\n        sql += ' AND status = ?';\r\n        params.push(status);\r\n    }\r\n    // Only super admin can filter by any location_id beyond their own scope\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching job postings:\", err); return next(new Error('Database error fetching job postings.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.put('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { title, description, requirements, status, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Job Posting Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update job postings.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n    if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\r\n        return res.status(400).json({ error: 'Job title must be a non-empty string if provided.' });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE JobPostings SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (title !== undefined) { clauses.push('title = ?'); updateParams.push(title); }\r\n    // Line 1009 fix: Ensure this line and surrounding logic is correct.\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    \r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    \r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.delete('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete job postings.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete their own location's postings\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting job posting:\", err); return next(new Error('Failed to delete job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n\r\n// Update Applicant API endpoints to use job_posting_id\r\napp.post('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, full_name, email, notes, location_id, phone_number } = req.body; // Added phone_number\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const application_date = new Date().toISOString(); // Current date/time for application\r\n\r\n    // Input Validation for Adding Applicant\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can add applicants.' });\r\n    }\r\n    if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid job posting ID is required.' });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\r\n    if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\r\n        return res.status(400).json({ error: \"Phone number is required.\" });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    // Verify job_posting_id belongs to the company, and for location_admin, to their location\r\n    db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, jobPosting) => {\r\n        if (err) { console.error(\"Database error verifying job posting:\", err); return next(new Error('Database error when verifying job posting.')); } // Pass error\r\n        if (!jobPosting) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n        \r\n        // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\r\n        if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.' });\r\n        }\r\n\r\n        db.run(\r\n            'INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n            [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date], // Use location_id from payload or job posting\r\n            function(insertErr) {\r\n                if (insertErr) { console.error(\"Database error creating applicant:\", insertErr); return next(new Error('Failed to create applicant.')); } // Pass error\r\n                res.status(201).json({ message: 'Applicant added successfully!', applicantId: this.lastID });\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\napp.get('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, status, location_id } = req.query; // Added job_posting_id, status, location_id filters\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Applicants.*, JobPostings.title AS job_title_name\r\n               FROM Applicants\r\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\r\n               WHERE Applicants.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid applicant status filter provided.' });\r\n    }\r\n    if (job_posting_id && isNaN(parseInt(job_posting_id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n    if (status) {\r\n        sql += ` AND Applicants.status = ?`;\r\n        params.push(status);\r\n    }\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)`; // Location admin sees applicants for their location or unassigned\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Applicants.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view applicants.' });\r\n    }\r\n\r\n    // Apply job_posting_id filter if provided\r\n    if (job_posting_id) {\r\n        sql += ` AND Applicants.job_posting_id = ?`;\r\n        params.push(job_posting_id);\r\n    }\r\n    // Apply location filter from query params for super_admin\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND Applicants.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching applicants:\", err); return next(new Error('Database error fetching applicants.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\r\napp.put('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { full_name, email, status, resume_url, notes, location_id, job_posting_id, phone_number } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Applicant Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update applicant records.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n    if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\r\n        return res.status(400).json({ error: \"Phone number must be a non-empty string if provided.\" });\r\n    }\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (resume_url !== undefined && typeof resume_url !== 'string') { // Assuming resume_url is a string URL\r\n        return res.status(400).json({ error: 'Resume URL must be a string if provided.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n    if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\r\n        return res.status(400).json({ error: 'Job posting ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE Applicants SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (full_name !== undefined) { clauses.push('full_name = ?'); updateParams.push(full_name); }\r\n    if (email !== undefined) { clauses.push('email = ?'); updateParams.push(email); }\r\n    if (phone_number !== undefined) { clauses.push('phone_number = ?'); updateParams.push(phone_number); }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    if (resume_url !== undefined) { clauses.push('resume_url = ?'); updateParams.push(resume_url); }\r\n    if (notes !== undefined) { clauses.push('notes = ?'); updateParams.push(notes); }\r\n    \r\n    // Admins can update location_id or job_posting_id, with restrictions for location_admin\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to another location.' });\r\n            }\r\n            // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n    if (job_posting_id !== undefined) {\r\n         if (role === 'super_admin') {\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        } else if (role === 'location_admin') {\r\n            // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\r\n            db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, job) => {\r\n                if (err) { console.error(\"DB error verifying job posting for update:\", err); return next(new Error('Database error verifying job posting.')); } // Pass error\r\n                if (!job) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n                if (job.location_id !== null && job.location_id !== currentUserLocationId) {\r\n                    return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.' });\r\n                }\r\n            });\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // For location_admin, ensure they can only update applicants within their assigned location\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating applicant:\", err); return next(new Error('Failed to update applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Applicant updated successfully!' });\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\r\napp.delete('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete applicants.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete applicants in their own location\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting applicant:\", err); return next(new Error('Failed to delete applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Document Management Routes ---\r\n\r\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\r\napp.post('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, file_name, file_type, file_url, description } = req.body;\r\n    const { companyId, userId } = req.user;\r\n    const upload_date = new Date().toISOString();\r\n\r\n    // Input Validation for Document Upload\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: 'Document title is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\r\n        return res.status(400).json({ error: 'File name is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\r\n        return res.status(400).json({ error: 'File type is required and must be a non-empty string.' });\r\n    }\r\n    // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\r\n    const urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\r\n    if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\r\n        return res.status(400).json({ error: 'A valid file URL (starting with http or https) is required.' });\r\n    }\r\n    if (description !== undefined && typeof description !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, userId, title, file_name, file_type, file_url, description, upload_date],\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error uploading document:\", err);\r\n                return next(new Error('Failed to upload document metadata.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Document metadata saved successfully!', documentId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\r\napp.get('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, userId, role } = req.user;\r\n    \r\n    let sql = 'SELECT * FROM Documents WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Non-super-admins only see their own documents\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching documents:\", err); return next(new Error('Database error fetching documents.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\r\napp.delete('/api/documents/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, userId, role } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid document ID provided.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Only super_admin or the original uploader can delete\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting document:\", err); return next(new Error('Failed to delete document.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Document not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\r\n// This should always be the LAST route in your Express app\r\napp.get(/'*'/, (req, res) => {\r\n    // Correctly serve the index.html from the parent directory\r\n    res.sendFile(path.join(__dirname, '..', 'index.html'));\r\n});\r\n\r\n// --- Global Error Handling Middleware ---\r\n// This should be the very last middleware in your Express app\r\napp.use((err, req, res, next) => {\r\n    console.error(`Unhandled Error: ${err.stack}`); // Log the full stack trace for debugging\r\n    // Respond with a generic error message for the client\r\n    res.status(500).json({\r\n        error: 'An unexpected server error occurred. Please try again later.',\r\n        // In development, you might send more details:\r\n        // message: err.message,\r\n        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n});\r\n\r\n// --- Server Start ---\r\n// This conditional export allows the app to be imported for testing\r\n// without starting the server listener when the test runner requires it.\r\nif (require.main === module) {\r\n    // Only listen if this file is run directly (not required as a module)\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is running successfully on http://localhost:${PORT}`);\r\n    });\r\n} else {\r\n    // Export the app for testing purposes\r\n    module.exports = app;\r\n}\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1750333852455},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"filename\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\integration.test.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"_exploded\":true,\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$47\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$48\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.27.4:development":{"value":{"code":"\"use strict\";\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// --- Imports ---\nvar express = require('express');\nvar sqlite3 = require('sqlite3').verbose();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar cors = require('cors'); // Import cors\nvar path = require('path');\nvar csv = require('csv-parser'); // For CSV parsing\nvar _require = require('stream'),\n  Readable = _require.Readable; // For creating a readable stream from a string\nvar rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\nvar morgan = require('morgan'); // Import morgan for request logging\n\n// Load environment variables from .env file in development\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\n  require('dotenv').config();\n}\n\n// Import the Stripe library and initialize it with your secret key\n// CRUCIAL FOR TESTING: Remove the hardcoded fallback live key.\n// Ensure process.env.STRIPE_SECRET_KEY is set to a TEST key for development and testing.\nvar stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n// --- App Initialization ---\nvar app = express();\n\n// Configure CORS for production environment\nvar allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\n\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n  allowedOrigins.push('null');\n}\nvar corsOptions = {\n  origin: function origin(_origin, callback) {\n    // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\n    if (!_origin) {\n      // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\n      if (allowedOrigins.includes('null') || process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n        return callback(null, true);\n      }\n      var msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(msg), false);\n    }\n    if (allowedOrigins.indexOf(_origin) === -1) {\n      var _msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(_msg), false);\n    }\n    return callback(null, true);\n  },\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  // Allow cookies to be sent\n  optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\napp.use(cors(corsOptions));\n\n// Use process.env.PORT for production, fallback to 3000 for local development\nvar PORT = process.env.PORT || 3000;\n\n// Define a webhook secret for Stripe. This should also be an environment variable.\nvar STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\n\n// --- Rate Limiting Configuration ---\nvar authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 10,\n  // Max 10 requests per 15 minutes per IP\n  message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\n  standardHeaders: true,\n  // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false // Disable the `X-RateLimit-*` headers\n});\n\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\n// This route needs the raw body for signature verification.\napp.post('/api/stripe-webhook', express.raw({\n  type: 'application/json'\n}), /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req, res) {\n    var sig, event, session, userId, planId, subscriptionUpdated, subscriptionDeleted, invoiceSucceeded, invoiceFailed, _t, _t2;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          sig = req.headers['stripe-signature'];\n          _context.p = 1;\n          event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n          _context.n = 3;\n          break;\n        case 2:\n          _context.p = 2;\n          _t = _context.v;\n          console.error(\"Webhook Error: \".concat(_t.message));\n          return _context.a(2, res.status(400).send(\"Webhook Error: \".concat(_t.message)));\n        case 3:\n          _t2 = event.type;\n          _context.n = _t2 === 'checkout.session.completed' ? 4 : _t2 === 'customer.subscription.updated' ? 5 : _t2 === 'customer.subscription.deleted' ? 6 : _t2 === 'invoice.payment_succeeded' ? 7 : _t2 === 'invoice.payment_failed' ? 8 : 9;\n          break;\n        case 4:\n          session = event.data.object;\n          console.log('Checkout Session Completed:', session.id);\n          userId = session.metadata.userId;\n          planId = session.metadata.planId;\n          if (session.payment_status === 'paid' && userId && planId) {\n            db.run('UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?', [session.customer, session.subscription, 'active', planId, userId], function (err) {\n              if (err) console.error('Database update error for checkout.session.completed:', err.message);else console.log(\"User \".concat(userId, \" subscription updated to \").concat(planId, \" (active).\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 5:\n          subscriptionUpdated = event.data.object;\n          console.log('Subscription Updated:', subscriptionUpdated.id);\n          if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?', [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.updated:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionUpdated.customer, \" status updated to \").concat(subscriptionUpdated.status, \" and plan to \").concat(subscriptionUpdated.plan.id, \".\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 6:\n          subscriptionDeleted = event.data.object;\n          console.log('Subscription Deleted:', subscriptionDeleted.id);\n          if (subscriptionDeleted.customer) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?', ['cancelled', 'free', subscriptionDeleted.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.deleted:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionDeleted.customer, \" marked as cancelled and reverted to free.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 7:\n          invoiceSucceeded = event.data.object;\n          console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\n          if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);else console.log(\"Subscription \".concat(invoiceSucceeded.subscription, \" status set to active.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 8:\n          invoiceFailed = event.data.object;\n          console.log('Invoice Payment Failed:', invoiceFailed.id);\n          if (invoiceFailed.subscription && invoiceFailed.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['past_due', invoiceFailed.subscription, invoiceFailed.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_failed:', err.message);else console.log(\"Subscription \".concat(invoiceFailed.subscription, \" status set to past_due.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 9:\n          console.log(\"Unhandled event type \".concat(event.type));\n        case 10:\n          res.status(200).json({\n            received: true\n          });\n        case 11:\n          return _context.a(2);\n      }\n    }, _callee, null, [[1, 2]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\napp.use(express.json());\n\n// --- JWT Secret ---\n// CRUCIAL FOR TESTING: Remove the fallback value so it MUST come from process.env for tests.\nvar JWT_SECRET = process.env.JWT_SECRET;\n\n// --- Request Logging (using Morgan) ---\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\napp.use(morgan('dev'));\n\n// --- Serve Static Files (Frontend) with Caching ---\n// This middleware serves static files from the 'onboardflow' root directory\n// and sets Cache-Control headers for browser caching.\napp.use(express[\"static\"](path.join(__dirname, '..'), {\n  maxAge: '7d',\n  // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\n  immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\n}));\n\n// --- Database Setup ---\nvar db = new sqlite3.Database('./onboardflow.db', function (err) {\n  if (err) {\n    // Log database connection error and exit\n    console.error(\"Error opening database:\", err.message);\n    process.exit(1); // Exit process if database connection fails\n  } else {\n    console.log(\"Successfully connected to the database.\");\n    db.get(\"PRAGMA foreign_keys = ON\");\n    db.serialize(function () {\n      db.run(\"CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Users (\\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER,\\n                location_id INTEGER,\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL UNIQUE,\\n                password_hash TEXT NOT NULL,\\n                position TEXT,\\n                employee_id TEXT,\\n                role TEXT NOT NULL,\\n                stripe_customer_id TEXT,\\n                stripe_subscription_id TEXT,\\n                subscription_status TEXT,\\n                plan_id TEXT,\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Schedules (\\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                employee_id INTEGER NOT NULL,\\n                location_id INTEGER NOT NULL,\\n                start_time TEXT NOT NULL,\\n                end_time TEXT NOT NULL,\\n                notes TEXT,\\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // NEW: Create JobPostings table\n      db.run(\"CREATE TABLE IF NOT EXISTS JobPostings (\\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: link job posting to a specific location\\n                title TEXT NOT NULL,\\n                description TEXT NOT NULL,\\n                requirements TEXT, -- Optional: job requirements\\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\\n                created_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // Update Applicants table schema to link to JobPostings and add phone_number\n      db.run(\"CREATE TABLE IF NOT EXISTS Applicants (\\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL,\\n                phone_number TEXT, -- NEW: Phone number field\\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\\n                notes TEXT,\\n                application_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\\n            )\");\n      // NEW: Create Documents table for file/video uploads\n      db.run(\"CREATE TABLE IF NOT EXISTS Documents (\\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                user_id INTEGER NOT NULL, -- User who uploaded the document\\n                title TEXT NOT NULL,\\n                file_name TEXT NOT NULL,\\n                file_type TEXT NOT NULL,\\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\\n                description TEXT,\\n                upload_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\\n            )\");\n    });\n  }\n});\n\n// --- Authentication Middleware ---\nfunction authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) {\n    return res.status(401).json({\n      error: 'Unauthorized: No token provided.'\n    });\n  }\n  jwt.verify(token, JWT_SECRET, function (err, user) {\n    if (err) {\n      // Log the specific JWT error for debugging\n      console.error(\"JWT Verification Error:\", err.message);\n      return res.status(403).json({\n        error: 'Forbidden: Invalid or expired token.'\n      });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// --- Helper for Input Validation ---\nvar isValidEmail = function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\n\n// Apply rate limiting to authentication routes\napp.post('/api/register', authLimiter, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(req, res, next) {\n    var _req$body, company_name, full_name, email, password, password_hash, _t3;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          // Added 'next'\n          _req$body = req.body, company_name = _req$body.company_name, full_name = _req$body.full_name, email = _req$body.email, password = _req$body.password; // Input Validation for Registration\n          if (!(!company_name || typeof company_name !== 'string' || company_name.trim() === '')) {\n            _context2.n = 1;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Company name is required and must be a non-empty string.\"\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context2.n = 2;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context2.n = 3;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context2.n = 4;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          _context2.p = 4;\n          _context2.n = 5;\n          return bcrypt.hash(password, 10);\n        case 5:\n          password_hash = _context2.v;\n          db.serialize(function () {\n            db.run('BEGIN TRANSACTION');\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function (err) {\n              if (err) {\n                db.run('ROLLBACK');\n                console.error(\"Database error creating company:\", err);\n                return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\n              }\n              var newCompanyId = this.lastID;\n              db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')\", [newCompanyId, null, full_name, email, password_hash], function (userInsertErr) {\n                if (userInsertErr) {\n                  db.run('ROLLBACK');\n                  console.error(\"Database error creating user:\", userInsertErr);\n                  if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                    return res.status(409).json({\n                      error: 'Email already registered.'\n                    });\n                  }\n                  return next(new Error(\"Could not create user.\")); // Pass error\n                }\n                db.run('COMMIT');\n                res.status(201).json({\n                  message: \"Company and user registered successfully!\",\n                  userId: this.lastID\n                });\n              });\n            });\n          });\n          _context2.n = 7;\n          break;\n        case 6:\n          _context2.p = 6;\n          _t3 = _context2.v;\n          console.error(\"Registration error:\", _t3);\n          next(_t3); // Pass error to error handling middleware\n        case 7:\n          return _context2.a(2);\n      }\n    }, _callee2, null, [[4, 6]]);\n  }));\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/login', authLimiter, function (req, res, next) {\n  // Added 'next'\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n\n  // Input Validation for Login\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  if (!password || typeof password !== 'string' || password.length === 0) {\n    return res.status(400).json({\n      error: \"Password is required.\"\n    });\n  }\n  db.get(\"SELECT * FROM Users WHERE email = ?\", [email], /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(err, user) {\n      var isMatch, payload, token;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (!err) {\n              _context3.n = 1;\n              break;\n            }\n            console.error(\"Database error during login:\", err);\n            return _context3.a(2, next(new Error(\"A server error occurred during login.\")));\n          case 1:\n            if (user) {\n              _context3.n = 2;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 2:\n            _context3.n = 3;\n            return bcrypt.compare(password, user.password_hash);\n          case 3:\n            isMatch = _context3.v;\n            if (isMatch) {\n              _context3.n = 4;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 4:\n            payload = {\n              userId: user.user_id,\n              email: user.email,\n              role: user.role,\n              fullName: user.full_name,\n              companyId: user.company_id,\n              locationId: user.location_id,\n              subscriptionStatus: user.subscription_status,\n              planId: user.plan_id\n            };\n            token = jwt.sign(payload, JWT_SECRET, {\n              expiresIn: '1h'\n            });\n            res.status(200).json({\n              message: \"Login successful!\",\n              token: token,\n              role: user.role\n            });\n          case 5:\n            return _context3.a(2);\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});\napp.post('/api/invite-admin', authenticateToken, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(req, res, next) {\n    var _req$body3, full_name, email, password, location_id, _req$user, companyId, role, password_hash, _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          // Added 'next'\n          _req$body3 = req.body, full_name = _req$body3.full_name, email = _req$body3.email, password = _req$body3.password, location_id = _req$body3.location_id;\n          _req$user = req.user, companyId = _req$user.companyId, role = _req$user.role; // Input Validation for Invite Admin\n          if (!(role !== 'super_admin')) {\n            _context4.n = 1;\n            break;\n          }\n          return _context4.a(2, res.status(403).json({\n            error: 'Access Denied: Only super admins can invite other admins.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context4.n = 3;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context4.n = 4;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          if (!(typeof location_id !== 'number' || location_id <= 0)) {\n            _context4.n = 5;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid location ID is required.\"\n          }));\n        case 5:\n          _context4.p = 5;\n          _context4.n = 6;\n          return bcrypt.hash(password, 10);\n        case 6:\n          password_hash = _context4.v;\n          db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n            if (err) {\n              console.error(\"Database error checking location:\", err);\n              return next(new Error('Database error when verifying location.'));\n            } // Pass error\n            if (!location) {\n              return res.status(400).json({\n                error: 'Selected location does not exist or does not belong to your company.'\n              });\n            }\n            db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash], function (userInsertErr) {\n              if (userInsertErr) {\n                console.error(\"Database error inviting admin:\", userInsertErr);\n                if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                  return res.status(409).json({\n                    error: 'Email already registered.'\n                  });\n                }\n                return next(new Error('Failed to invite admin.')); // Pass error\n              }\n              res.status(201).json({\n                message: \"Location admin invited successfully!\",\n                userId: this.lastID\n              });\n            });\n          });\n          _context4.n = 8;\n          break;\n        case 7:\n          _context4.p = 7;\n          _t4 = _context4.v;\n          console.error(\"Invite admin error:\", _t4);\n          next(_t4);\n        case 8:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[5, 7]]);\n  }));\n  return function (_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\n// NEW: API endpoint for inviting employees\napp.post('/api/invite-employee', authenticateToken, /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(req, res, next) {\n    var _req$body4, full_name, email, password, position, employee_id, location_id, _req$user2, companyId, role, currentUserLocationId, isLocationIdValid, password_hash, locationVerification, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _req$body4 = req.body, full_name = _req$body4.full_name, email = _req$body4.email, password = _req$body4.password, position = _req$body4.position, employee_id = _req$body4.employee_id, location_id = _req$body4.location_id;\n          _req$user2 = req.user, companyId = _req$user2.companyId, role = _req$user2.role, currentUserLocationId = _req$user2.locationId; // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\n          if (['super_admin', 'location_admin'].includes(role)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Only admins can invite employees.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context5.n = 2;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context5.n = 3;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context5.n = 4;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          // Corrected location_id validation: Must be a number > 0.\n          // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\n          // For location_admin, it must match their current location.\n          // This revised logic correctly checks for null OR a valid positive integer.\n          isLocationIdValid = location_id === null || typeof location_id === 'number' && !isNaN(location_id) && location_id > 0;\n          if (isLocationIdValid) {\n            _context5.n = 5;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\"\n          }));\n        case 5:\n          if (!(position !== undefined && typeof position !== 'string')) {\n            _context5.n = 6;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Position must be a string if provided.'\n          }));\n        case 6:\n          if (!(employee_id !== undefined && typeof employee_id !== 'string')) {\n            _context5.n = 7;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Employee ID must be a string if provided.'\n          }));\n        case 7:\n          if (!(role === 'location_admin')) {\n            _context5.n = 8;\n            break;\n          }\n          if (!(location_id !== currentUserLocationId)) {\n            _context5.n = 8;\n            break;\n          }\n          if (location_id === null && currentUserLocationId === null) {\n            _context5.n = 8;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Location admin can only invite employees to their assigned location.'\n          }));\n        case 8:\n          _context5.p = 8;\n          _context5.n = 9;\n          return bcrypt.hash(password, 10);\n        case 9:\n          password_hash = _context5.v;\n          if (!(location_id !== null)) {\n            _context5.n = 11;\n            break;\n          }\n          _context5.n = 10;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n              if (err) reject(err);\n              resolve(location);\n            });\n          });\n        case 10:\n          locationVerification = _context5.v;\n          if (locationVerification) {\n            _context5.n = 11;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Selected location does not exist or does not belong to your company.'\n          }));\n        case 11:\n          db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash, position, employee_id],\n          // Default new employees to 'employee' role\n          function (userInsertErr) {\n            if (userInsertErr) {\n              console.error(\"Database error inviting employee:\", userInsertErr);\n              if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                return res.status(409).json({\n                  error: 'Email already registered.'\n                });\n              }\n              return next(new Error('Failed to invite employee.'));\n            }\n            res.status(201).json({\n              message: \"Employee invited successfully!\",\n              userId: this.lastID\n            });\n          });\n          _context5.n = 13;\n          break;\n        case 12:\n          _context5.p = 12;\n          _t5 = _context5.v;\n          console.error(\"Invite employee error:\", _t5);\n          next(_t5);\n        case 13:\n          return _context5.a(2);\n      }\n    }, _callee5, null, [[8, 12]]);\n  }));\n  return function (_x1, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}());\napp.get('/api/profile', authenticateToken, function (req, res) {\n  var _req$user3 = req.user,\n    userId = _req$user3.userId,\n    fullName = _req$user3.fullName,\n    email = _req$user3.email,\n    role = _req$user3.role,\n    companyId = _req$user3.companyId,\n    locationId = _req$user3.locationId,\n    subscriptionStatus = _req$user3.subscriptionStatus,\n    planId = _req$user3.planId;\n  res.status(200).json({\n    userId: userId,\n    fullName: fullName,\n    email: email,\n    role: role,\n    companyId: companyId,\n    locationId: locationId,\n    subscriptionStatus: subscriptionStatus,\n    planId: planId\n  });\n});\napp.put('/api/profile', authenticateToken, /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(req, res, next) {\n    var _req$body5, fullName, email, currentPassword, newPassword, userId;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          // Added 'next'\n          _req$body5 = req.body, fullName = _req$body5.fullName, email = _req$body5.email, currentPassword = _req$body5.currentPassword, newPassword = _req$body5.newPassword;\n          userId = req.user.userId; // Input Validation for Profile Update\n          if (!(fullName === undefined && email === undefined && (!currentPassword || !newPassword))) {\n            _context7.n = 1;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'No data provided for update.'\n          }));\n        case 1:\n          if (!(fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === ''))) {\n            _context7.n = 2;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"Full name must be a non-empty string if provided.\"\n          }));\n        case 2:\n          if (!(email !== undefined && !isValidEmail(email))) {\n            _context7.n = 3;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"A valid email address must be provided if changing email.\"\n          }));\n        case 3:\n          if (!(newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6))) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"New password must be at least 6 characters long if changing password.\"\n          }));\n        case 4:\n          if (!(currentPassword && !newPassword || !currentPassword && newPassword)) {\n            _context7.n = 5;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'Both current password and new password are required to change password.'\n          }));\n        case 5:\n          db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(err, user) {\n              var updateSql, updateParams, clauses, changesMade, existingUser, isMatch, newPasswordHash, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.n) {\n                  case 0:\n                    if (!err) {\n                      _context6.n = 1;\n                      break;\n                    }\n                    console.error(\"Database error fetching user for profile update:\", err);\n                    return _context6.a(2, next(new Error(\"Server error during profile update.\")));\n                  case 1:\n                    if (user) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    return _context6.a(2, res.status(404).json({\n                      error: \"User not found.\"\n                    }));\n                  case 2:\n                    updateSql = 'UPDATE Users SET ';\n                    updateParams = [];\n                    clauses = [];\n                    changesMade = false;\n                    if (fullName !== undefined && fullName !== user.full_name) {\n                      clauses.push('full_name = ?');\n                      updateParams.push(fullName);\n                      changesMade = true;\n                    }\n                    if (!(email !== undefined && email !== user.email)) {\n                      _context6.n = 8;\n                      break;\n                    }\n                    _context6.p = 3;\n                    _context6.n = 4;\n                    return new Promise(function (resolve, reject) {\n                      db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], function (err, row) {\n                        if (err) reject(err);\n                        resolve(row);\n                      });\n                    });\n                  case 4:\n                    existingUser = _context6.v;\n                    if (!existingUser) {\n                      _context6.n = 5;\n                      break;\n                    }\n                    return _context6.a(2, res.status(409).json({\n                      error: 'Email already in use by another account.'\n                    }));\n                  case 5:\n                    _context6.n = 7;\n                    break;\n                  case 6:\n                    _context6.p = 6;\n                    _t6 = _context6.v;\n                    console.error(\"Database error checking existing email:\", _t6);\n                    return _context6.a(2, next(new Error(\"Server error verifying email availability.\")));\n                  case 7:\n                    clauses.push('email = ?');\n                    updateParams.push(email);\n                    changesMade = true;\n                  case 8:\n                    if (!(currentPassword && newPassword)) {\n                      _context6.n = 12;\n                      break;\n                    }\n                    _context6.n = 9;\n                    return bcrypt.compare(currentPassword, user.password_hash);\n                  case 9:\n                    isMatch = _context6.v;\n                    if (isMatch) {\n                      _context6.n = 10;\n                      break;\n                    }\n                    return _context6.a(2, res.status(401).json({\n                      error: \"Current password incorrect.\"\n                    }));\n                  case 10:\n                    _context6.n = 11;\n                    return bcrypt.hash(newPassword, 10);\n                  case 11:\n                    newPasswordHash = _context6.v;\n                    clauses.push('password_hash = ?');\n                    updateParams.push(newPasswordHash);\n                    changesMade = true;\n                  case 12:\n                    if (changesMade) {\n                      _context6.n = 13;\n                      break;\n                    }\n                    return _context6.a(2, res.status(200).json({\n                      message: 'No changes detected. Profile remains the same.'\n                    }));\n                  case 13:\n                    updateSql += clauses.join(', ') + ' WHERE user_id = ?';\n                    updateParams.push(userId);\n                    db.run(updateSql, updateParams, function (updateErr) {\n                      if (updateErr) {\n                        console.error(\"Database error updating profile:\", updateErr);\n                        return next(new Error('Failed to update profile.'));\n                      } // Pass error\n                      if (this.changes > 0) {\n                        db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], function (fetchErr, updatedUser) {\n                          if (fetchErr || !updatedUser) {\n                            console.error(\"Error fetching updated user for new token:\", fetchErr);\n                            return res.status(200).json({\n                              message: 'Profile updated successfully, but token could not be refreshed.'\n                            });\n                          }\n                          var newPayload = {\n                            userId: updatedUser.user_id,\n                            email: updatedUser.email,\n                            role: updatedUser.role,\n                            fullName: updatedUser.full_name,\n                            companyId: updatedUser.company_id,\n                            locationId: updatedUser.location_id,\n                            subscriptionStatus: updatedUser.subscription_status,\n                            planId: user.plan_id\n                          };\n                          var newToken = jwt.sign(newPayload, JWT_SECRET, {\n                            expiresIn: '1h'\n                          });\n                          res.status(200).json({\n                            message: 'Profile updated successfully!',\n                            token: newToken\n                          });\n                        });\n                      } else {\n                        res.status(200).json({\n                          message: 'No changes applied as data was identical.'\n                        });\n                      }\n                    });\n                  case 14:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[3, 6]]);\n            }));\n            return function (_x15, _x16) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 6:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}());\napp.get('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user4 = req.user,\n    companyId = _req$user4.companyId,\n    role = _req$user4.role;\n  var sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\n  var params = [companyId];\n\n  // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\n  if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view locations.'\n    });\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching locations:\", err);\n      return next(new Error('Database error fetching locations.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp.post('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body6 = req.body,\n    location_name = _req$body6.location_name,\n    location_address = _req$body6.location_address;\n  var _req$user5 = req.user,\n    companyId = _req$user5.companyId,\n    role = _req$user5.role;\n\n  // Input Validation for Create Location\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can create locations.'\n    });\n  }\n  if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Location name is required and must be a non-empty string.\"\n    });\n  }\n  if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\n    return res.status(400).json({\n      error: \"Location address is required and must be a non-empty string.\"\n    });\n  }\n  db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function (err) {\n    if (err) {\n      console.error(\"Database error creating location:\", err);\n      return next(new Error('Failed to create location.'));\n    } // Pass error\n    res.status(201).json({\n      message: 'Location created!',\n      locationId: this.lastID\n    });\n  });\n});\napp[\"delete\"]('/api/locations/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user6 = req.user,\n    companyId = _req$user6.companyId,\n    role = _req$user6.role;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete locations.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID provided.'\n    });\n  }\n  db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting location:\", err);\n      return next(new Error('Failed to delete location.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Location not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.get('/api/users', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user7 = req.user,\n    companyId = _req$user7.companyId,\n    role = _req$user7.role,\n    currentUserId = _req$user7.userId,\n    currentUserLocationId = _req$user7.locationId;\n  var _req$query = req.query,\n    filterRole = _req$query.filterRole,\n    filterLocationId = _req$query.filterLocationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view users.'\n    });\n  }\n\n  // Input validation for filterRole and filterLocationId\n  var allowedRoles = ['super_admin', 'location_admin', 'employee'];\n  if (filterRole && (!allowedRoles.includes(filterRole) || role === 'location_admin' && filterRole === 'super_admin')) {\n    return res.status(400).json({\n      error: 'Invalid filter role provided or insufficient permissions to filter by this role.'\n    });\n  }\n  if (filterLocationId && isNaN(parseInt(filterLocationId))) {\n    return res.status(400).json({\n      error: 'Invalid filter location ID provided.'\n    });\n  }\n  if (filterRole) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole);\n  }\n  if (filterLocationId) {\n    // Ensure location_admin can only filter by their own location\n    if (role === 'super_admin' || role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId) {\n      sql += \" AND Users.location_id = ?\";\n      params.push(filterLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by location.'\n      });\n    }\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching users:\", err);\n      return next(new Error('Database error fetching users.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/users/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user8 = req.user,\n    companyId = _req$user8.companyId,\n    role = _req$user8.role,\n    authenticatedUserId = _req$user8.userId;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete users.'\n    });\n  }\n  if (parseInt(id) === authenticatedUserId) {\n    return res.status(403).json({\n      error: 'Cannot delete your own super admin account via this interface.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid user ID provided.'\n    });\n  }\n  db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting user:\", err);\n      return next(new Error('Failed to delete user.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'User not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.post('/api/create-checkout-session', authenticateToken, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(req, res, next) {\n    var planId, _req$user9, userId, email, companyId, allowedPlanIds, priceIdMap, stripePriceId, customerId, userRecord, customer, session, _t7;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          // Added 'next'\n          planId = req.body.planId;\n          _req$user9 = req.user, userId = _req$user9.userId, email = _req$user9.email, companyId = _req$user9.companyId; // Input Validation for planId\n          allowedPlanIds = ['pro', 'enterprise'];\n          if (!(!planId || !allowedPlanIds.includes(planId))) {\n            _context8.n = 1;\n            break;\n          }\n          return _context8.a(2, res.status(400).json({\n            error: 'Invalid plan ID provided.'\n          }));\n        case 1:\n          priceIdMap = {\n            'pro': process.env.STRIPE_PRICE_ID_PRO,\n            // Use environment variable\n            'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\n          };\n          stripePriceId = priceIdMap[planId];\n          if (stripePriceId) {\n            _context8.n = 2;\n            break;\n          }\n          return _context8.a(2, res.status(500).json({\n            error: 'Stripe price ID not configured for this plan.'\n          }));\n        case 2:\n          _context8.p = 2;\n          _context8.n = 3;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], function (err, row) {\n              if (err) reject(err);\n              resolve(row);\n            });\n          });\n        case 3:\n          userRecord = _context8.v;\n          if (!(userRecord && userRecord.stripe_customer_id)) {\n            _context8.n = 4;\n            break;\n          }\n          customerId = userRecord.stripe_customer_id;\n          _context8.n = 6;\n          break;\n        case 4:\n          _context8.n = 5;\n          return stripeInstance.customers.create({\n            email: email,\n            metadata: {\n              userId: userId,\n              companyId: companyId\n            }\n          });\n        case 5:\n          customer = _context8.v;\n          customerId = customer.id;\n          db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], function (err) {\n            if (err) console.error('Failed to save Stripe customer ID to DB:', err);\n          });\n        case 6:\n          _context8.n = 7;\n          return stripeInstance.checkout.sessions.create({\n            customer: customerId,\n            mode: 'subscription',\n            line_items: [{\n              price: stripePriceId,\n              quantity: 1\n            }],\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\n            success_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}\"),\n            cancel_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/pricing.html?payment=cancelled\"),\n            metadata: {\n              userId: userId,\n              planId: planId\n            }\n          });\n        case 7:\n          session = _context8.v;\n          res.status(200).json({\n            url: session.url\n          });\n          _context8.n = 9;\n          break;\n        case 8:\n          _context8.p = 8;\n          _t7 = _context8.v;\n          console.error('Error creating Stripe Checkout Session:', _t7);\n          next(_t7);\n        case 9:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[2, 8]]);\n  }));\n  return function (_x17, _x18, _x19) {\n    return _ref8.apply(this, arguments);\n  };\n}());\napp.post('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body7 = req.body,\n    employee_id = _req$body7.employee_id,\n    location_id = _req$body7.location_id,\n    start_time = _req$body7.start_time,\n    end_time = _req$body7.end_time,\n    notes = _req$body7.notes;\n  var _req$user0 = req.user,\n    companyId = _req$user0.companyId,\n    role = _req$user0.role,\n    currentUserId = _req$user0.userId;\n\n  // Input Validation for Create Schedule\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create schedules.'\n    });\n  }\n  if (typeof employee_id !== 'number' || employee_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid employee ID is required.'\n    });\n  }\n  if (typeof location_id !== 'number' || location_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid location ID is required.'\n    });\n  }\n  if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\n    return res.status(400).json({\n      error: 'Valid start and end times are required.'\n    });\n  }\n  if (new Date(start_time) >= new Date(end_time)) {\n    return res.status(400).json({\n      error: 'Start time must be before end time.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], function (err, employee) {\n    if (err) {\n      console.error(\"Database error verifying employee:\", err);\n      return next(new Error('Database error during employee verification.'));\n    } // Pass error\n    if (!employee) {\n      return res.status(400).json({\n        error: 'Employee not found in your company.'\n      });\n    }\n    db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n      if (err) {\n        console.error(\"Database error verifying location:\", err);\n        return next(new Error('Database error during location verification.'));\n      } // Pass error\n      if (!location) {\n        return res.status(400).json({\n          error: 'Location not found in your company.'\n        });\n      }\n      db.run('INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes], function (insertErr) {\n        if (insertErr) {\n          console.error(\"Database error creating schedule:\", insertErr);\n          return next(new Error('Failed to create schedule.'));\n        } // Pass error\n        res.status(201).json({\n          message: 'Schedule created successfully!',\n          scheduleId: this.lastID\n        });\n      });\n    });\n  });\n});\napp.get('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query2 = req.query,\n    employee_id = _req$query2.employee_id,\n    location_id = _req$query2.location_id,\n    start_date = _req$query2.start_date,\n    end_date = _req$query2.end_date;\n  var _req$user1 = req.user,\n    companyId = _req$user1.companyId,\n    role = _req$user1.role,\n    currentUserId = _req$user1.userId,\n    currentUserLocationId = _req$user1.locationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  }\n\n  // Input validation for query parameters\n  if (employee_id && isNaN(parseInt(employee_id))) {\n    return res.status(400).json({\n      error: 'Invalid employee ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (start_date && isNaN(new Date(start_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid start date filter provided.'\n    });\n  }\n  if (end_date && isNaN(new Date(end_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid end date filter provided.'\n    });\n  }\n  if (employee_id && (role === 'super_admin' || role === 'location_admin' && parseInt(employee_id) === currentUserId || role === 'employee' && parseInt(employee_id) === currentUserId)) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole); // This should be employee_id, not filterRole\n  }\n  if (location_id && (role === 'super_admin' || role === 'location_admin' && parseInt(location_id) === currentUserLocationId)) {\n    sql += \" AND Users.location_id = ?\";\n    params.push(location_id);\n  }\n  if (start_date) {\n    sql += \" AND Schedules.start_time >= ?\";\n    params.push(start_date);\n  }\n  if (end_date) {\n    sql += \" AND Schedules.end_time <= ?\";\n    params.push(end_date);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching schedules:\", err);\n      return next(new Error('Database error fetching schedules.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/schedules/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user10 = req.user,\n    companyId = _req$user10.companyId,\n    role = _req$user10.role,\n    currentUserId = _req$user10.userId,\n    currentUserLocationId = _req$user10.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid schedule ID provided.'\n    });\n  }\n  if (role === 'employee') {\n    return res.status(403).json({\n      error: 'Access Denied: Employees cannot delete schedules.'\n    });\n  }\n  var sql = \"DELETE FROM Schedules WHERE schedule_id = ?\";\n  var params = [id];\n  if (role === 'location_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)\";\n    params.push(currentUserLocationId, companyId);\n  } else if (role === 'super_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)\";\n    params.push(companyId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting schedule:\", err);\n      return next(new Error('Failed to delete schedule.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Schedule not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Hiring Routes ---\n\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\napp.post('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body8 = req.body,\n    title = _req$body8.title,\n    description = _req$body8.description,\n    requirements = _req$body8.requirements,\n    location_id = _req$body8.location_id;\n  var _req$user11 = req.user,\n    companyId = _req$user11.companyId,\n    role = _req$user11.role,\n    currentUserLocationId = _req$user11.locationId;\n  var created_date = new Date().toISOString(); // Current date/time for creation\n\n  // Input Validation for Create Job Posting\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create job postings.'\n    });\n  }\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: \"Job title is required and must be a non-empty string.\"\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\napp.get('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query3 = req.query,\n    status = _req$query3.status,\n    location_id = _req$query3.location_id;\n  var _req$user12 = req.user,\n    companyId = _req$user12.companyId,\n    role = _req$user12.role,\n    currentUserLocationId = _req$user12.locationId;\n  var sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\n  var params = [companyId];\n\n  // Authorization: super_admin sees all, location_admin sees their location's postings\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    // Employees generally shouldn't see job postings list via this admin API\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view job postings.'\n    });\n  }\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid job posting status filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += ' AND status = ?';\n    params.push(status);\n  }\n  // Only super admin can filter by any location_id beyond their own scope\n  if (location_id && role === 'super_admin') {\n    sql += \" AND location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching job postings:\", err);\n      return next(new Error('Database error fetching job postings.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp.put('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body9 = req.body,\n    title = _req$body9.title,\n    description = _req$body9.description,\n    requirements = _req$body9.requirements,\n    status = _req$body9.status,\n    location_id = _req$body9.location_id;\n  var _req$user13 = req.user,\n    companyId = _req$user13.companyId,\n    role = _req$user13.role,\n    currentUserLocationId = _req$user13.locationId;\n\n  // Input Validation for Job Posting Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update job postings.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\n    return res.status(400).json({\n      error: 'Job title must be a non-empty string if provided.'\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  var allowedStatuses = ['Open', 'Closed', 'Filled'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE JobPostings SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (title !== undefined) {\n    clauses.push('title = ?');\n    updateParams.push(title);\n  }\n  // Line 1009 fix: Ensure this line and surrounding logic is correct.\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp[\"delete\"]('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user14 = req.user,\n    companyId = _req$user14.companyId,\n    role = _req$user14.role,\n    currentUserLocationId = _req$user14.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete job postings.'\n    });\n  }\n  var sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete their own location's postings\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting job posting:\", err);\n      return next(new Error('Failed to delete job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Update Applicant API endpoints to use job_posting_id\napp.post('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body0 = req.body,\n    job_posting_id = _req$body0.job_posting_id,\n    full_name = _req$body0.full_name,\n    email = _req$body0.email,\n    notes = _req$body0.notes,\n    location_id = _req$body0.location_id,\n    phone_number = _req$body0.phone_number; // Added phone_number\n  var _req$user15 = req.user,\n    companyId = _req$user15.companyId,\n    role = _req$user15.role,\n    currentUserLocationId = _req$user15.locationId;\n  var application_date = new Date().toISOString(); // Current date/time for application\n\n  // Input Validation for Adding Applicant\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can add applicants.'\n    });\n  }\n  if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid job posting ID is required.'\n    });\n  }\n  if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Full name is required and must be a non-empty string.\"\n    });\n  }\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\n  if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\n    return res.status(400).json({\n      error: \"Phone number is required.\"\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // Verify job_posting_id belongs to the company, and for location_admin, to their location\n  db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, jobPosting) {\n    if (err) {\n      console.error(\"Database error verifying job posting:\", err);\n      return next(new Error('Database error when verifying job posting.'));\n    } // Pass error\n    if (!jobPosting) {\n      return res.status(400).json({\n        error: 'Job Posting not found or does not belong to your company.'\n      });\n    }\n\n    // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\n    if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.'\n      });\n    }\n    db.run('INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date],\n    // Use location_id from payload or job posting\n    function (insertErr) {\n      if (insertErr) {\n        console.error(\"Database error creating applicant:\", insertErr);\n        return next(new Error('Failed to create applicant.'));\n      } // Pass error\n      res.status(201).json({\n        message: 'Applicant added successfully!',\n        applicantId: this.lastID\n      });\n    });\n  });\n});\napp.get('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query4 = req.query,\n    job_posting_id = _req$query4.job_posting_id,\n    status = _req$query4.status,\n    location_id = _req$query4.location_id; // Added job_posting_id, status, location_id filters\n  var _req$user16 = req.user,\n    companyId = _req$user16.companyId,\n    role = _req$user16.role,\n    currentUserLocationId = _req$user16.locationId;\n  var sql = \"SELECT Applicants.*, JobPostings.title AS job_title_name\\n               FROM Applicants\\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\\n               WHERE Applicants.company_id = ?\";\n  var params = [companyId];\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid applicant status filter provided.'\n    });\n  }\n  if (job_posting_id && isNaN(parseInt(job_posting_id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += \" AND Applicants.status = ?\";\n    params.push(status);\n  }\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)\"; // Location admin sees applicants for their location or unassigned\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Applicants.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view applicants.'\n    });\n  }\n\n  // Apply job_posting_id filter if provided\n  if (job_posting_id) {\n    sql += \" AND Applicants.job_posting_id = ?\";\n    params.push(job_posting_id);\n  }\n  // Apply location filter from query params for super_admin\n  if (location_id && role === 'super_admin') {\n    sql += \" AND Applicants.location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching applicants:\", err);\n      return next(new Error('Database error fetching applicants.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\napp.put('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body1 = req.body,\n    full_name = _req$body1.full_name,\n    email = _req$body1.email,\n    status = _req$body1.status,\n    resume_url = _req$body1.resume_url,\n    notes = _req$body1.notes,\n    location_id = _req$body1.location_id,\n    job_posting_id = _req$body1.job_posting_id,\n    phone_number = _req$body1.phone_number;\n  var _req$user17 = req.user,\n    companyId = _req$user17.companyId,\n    role = _req$user17.role,\n    currentUserLocationId = _req$user17.locationId;\n\n  // Input Validation for Applicant Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update applicant records.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\n    return res.status(400).json({\n      error: \"Full name must be a non-empty string if provided.\"\n    });\n  }\n  if (email !== undefined && !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address must be provided if changing email.\"\n    });\n  }\n  if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\n    return res.status(400).json({\n      error: \"Phone number must be a non-empty string if provided.\"\n    });\n  }\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (resume_url !== undefined && typeof resume_url !== 'string') {\n    // Assuming resume_url is a string URL\n    return res.status(400).json({\n      error: 'Resume URL must be a string if provided.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\n    return res.status(400).json({\n      error: 'Job posting ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE Applicants SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (full_name !== undefined) {\n    clauses.push('full_name = ?');\n    updateParams.push(full_name);\n  }\n  if (email !== undefined) {\n    clauses.push('email = ?');\n    updateParams.push(email);\n  }\n  if (phone_number !== undefined) {\n    clauses.push('phone_number = ?');\n    updateParams.push(phone_number);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n  if (resume_url !== undefined) {\n    clauses.push('resume_url = ?');\n    updateParams.push(resume_url);\n  }\n  if (notes !== undefined) {\n    clauses.push('notes = ?');\n    updateParams.push(notes);\n  }\n\n  // Admins can update location_id or job_posting_id, with restrictions for location_admin\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot assign applicants to another location.'\n        });\n      }\n      // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (job_posting_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    } else if (role === 'location_admin') {\n      // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\n      db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, job) {\n        if (err) {\n          console.error(\"DB error verifying job posting for update:\", err);\n          return next(new Error('Database error verifying job posting.'));\n        } // Pass error\n        if (!job) {\n          return res.status(400).json({\n            error: 'Job Posting not found or does not belong to your company.'\n          });\n        }\n        if (job.location_id !== null && job.location_id !== currentUserLocationId) {\n          return res.status(403).json({\n            error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.'\n          });\n        }\n      });\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // For location_admin, ensure they can only update applicants within their assigned location\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating applicant:\", err);\n      return next(new Error('Failed to update applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Applicant updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\napp[\"delete\"]('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user18 = req.user,\n    companyId = _req$user18.companyId,\n    role = _req$user18.role,\n    currentUserLocationId = _req$user18.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete applicants.'\n    });\n  }\n  var sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete applicants in their own location\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting applicant:\", err);\n      return next(new Error('Failed to delete applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Document Management Routes ---\n\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\napp.post('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body10 = req.body,\n    title = _req$body10.title,\n    file_name = _req$body10.file_name,\n    file_type = _req$body10.file_type,\n    file_url = _req$body10.file_url,\n    description = _req$body10.description;\n  var _req$user19 = req.user,\n    companyId = _req$user19.companyId,\n    userId = _req$user19.userId;\n  var upload_date = new Date().toISOString();\n\n  // Input Validation for Document Upload\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: 'Document title is required and must be a non-empty string.'\n    });\n  }\n  if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\n    return res.status(400).json({\n      error: 'File name is required and must be a non-empty string.'\n    });\n  }\n  if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\n    return res.status(400).json({\n      error: 'File type is required and must be a non-empty string.'\n    });\n  }\n  // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\n  var urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\n  if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\n    return res.status(400).json({\n      error: 'A valid file URL (starting with http or https) is required.'\n    });\n  }\n  if (description !== undefined && typeof description !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.run('INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, userId, title, file_name, file_type, file_url, description, upload_date], function (err) {\n    if (err) {\n      console.error(\"Database error uploading document:\", err);\n      return next(new Error('Failed to upload document metadata.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Document metadata saved successfully!',\n      documentId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\napp.get('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user20 = req.user,\n    companyId = _req$user20.companyId,\n    userId = _req$user20.userId,\n    role = _req$user20.role;\n  var sql = 'SELECT * FROM Documents WHERE company_id = ?';\n  var params = [companyId];\n\n  // Non-super-admins only see their own documents\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching documents:\", err);\n      return next(new Error('Database error fetching documents.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\napp[\"delete\"]('/api/documents/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user21 = req.user,\n    companyId = _req$user21.companyId,\n    userId = _req$user21.userId,\n    role = _req$user21.role;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid document ID provided.'\n    });\n  }\n  var sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Only super_admin or the original uploader can delete\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting document:\", err);\n      return next(new Error('Failed to delete document.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Document not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\n// This should always be the LAST route in your Express app\napp.get(/'*'/, function (req, res) {\n  // Correctly serve the index.html from the parent directory\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// --- Global Error Handling Middleware ---\n// This should be the very last middleware in your Express app\napp.use(function (err, req, res, next) {\n  console.error(\"Unhandled Error: \".concat(err.stack)); // Log the full stack trace for debugging\n  // Respond with a generic error message for the client\n  res.status(500).json({\n    error: 'An unexpected server error occurred. Please try again later.'\n    // In development, you might send more details:\n    // message: err.message,\n    // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// --- Server Start ---\n// This conditional export allows the app to be imported for testing\n// without starting the server listener when the test runner requires it.\nif (require.main === module) {\n  // Only listen if this file is run directly (not required as a module)\n  app.listen(PORT, function () {\n    console.log(\"Server is running successfully on http://localhost:\".concat(PORT));\n  });\n} else {\n  // Export the app for testing purposes\n  module.exports = app;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","express","require","sqlite3","verbose","bcrypt","jwt","cors","path","csv","_require","Readable","rateLimit","morgan","process","env","NODE_ENV","main","module","config","stripeInstance","STRIPE_SECRET_KEY","app","allowedOrigins","CORS_ORIGIN","split","push","corsOptions","origin","callback","includes","msg","Error","indexOf","methods","credentials","optionsSuccessStatus","use","PORT","STRIPE_WEBHOOK_SECRET","authLimiter","windowMs","max","message","standardHeaders","legacyHeaders","post","raw","type","_ref","_callee","req","res","sig","event","session","userId","planId","subscriptionUpdated","subscriptionDeleted","invoiceSucceeded","invoiceFailed","_t","_t2","_context","headers","webhooks","constructEvent","body","console","error","concat","status","send","data","object","log","id","metadata","payment_status","db","run","customer","subscription","err","plan","json","received","_x","_x2","JWT_SECRET","join","__dirname","maxAge","immutable","Database","exit","get","serialize","authenticateToken","next","authHeader","token","verify","user","isValidEmail","email","test","_ref2","_callee2","_req$body","company_name","full_name","password","password_hash","_t3","_context2","trim","hash","newCompanyId","lastID","userInsertErr","_x3","_x4","_x5","_req$body2","_ref3","_callee3","isMatch","payload","_context3","compare","user_id","role","fullName","companyId","company_id","locationId","location_id","subscriptionStatus","subscription_status","plan_id","sign","expiresIn","_x6","_x7","_ref4","_callee4","_req$body3","_req$user","_t4","_context4","location","_x8","_x9","_x0","_ref5","_callee5","_req$body4","position","employee_id","_req$user2","currentUserLocationId","isLocationIdValid","locationVerification","_t5","_context5","isNaN","undefined","reject","_x1","_x10","_x11","_req$user3","put","_ref6","_callee7","_req$body5","currentPassword","newPassword","_context7","_ref7","_callee6","updateSql","updateParams","clauses","changesMade","existingUser","newPasswordHash","_t6","_context6","row","updateErr","changes","fetchErr","updatedUser","newPayload","newToken","_x15","_x16","_x12","_x13","_x14","_req$user4","sql","params","all","rows","_req$body6","location_name","location_address","_req$user5","_req$user6","parseInt","_req$user7","currentUserId","_req$query","query","filterRole","filterLocationId","allowedRoles","_req$user8","authenticatedUserId","_ref8","_callee8","_req$user9","allowedPlanIds","priceIdMap","stripePriceId","customerId","userRecord","_t7","_context8","STRIPE_PRICE_ID_PRO","STRIPE_PRICE_ID_ENT","stripe_customer_id","customers","checkout","sessions","mode","line_items","price","quantity","success_url","FRONTEND_URL","cancel_url","url","_x17","_x18","_x19","_req$body7","start_time","end_time","notes","_req$user0","Date","getTime","employee","insertErr","scheduleId","_req$query2","start_date","end_date","_req$user1","_req$user10","_req$body8","title","description","requirements","_req$user11","created_date","toISOString","_req$query3","_req$user12","allowedStatuses","_req$body9","_req$user13","_req$user14","_req$body0","job_posting_id","phone_number","_req$user15","application_date","jobPosting","applicantId","_req$query4","_req$user16","_req$body1","resume_url","_req$user17","job","_req$user18","_req$body10","file_name","file_type","file_url","_req$user19","upload_date","urlRegex","documentId","_req$user20","_req$user21","sendFile","stack","listen","exports"],"sourceRoot":"C:\\Users\\xarcy\\OneDrive\\Desktop\\onboardflow\\backend\\test\\","sources":["integration.test.cjs"],"sourcesContent":["// --- Imports ---\r\nconst express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors'); // Import cors\r\nconst path = require('path');\r\nconst csv = require('csv-parser'); // For CSV parsing\r\nconst { Readable } = require('stream'); // For creating a readable stream from a string\r\nconst rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\r\nconst morgan = require('morgan'); // Import morgan for request logging\r\n\r\n// Load environment variables from .env file in development\r\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\r\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\r\n    require('dotenv').config();\r\n}\r\n\r\n// Import the Stripe library and initialize it with your secret key\r\n// CRUCIAL FOR TESTING: Remove the hardcoded fallback live key.\r\n// Ensure process.env.STRIPE_SECRET_KEY is set to a TEST key for development and testing.\r\nconst stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY); \r\n\r\n// --- App Initialization ---\r\nconst app = express();\r\n\r\n// Configure CORS for production environment\r\nconst allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\r\n\r\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\r\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\r\n    allowedOrigins.push('null');\r\n}\r\n\r\nconst corsOptions = {\r\n    origin: function (origin, callback) {\r\n        // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\r\n        if (!origin) {\r\n            // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\r\n            if (allowedOrigins.includes('null') || (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN)) {\r\n                return callback(null, true);\r\n            }\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n\r\n        if (allowedOrigins.indexOf(origin) === -1) {\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n        return callback(null, true);\r\n    },\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Allow cookies to be sent\r\n    optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n\r\n// Use process.env.PORT for production, fallback to 3000 for local development\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Define a webhook secret for Stripe. This should also be an environment variable.\r\nconst STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\r\n\r\n// --- Rate Limiting Configuration ---\r\nconst authLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 10, // Max 10 requests per 15 minutes per IP\r\n    message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\r\n// This route needs the raw body for signature verification.\r\napp.post('/api/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {\r\n    const sig = req.headers['stripe-signature'];\r\n\r\n    let event;\r\n\r\n    try {\r\n        event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n    } catch (err) {\r\n        console.error(`Webhook Error: ${err.message}`);\r\n        return res.status(400).send(`Webhook Error: ${err.message}`);\r\n    }\r\n\r\n    // Handle the event\r\n    switch (event.type) {\r\n        case 'checkout.session.completed':\r\n            const session = event.data.object;\r\n            console.log('Checkout Session Completed:', session.id);\r\n            const userId = session.metadata.userId;\r\n            const planId = session.metadata.planId;\r\n            if (session.payment_status === 'paid' && userId && planId) {\r\n                db.run(\r\n                    'UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?',\r\n                    [session.customer, session.subscription, 'active', planId, userId],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for checkout.session.completed:', err.message);\r\n                        else console.log(`User ${userId} subscription updated to ${planId} (active).`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.updated':\r\n            const subscriptionUpdated = event.data.object;\r\n            console.log('Subscription Updated:', subscriptionUpdated.id);\r\n            if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?',\r\n                    [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.updated:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionUpdated.customer} status updated to ${subscriptionUpdated.status} and plan to ${subscriptionUpdated.plan.id}.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.deleted':\r\n            const subscriptionDeleted = event.data.object;\r\n            console.log('Subscription Deleted:', subscriptionDeleted.id);\r\n            if (subscriptionDeleted.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?',\r\n                    ['cancelled', 'free', subscriptionDeleted.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.deleted:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionDeleted.customer} marked as cancelled and reverted to free.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_succeeded':\r\n            const invoiceSucceeded = event.data.object;\r\n            console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\r\n            if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);\r\n                        else console.log(`Subscription ${invoiceSucceeded.subscription} status set to active.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_failed':\r\n            const invoiceFailed = event.data.object;\r\n            console.log('Invoice Payment Failed:', invoiceFailed.id);\r\n            if (invoiceFailed.subscription && invoiceFailed.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['past_due', invoiceFailed.subscription, invoiceFailed.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_failed:', err.message);\r\n                        else console.log(`Subscription ${invoiceFailed.subscription} status set to past_due.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        default:\r\n            console.log(`Unhandled event type ${event.type}`);\r\n    }\r\n    res.status(200).json({ received: true });\r\n});\r\n\r\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\r\napp.use(express.json());\r\n\r\n// --- JWT Secret ---\r\n// CRUCIAL FOR TESTING: Remove the fallback value so it MUST come from process.env for tests.\r\nconst JWT_SECRET = process.env.JWT_SECRET; \r\n\r\n// --- Request Logging (using Morgan) ---\r\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\r\napp.use(morgan('dev'));\r\n\r\n// --- Serve Static Files (Frontend) with Caching ---\r\n// This middleware serves static files from the 'onboardflow' root directory\r\n// and sets Cache-Control headers for browser caching.\r\napp.use(express.static(path.join(__dirname, '..'), {\r\n    maxAge: '7d', // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\r\n    immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\r\n}));\r\n\r\n// --- Database Setup ---\r\nconst db = new sqlite3.Database('./onboardflow.db', (err) => {\r\n    if (err) {\r\n        // Log database connection error and exit\r\n        console.error(\"Error opening database:\", err.message);\r\n        process.exit(1); // Exit process if database connection fails\r\n    } else {\r\n        console.log(\"Successfully connected to the database.\");\r\n        db.get(\"PRAGMA foreign_keys = ON\");\r\n        db.serialize(() => {\r\n            db.run(`CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Users (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER,\r\n                location_id INTEGER,\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL UNIQUE,\r\n                password_hash TEXT NOT NULL,\r\n                position TEXT,\r\n                employee_id TEXT,\r\n                role TEXT NOT NULL,\r\n                stripe_customer_id TEXT,\r\n                stripe_subscription_id TEXT,\r\n                subscription_status TEXT,\r\n                plan_id TEXT,\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Schedules (\r\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                employee_id INTEGER NOT NULL,\r\n                location_id INTEGER NOT NULL,\r\n                start_time TEXT NOT NULL,\r\n                end_time TEXT NOT NULL,\r\n                notes TEXT,\r\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // NEW: Create JobPostings table\r\n            db.run(`CREATE TABLE IF NOT EXISTS JobPostings (\r\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: link job posting to a specific location\r\n                title TEXT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                requirements TEXT, -- Optional: job requirements\r\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\r\n                created_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // Update Applicants table schema to link to JobPostings and add phone_number\r\n            db.run(`CREATE TABLE IF NOT EXISTS Applicants (\r\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\r\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL,\r\n                phone_number TEXT, -- NEW: Phone number field\r\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\r\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\r\n                notes TEXT,\r\n                application_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\r\n            )`);\r\n            // NEW: Create Documents table for file/video uploads\r\n            db.run(`CREATE TABLE IF NOT EXISTS Documents (\r\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL, -- User who uploaded the document\r\n                title TEXT NOT NULL,\r\n                file_name TEXT NOT NULL,\r\n                file_type TEXT NOT NULL,\r\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\r\n                description TEXT,\r\n                upload_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\r\n            )`);\r\n        });\r\n    }\r\n});\r\n\r\n// --- Authentication Middleware ---\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1];\r\n    if (token == null) {\r\n        return res.status(401).json({ error: 'Unauthorized: No token provided.' });\r\n    }\r\n    jwt.verify(token, JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            // Log the specific JWT error for debugging\r\n            console.error(\"JWT Verification Error:\", err.message);\r\n            return res.status(403).json({ error: 'Forbidden: Invalid or expired token.' });\r\n        }\r\n        req.user = user;\r\n        next();\r\n    });\r\n}\r\n\r\n// --- Helper for Input Validation ---\r\nconst isValidEmail = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\r\n\r\n// Apply rate limiting to authentication routes\r\napp.post('/api/register', authLimiter, async (req, res, next) => { // Added 'next'\r\n    const { company_name, full_name, email, password } = req.body;\r\n\r\n    // Input Validation for Registration\r\n    if (!company_name || typeof company_name !== 'string' || company_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Company name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Password is required and must be at least 6 characters long.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.serialize(() => {\r\n            db.run('BEGIN TRANSACTION');\r\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function(err) {\r\n                if (err) { \r\n                    db.run('ROLLBACK'); \r\n                    console.error(\"Database error creating company:\", err);\r\n                    return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\r\n                }\r\n                const newCompanyId = this.lastID;\r\n                db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')`, [newCompanyId, null, full_name, email, password_hash], function(userInsertErr) {\r\n                    if (userInsertErr) { \r\n                        db.run('ROLLBACK'); \r\n                        console.error(\"Database error creating user:\", userInsertErr);\r\n                        if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { \r\n                            return res.status(409).json({ error: 'Email already registered.' }); \r\n                        }\r\n                        return next(new Error(\"Could not create user.\")); // Pass error\r\n                    }\r\n                    db.run('COMMIT');\r\n                    res.status(201).json({ message: \"Company and user registered successfully!\", userId: this.lastID });\r\n                });\r\n            });\r\n        });\r\n    } catch (error) { \r\n        console.error(\"Registration error:\", error);\r\n        next(error); // Pass error to error handling middleware\r\n    }\r\n});\r\n\r\napp.post('/api/login', authLimiter, (req, res, next) => { // Added 'next'\r\n    const { email, password } = req.body;\r\n\r\n    // Input Validation for Login\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length === 0) {\r\n        return res.status(400).json({ error: \"Password is required.\" });\r\n    }\r\n\r\n    db.get(\"SELECT * FROM Users WHERE email = ?\", [email], async (err, user) => {\r\n        if (err) {\r\n            console.error(\"Database error during login:\", err);\r\n            return next(new Error(\"A server error occurred during login.\")); // Pass error\r\n        }\r\n        if (!user) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const isMatch = await bcrypt.compare(password, user.password_hash);\r\n        if (!isMatch) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const payload = { userId: user.user_id, email: user.email, role: user.role, fullName: user.full_name, companyId: user.company_id, locationId: user.location_id, subscriptionStatus: user.subscription_status, planId: user.plan_id };\r\n        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });\r\n        res.status(200).json({ message: \"Login successful!\", token, role: user.role });\r\n    });\r\n});\r\n\r\napp.post('/api/invite-admin', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { full_name, email, password, location_id } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Invite Admin\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can invite other admins.' }); }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) { // Assuming location_id is an integer ID\r\n        return res.status(400).json({ error: \"A valid location ID is required.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error checking location:\", err); return next(new Error('Database error when verifying location.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' }); }\r\n            db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')`, [companyId, location_id, full_name, email, password_hash], function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting admin:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite admin.')); // Pass error\r\n                }\r\n                res.status(201).json({ message: \"Location admin invited successfully!\", userId: this.lastID });\r\n            });\r\n        });\r\n    } catch (error) { console.error(\"Invite admin error:\", error); next(error); } // Pass error\r\n});\r\n\r\n// NEW: API endpoint for inviting employees\r\napp.post('/api/invite-employee', authenticateToken, async (req, res, next) => {\r\n    const { full_name, email, password, position, employee_id, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\r\n    if (!['super_admin', 'location_admin'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can invite employees.' });\r\n    }\r\n\r\n    // Input Validation for Invite Employee\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    \r\n    // Corrected location_id validation: Must be a number > 0.\r\n    // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\r\n    // For location_admin, it must match their current location.\r\n    // This revised logic correctly checks for null OR a valid positive integer.\r\n    const isLocationIdValid = location_id === null || (typeof location_id === 'number' && !isNaN(location_id) && location_id > 0);\r\n    if (!isLocationIdValid) {\r\n        return res.status(400).json({ error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\" });\r\n    }\r\n    \r\n    if (position !== undefined && typeof position !== 'string') {\r\n        return res.status(400).json({ error: 'Position must be a string if provided.' });\r\n    }\r\n    if (employee_id !== undefined && typeof employee_id !== 'string') {\r\n        return res.status(400).json({ error: 'Employee ID must be a string if provided.' });\r\n    }\r\n\r\n    // Location Admin specific check: ensure they are inviting to their assigned location or null\r\n    // If location_admin tries to set a location that is NOT their own, block it.\r\n    // Allow location_admin to set to null if their current location is null.\r\n    if (role === 'location_admin') {\r\n        // A location admin can ONLY assign an employee to their own location or to null (unassigned)\r\n        if (location_id !== currentUserLocationId) {\r\n            // If the target location_id is not the current user's location, check if both are null\r\n            if (!(location_id === null && currentUserLocationId === null)) {\r\n                return res.status(403).json({ error: 'Access Denied: Location admin can only invite employees to their assigned location.' });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n\r\n        // Verify the location_id belongs to the company and, if location_admin, matches their assigned location\r\n        // This check is crucial if location_id is NOT null\r\n        if (location_id !== null) {\r\n            const locationVerification = await new Promise((resolve, reject) => {\r\n                db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n                    if (err) reject(err);\r\n                    resolve(location);\r\n                });\r\n            });\r\n            if (!locationVerification) {\r\n                return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' });\r\n            }\r\n        }\r\n\r\n        db.run(\r\n            `INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')`,\r\n            [companyId, location_id, full_name, email, password_hash, position, employee_id,], // Default new employees to 'employee' role\r\n            function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting employee:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite employee.'));\r\n                }\r\n                res.status(201).json({ message: \"Employee invited successfully!\", userId: this.lastID });\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Invite employee error:\", error);\r\n        next(error);\r\n    }\r\n});\r\n\r\n\r\napp.get('/api/profile', authenticateToken, (req, res) => {\r\n    const { userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId } = req.user;\r\n    res.status(200).json({ userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId });\r\n});\r\n\r\napp.put('/api/profile', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { fullName, email, currentPassword, newPassword } = req.body;\r\n    const { userId } = req.user;\r\n\r\n    // Input Validation for Profile Update\r\n    if (fullName === undefined && email === undefined && (!currentPassword || !newPassword)) {\r\n        return res.status(400).json({ error: 'No data provided for update.' });\r\n    }\r\n    if (fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6)) {\r\n        return res.status(400).json({ error: \"New password must be at least 6 characters long if changing password.\" });\r\n    }\r\n    if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {\r\n        return res.status(400).json({ error: 'Both current password and new password are required to change password.' });\r\n    }\r\n\r\n\r\n    db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], async (err, user) => {\r\n        if (err) { console.error(\"Database error fetching user for profile update:\", err); return next(new Error(\"Server error during profile update.\")); } // Pass error\r\n        if (!user) { return res.status(404).json({ error: \"User not found.\" }); }\r\n        let updateSql = 'UPDATE Users SET ';\r\n        const updateParams = [];\r\n        const clauses = [];\r\n        let changesMade = false;\r\n        if (fullName !== undefined && fullName !== user.full_name) {\r\n            clauses.push('full_name = ?');\r\n            updateParams.push(fullName);\r\n            changesMade = true;\r\n        }\r\n        if (email !== undefined && email !== user.email) {\r\n            try { // Added try-catch for async await in db.get\r\n                const existingUser = await new Promise((resolve, reject) => {\r\n                    db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], (err, row) => {\r\n                        if (err) reject(err);\r\n                        resolve(row);\r\n                    });\r\n                });\r\n                if (existingUser) { return res.status(409).json({ error: 'Email already in use by another account.' }); }\r\n            } catch (dbErr) {\r\n                console.error(\"Database error checking existing email:\", dbErr);\r\n                return next(new Error(\"Server error verifying email availability.\"));\r\n            }\r\n            clauses.push('email = ?');\r\n            updateParams.push(email);\r\n            changesMade = true;\r\n        }\r\n        if (currentPassword && newPassword) {\r\n            const isMatch = await bcrypt.compare(currentPassword, user.password_hash);\r\n            if (!isMatch) { return res.status(401).json({ error: \"Current password incorrect.\" }); }\r\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\r\n            clauses.push('password_hash = ?');\r\n            updateParams.push(newPasswordHash);\r\n            changesMade = true;\r\n        }\r\n        if (!changesMade) { return res.status(200).json({ message: 'No changes detected. Profile remains the same.' }); }\r\n        updateSql += clauses.join(', ') + ' WHERE user_id = ?';\r\n        updateParams.push(userId);\r\n        db.run(updateSql, updateParams, function(updateErr) {\r\n            if (updateErr) { console.error(\"Database error updating profile:\", updateErr); return next(new Error('Failed to update profile.')); } // Pass error\r\n            if (this.changes > 0) {\r\n                db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], (fetchErr, updatedUser) => {\r\n                    if (fetchErr || !updatedUser) { console.error(\"Error fetching updated user for new token:\", fetchErr); return res.status(200).json({ message: 'Profile updated successfully, but token could not be refreshed.' }); }\r\n                    const newPayload = { userId: updatedUser.user_id, email: updatedUser.email, role: updatedUser.role, fullName: updatedUser.full_name, companyId: updatedUser.company_id, locationId: updatedUser.location_id, subscriptionStatus: updatedUser.subscription_status, planId: user.plan_id };\r\n                    const newToken = jwt.sign(newPayload, JWT_SECRET, { expiresIn: '1h' });\r\n                    res.status(200).json({ message: 'Profile updated successfully!', token: newToken });\r\n                });\r\n            } else { res.status(200).json({ message: 'No changes applied as data was identical.' }); }\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role } = req.user;\r\n    let sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\r\n    if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view locations.' });\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching locations:\", err); return next(new Error('Database error fetching locations.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.post('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { location_name, location_address } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Create Location\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can create locations.' }); }\r\n    if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Location name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\r\n        return res.status(400).json({ error: \"Location address is required and must be a non-empty string.\" });\r\n    }\r\n\r\n    db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function(err) {\r\n        if (err) { console.error(\"Database error creating location:\", err); return next(new Error('Failed to create location.')); } // Pass error\r\n        res.status(201).json({ message: 'Location created!', locationId: this.lastID });\r\n    });\r\n});\r\n\r\napp.delete('/api/locations/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete locations.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting location:\", err); return next(new Error('Failed to delete location.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Location not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.get('/api/users', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n    const { filterRole, filterLocationId } = req.query;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view users.' });\r\n    }\r\n\r\n    // Input validation for filterRole and filterLocationId\r\n    const allowedRoles = ['super_admin', 'location_admin', 'employee'];\r\n    if (filterRole && (!allowedRoles.includes(filterRole) || (role === 'location_admin' && filterRole === 'super_admin'))) {\r\n        return res.status(400).json({ error: 'Invalid filter role provided or insufficient permissions to filter by this role.' });\r\n    }\r\n    if (filterLocationId && isNaN(parseInt(filterLocationId))) {\r\n        return res.status(400).json({ error: 'Invalid filter location ID provided.' });\r\n    }\r\n\r\n\r\n    if (filterRole) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole);\r\n    }\r\n    if (filterLocationId) {\r\n        // Ensure location_admin can only filter by their own location\r\n        if (role === 'super_admin' || (role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId)) {\r\n            sql += ` AND Users.location_id = ?`;\r\n            params.push(filterLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by location.' });\r\n        }\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching users:\", err); return next(new Error('Database error fetching users.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/users/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: authenticatedUserId } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete users.' }); }\r\n    if (parseInt(id) === authenticatedUserId) { return res.status(403).json({ error: 'Cannot delete your own super admin account via this interface.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid user ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting user:\", err); return next(new Error('Failed to delete user.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'User not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.post('/api/create-checkout-session', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { planId } = req.body;\r\n    const { userId, email, companyId } = req.user;\r\n\r\n    // Input Validation for planId\r\n    const allowedPlanIds = ['pro', 'enterprise'];\r\n    if (!planId || !allowedPlanIds.includes(planId)) {\r\n        return res.status(400).json({ error: 'Invalid plan ID provided.' });\r\n    }\r\n\r\n    const priceIdMap = {\r\n        'pro': process.env.STRIPE_PRICE_ID_PRO,       // Use environment variable\r\n        'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\r\n    };\r\n    const stripePriceId = priceIdMap[planId];\r\n    if (!stripePriceId) { return res.status(500).json({ error: 'Stripe price ID not configured for this plan.' }); } // Changed from 400 to 500 as this is a server-side config issue\r\n    try {\r\n        let customerId;\r\n        const userRecord = await new Promise((resolve, reject) => {\r\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], (err, row) => {\r\n                if (err) reject(err);\r\n                resolve(row);\r\n            });\r\n        });\r\n        if (userRecord && userRecord.stripe_customer_id) {\r\n            customerId = userRecord.stripe_customer_id;\r\n        } else {\r\n            const customer = await stripeInstance.customers.create({ email: email, metadata: { userId: userId, companyId: companyId, }, });\r\n            customerId = customer.id;\r\n            db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], (err) => {\r\n                if (err) console.error('Failed to save Stripe customer ID to DB:', err);\r\n            });\r\n        }\r\n        const session = await stripeInstance.checkout.sessions.create({\r\n            customer: customerId,\r\n            mode: 'subscription',\r\n            line_items: [{ price: stripePriceId, quantity: 1, }, ],\r\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\r\n            success_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}`,\r\n            cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/pricing.html?payment=cancelled`,\r\n            metadata: { userId: userId, planId: planId, },\r\n        });\r\n        res.status(200).json({ url: session.url });\r\n    } catch (error) { console.error('Error creating Stripe Checkout Session:', error); next(error); } // Pass error\r\n});\r\n\r\napp.post('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_time, end_time, notes } = req.body;\r\n    const { companyId, role, userId: currentUserId } = req.user;\r\n\r\n    // Input Validation for Create Schedule\r\n    if (role !== 'super_admin' && role !== 'location_admin') { return res.status(403).json({ error: 'Access Denied: Only admins can create schedules.' }); }\r\n    if (typeof employee_id !== 'number' || employee_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid employee ID is required.' });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid location ID is required.' });\r\n    }\r\n    if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\r\n        return res.status(400).json({ error: 'Valid start and end times are required.' });\r\n    }\r\n    if (new Date(start_time) >= new Date(end_time)) {\r\n        return res.status(400).json({ error: 'Start time must be before end time.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], (err, employee) => {\r\n        if (err) { console.error(\"Database error verifying employee:\", err); return next(new Error('Database error during employee verification.')); } // Pass error\r\n        if (!employee) { return res.status(400).json({ error: 'Employee not found in your company.' }); }\r\n        db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error verifying location:\", err); return next(new Error('Database error during location verification.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Location not found in your company.' }); }\r\n            db.run(\r\n                'INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes],\r\n                function(insertErr) {\r\n                    if (insertErr) { console.error(\"Database error creating schedule:\", insertErr); return next(new Error('Failed to create schedule.')); } // Pass error\r\n                    res.status(201).json({ message: 'Schedule created successfully!', scheduleId: this.lastID });\r\n                }\r\n            );\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_date, end_date } = req.query;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    if (employee_id && isNaN(parseInt(employee_id))) {\r\n        return res.status(400).json({ error: 'Invalid employee ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n    if (start_date && isNaN(new Date(start_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid start date filter provided.' });\r\n    }\r\n    if (end_date && isNaN(new Date(end_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid end date filter provided.' });\r\n    }\r\n\r\n\r\n    if (employee_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(employee_id) === currentUserId) || (role === 'employee' && parseInt(employee_id) === currentUserId))) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole); // This should be employee_id, not filterRole\r\n    }\r\n    if (location_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(location_id) === currentUserLocationId))) {\r\n        sql += ` AND Users.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n    if (start_date) {\r\n        sql += ` AND Schedules.start_time >= ?`;\r\n        params.push(start_date);\r\n    }\r\n    if (end_date) {\r\n        sql += ` AND Schedules.end_time <= ?`;\r\n        params.push(end_date);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching schedules:\", err); return next(new Error('Database error fetching schedules.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/schedules/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid schedule ID provided.' });\r\n    }\r\n\r\n    if (role === 'employee') {\r\n        return res.status(403).json({ error: 'Access Denied: Employees cannot delete schedules.' });\r\n    }\r\n\r\n    let sql = `DELETE FROM Schedules WHERE schedule_id = ?`;\r\n    const params = [id];\r\n\r\n    if (role === 'location_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)`;\r\n        params.push(currentUserLocationId, companyId);\r\n    } else if (role === 'super_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)`;\r\n        params.push(companyId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting schedule:\", err); return next(new Error('Failed to delete schedule.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Schedule not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Hiring Routes ---\r\n\r\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\r\napp.post('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, description, requirements, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const created_date = new Date().toISOString(); // Current date/time for creation\r\n\r\n    // Input Validation for Create Job Posting\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can create job postings.' });\r\n    }\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: \"Job title is required and must be a non-empty string.\" });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\r\napp.get('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { status, location_id } = req.query;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Authorization: super_admin sees all, location_admin sees their location's postings\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        // Employees generally shouldn't see job postings list via this admin API\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view job postings.' });\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid job posting status filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n\r\n    if (status) {\r\n        sql += ' AND status = ?';\r\n        params.push(status);\r\n    }\r\n    // Only super admin can filter by any location_id beyond their own scope\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching job postings:\", err); return next(new Error('Database error fetching job postings.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.put('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { title, description, requirements, status, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Job Posting Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update job postings.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n    if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\r\n        return res.status(400).json({ error: 'Job title must be a non-empty string if provided.' });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE JobPostings SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (title !== undefined) { clauses.push('title = ?'); updateParams.push(title); }\r\n    // Line 1009 fix: Ensure this line and surrounding logic is correct.\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    \r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    \r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.delete('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete job postings.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete their own location's postings\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting job posting:\", err); return next(new Error('Failed to delete job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n\r\n// Update Applicant API endpoints to use job_posting_id\r\napp.post('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, full_name, email, notes, location_id, phone_number } = req.body; // Added phone_number\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const application_date = new Date().toISOString(); // Current date/time for application\r\n\r\n    // Input Validation for Adding Applicant\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can add applicants.' });\r\n    }\r\n    if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid job posting ID is required.' });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\r\n    if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\r\n        return res.status(400).json({ error: \"Phone number is required.\" });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    // Verify job_posting_id belongs to the company, and for location_admin, to their location\r\n    db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, jobPosting) => {\r\n        if (err) { console.error(\"Database error verifying job posting:\", err); return next(new Error('Database error when verifying job posting.')); } // Pass error\r\n        if (!jobPosting) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n        \r\n        // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\r\n        if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.' });\r\n        }\r\n\r\n        db.run(\r\n            'INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n            [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date], // Use location_id from payload or job posting\r\n            function(insertErr) {\r\n                if (insertErr) { console.error(\"Database error creating applicant:\", insertErr); return next(new Error('Failed to create applicant.')); } // Pass error\r\n                res.status(201).json({ message: 'Applicant added successfully!', applicantId: this.lastID });\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\napp.get('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, status, location_id } = req.query; // Added job_posting_id, status, location_id filters\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Applicants.*, JobPostings.title AS job_title_name\r\n               FROM Applicants\r\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\r\n               WHERE Applicants.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid applicant status filter provided.' });\r\n    }\r\n    if (job_posting_id && isNaN(parseInt(job_posting_id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n    if (status) {\r\n        sql += ` AND Applicants.status = ?`;\r\n        params.push(status);\r\n    }\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)`; // Location admin sees applicants for their location or unassigned\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Applicants.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view applicants.' });\r\n    }\r\n\r\n    // Apply job_posting_id filter if provided\r\n    if (job_posting_id) {\r\n        sql += ` AND Applicants.job_posting_id = ?`;\r\n        params.push(job_posting_id);\r\n    }\r\n    // Apply location filter from query params for super_admin\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND Applicants.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching applicants:\", err); return next(new Error('Database error fetching applicants.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\r\napp.put('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { full_name, email, status, resume_url, notes, location_id, job_posting_id, phone_number } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Applicant Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update applicant records.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n    if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\r\n        return res.status(400).json({ error: \"Phone number must be a non-empty string if provided.\" });\r\n    }\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (resume_url !== undefined && typeof resume_url !== 'string') { // Assuming resume_url is a string URL\r\n        return res.status(400).json({ error: 'Resume URL must be a string if provided.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n    if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\r\n        return res.status(400).json({ error: 'Job posting ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE Applicants SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (full_name !== undefined) { clauses.push('full_name = ?'); updateParams.push(full_name); }\r\n    if (email !== undefined) { clauses.push('email = ?'); updateParams.push(email); }\r\n    if (phone_number !== undefined) { clauses.push('phone_number = ?'); updateParams.push(phone_number); }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    if (resume_url !== undefined) { clauses.push('resume_url = ?'); updateParams.push(resume_url); }\r\n    if (notes !== undefined) { clauses.push('notes = ?'); updateParams.push(notes); }\r\n    \r\n    // Admins can update location_id or job_posting_id, with restrictions for location_admin\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to another location.' });\r\n            }\r\n            // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n    if (job_posting_id !== undefined) {\r\n         if (role === 'super_admin') {\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        } else if (role === 'location_admin') {\r\n            // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\r\n            db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, job) => {\r\n                if (err) { console.error(\"DB error verifying job posting for update:\", err); return next(new Error('Database error verifying job posting.')); } // Pass error\r\n                if (!job) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n                if (job.location_id !== null && job.location_id !== currentUserLocationId) {\r\n                    return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.' });\r\n                }\r\n            });\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // For location_admin, ensure they can only update applicants within their assigned location\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating applicant:\", err); return next(new Error('Failed to update applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Applicant updated successfully!' });\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\r\napp.delete('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete applicants.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete applicants in their own location\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting applicant:\", err); return next(new Error('Failed to delete applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Document Management Routes ---\r\n\r\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\r\napp.post('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, file_name, file_type, file_url, description } = req.body;\r\n    const { companyId, userId } = req.user;\r\n    const upload_date = new Date().toISOString();\r\n\r\n    // Input Validation for Document Upload\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: 'Document title is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\r\n        return res.status(400).json({ error: 'File name is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\r\n        return res.status(400).json({ error: 'File type is required and must be a non-empty string.' });\r\n    }\r\n    // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\r\n    const urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\r\n    if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\r\n        return res.status(400).json({ error: 'A valid file URL (starting with http or https) is required.' });\r\n    }\r\n    if (description !== undefined && typeof description !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, userId, title, file_name, file_type, file_url, description, upload_date],\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error uploading document:\", err);\r\n                return next(new Error('Failed to upload document metadata.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Document metadata saved successfully!', documentId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\r\napp.get('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, userId, role } = req.user;\r\n    \r\n    let sql = 'SELECT * FROM Documents WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Non-super-admins only see their own documents\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching documents:\", err); return next(new Error('Database error fetching documents.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\r\napp.delete('/api/documents/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, userId, role } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid document ID provided.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Only super_admin or the original uploader can delete\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting document:\", err); return next(new Error('Failed to delete document.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Document not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\r\n// This should always be the LAST route in your Express app\r\napp.get(/'*'/, (req, res) => {\r\n    // Correctly serve the index.html from the parent directory\r\n    res.sendFile(path.join(__dirname, '..', 'index.html'));\r\n});\r\n\r\n// --- Global Error Handling Middleware ---\r\n// This should be the very last middleware in your Express app\r\napp.use((err, req, res, next) => {\r\n    console.error(`Unhandled Error: ${err.stack}`); // Log the full stack trace for debugging\r\n    // Respond with a generic error message for the client\r\n    res.status(500).json({\r\n        error: 'An unexpected server error occurred. Please try again later.',\r\n        // In development, you might send more details:\r\n        // message: err.message,\r\n        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n});\r\n\r\n// --- Server Start ---\r\n// This conditional export allows the app to be imported for testing\r\n// without starting the server listener when the test runner requires it.\r\nif (require.main === module) {\r\n    // Only listen if this file is run directly (not required as a module)\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is running successfully on http://localhost:${PORT}`);\r\n    });\r\n} else {\r\n    // Export the app for testing purposes\r\n    module.exports = app;\r\n}\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1750346437318},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"filename\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"_exploded\":true,\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$47\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$48\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.27.4:development":{"value":{"code":"\"use strict\";\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// --- Imports ---\nvar express = require('express');\nvar sqlite3 = require('sqlite3').verbose();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar cors = require('cors'); // Import cors\nvar path = require('path');\nvar csv = require('csv-parser'); // For CSV parsing\nvar _require = require('stream'),\n  Readable = _require.Readable; // For creating a readable stream from a string\nvar rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\nvar morgan = require('morgan'); // Import morgan for request logging\n\n// Load environment variables from .env file in development\nif (process.env.NODE_ENV !== 'production') {\n  require('dotenv').config();\n}\n\n// Import the Stripe library and initialize it with your secret key\n// Use process.env.STRIPE_SECRET_KEY for production\nvar stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\n\n// --- App Initialization ---\nvar app = express();\n\n// Configure CORS for production environment\nvar allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\n\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n  allowedOrigins.push('null');\n}\nvar corsOptions = {\n  origin: function origin(_origin, callback) {\n    // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\n    if (!_origin) {\n      // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\n      if (allowedOrigins.includes('null') || process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n        return callback(null, true);\n      }\n      var msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(msg), false);\n    }\n    if (allowedOrigins.indexOf(_origin) === -1) {\n      var _msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(_msg), false);\n    }\n    return callback(null, true);\n  },\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  // Allow cookies to be sent\n  optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\napp.use(cors(corsOptions));\n\n// Use process.env.PORT for production, fallback to 3000 for local development\nvar PORT = process.env.PORT || 3000;\n\n// Define a webhook secret for Stripe. This should also be an environment variable.\nvar STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\n\n// --- Rate Limiting Configuration ---\nvar authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 10,\n  // Max 10 requests per 15 minutes per IP\n  message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\n  standardHeaders: true,\n  // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false // Disable the `X-RateLimit-*` headers\n});\n\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) ---\n// This route needs the raw body for signature verification.\napp.post('/api/stripe-webhook', express.raw({\n  type: 'application/json'\n}), /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req, res) {\n    var sig, event, session, userId, planId, subscriptionUpdated, subscriptionDeleted, invoiceSucceeded, invoiceFailed, _t, _t2;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          sig = req.headers['stripe-signature'];\n          _context.p = 1;\n          event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n          _context.n = 3;\n          break;\n        case 2:\n          _context.p = 2;\n          _t = _context.v;\n          console.error(\"Webhook Error: \".concat(_t.message));\n          return _context.a(2, res.status(400).send(\"Webhook Error: \".concat(_t.message)));\n        case 3:\n          _t2 = event.type;\n          _context.n = _t2 === 'checkout.session.completed' ? 4 : _t2 === 'customer.subscription.updated' ? 5 : _t2 === 'customer.subscription.deleted' ? 6 : _t2 === 'invoice.payment_succeeded' ? 7 : _t2 === 'invoice.payment_failed' ? 8 : 9;\n          break;\n        case 4:\n          session = event.data.object;\n          console.log('Checkout Session Completed:', session.id);\n          userId = session.metadata.userId;\n          planId = session.metadata.planId;\n          if (session.payment_status === 'paid' && userId && planId) {\n            db.run('UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?', [session.customer, session.subscription, 'active', planId, userId], function (err) {\n              if (err) console.error('Database update error for checkout.session.completed:', err.message);else console.log(\"User \".concat(userId, \" subscription updated to \").concat(planId, \" (active).\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 5:\n          subscriptionUpdated = event.data.object;\n          console.log('Subscription Updated:', subscriptionUpdated.id);\n          if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?', [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.updated:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionUpdated.customer, \" status updated to \").concat(subscriptionUpdated.status, \" and plan to \").concat(subscriptionUpdated.plan.id, \".\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 6:\n          subscriptionDeleted = event.data.object;\n          console.log('Subscription Deleted:', subscriptionDeleted.id);\n          if (subscriptionDeleted.customer) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?', ['cancelled', 'free', subscriptionDeleted.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.deleted:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionDeleted.customer, \" marked as cancelled and reverted to free.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 7:\n          invoiceSucceeded = event.data.object;\n          console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\n          if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);else console.log(\"Subscription \".concat(invoiceSucceeded.subscription, \" status set to active.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 8:\n          invoiceFailed = event.data.object;\n          console.log('Invoice Payment Failed:', invoiceFailed.id);\n          if (invoiceFailed.subscription && invoiceFailed.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['past_due', invoiceFailed.subscription, invoiceFailed.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_failed:', err.message);else console.log(\"Subscription \".concat(invoiceFailed.subscription, \" status set to past_due.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 9:\n          console.log(\"Unhandled event type \".concat(event.type));\n        case 10:\n          res.status(200).json({\n            received: true\n          });\n        case 11:\n          return _context.a(2);\n      }\n    }, _callee, null, [[1, 2]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\napp.use(express.json());\n\n// --- JWT Secret ---\n// Use process.env.JWT_SECRET for production\nvar JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-and-long-string-for-jwt';\n\n// --- Request Logging (using Morgan) ---\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\napp.use(morgan('dev'));\n\n// --- Serve Static Files (Frontend) with Caching ---\n// This middleware serves static files from the 'onboardflow' root directory\n// and sets Cache-Control headers for browser caching.\napp.use(express[\"static\"](path.join(__dirname, '..'), {\n  maxAge: '7d',\n  // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\n  immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\n}));\n\n// --- Database Setup ---\nvar db = new sqlite3.Database('./onboardflow.db', function (err) {\n  if (err) {\n    // Log database connection error and exit\n    console.error(\"Error opening database:\", err.message);\n    process.exit(1); // Exit process if database connection fails\n  } else {\n    console.log(\"Successfully connected to the database.\");\n    db.get(\"PRAGMA foreign_keys = ON\");\n    db.serialize(function () {\n      db.run(\"CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Users (\\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER,\\n                location_id INTEGER,\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL UNIQUE,\\n                password_hash TEXT NOT NULL,\\n                position TEXT,\\n                employee_id TEXT,\\n                role TEXT NOT NULL,\\n                stripe_customer_id TEXT,\\n                stripe_subscription_id TEXT,\\n                subscription_status TEXT,\\n                plan_id TEXT,\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Schedules (\\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                employee_id INTEGER NOT NULL,\\n                location_id INTEGER NOT NULL,\\n                start_time TEXT NOT NULL,\\n                end_time TEXT NOT NULL,\\n                notes TEXT,\\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // NEW: Create JobPostings table\n      db.run(\"CREATE TABLE IF NOT EXISTS JobPostings (\\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: link job posting to a specific location\\n                title TEXT NOT NULL,\\n                description TEXT NOT NULL,\\n                requirements TEXT, -- Optional: job requirements\\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\\n                created_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // Update Applicants table schema to link to JobPostings and add phone_number\n      db.run(\"CREATE TABLE IF NOT EXISTS Applicants (\\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL,\\n                phone_number TEXT, -- NEW: Phone number field\\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\\n                notes TEXT,\\n                application_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\\n            )\");\n      // NEW: Create Documents table for file/video uploads\n      db.run(\"CREATE TABLE IF NOT EXISTS Documents (\\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                user_id INTEGER NOT NULL, -- User who uploaded the document\\n                title TEXT NOT NULL,\\n                file_name TEXT NOT NULL,\\n                file_type TEXT NOT NULL,\\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\\n                description TEXT,\\n                upload_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\\n            )\");\n    });\n  }\n});\n\n// --- Authentication Middleware ---\nfunction authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) {\n    return res.status(401).json({\n      error: 'Unauthorized: No token provided.'\n    });\n  }\n  jwt.verify(token, JWT_SECRET, function (err, user) {\n    if (err) {\n      // Log the specific JWT error for debugging\n      console.error(\"JWT Verification Error:\", err.message);\n      return res.status(403).json({\n        error: 'Forbidden: Invalid or expired token.'\n      });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// --- Helper for Input Validation ---\nvar isValidEmail = function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\n\n// Apply rate limiting to authentication routes\napp.post('/api/register', authLimiter, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(req, res, next) {\n    var _req$body, company_name, full_name, email, password, password_hash, _t3;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          // Added 'next'\n          _req$body = req.body, company_name = _req$body.company_name, full_name = _req$body.full_name, email = _req$body.email, password = _req$body.password; // Input Validation for Registration\n          if (!(!company_name || typeof company_name !== 'string' || company_name.trim() === '')) {\n            _context2.n = 1;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Company name is required and must be a non-empty string.\"\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context2.n = 2;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context2.n = 3;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context2.n = 4;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          _context2.p = 4;\n          _context2.n = 5;\n          return bcrypt.hash(password, 10);\n        case 5:\n          password_hash = _context2.v;\n          db.serialize(function () {\n            db.run('BEGIN TRANSACTION');\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function (err) {\n              if (err) {\n                db.run('ROLLBACK');\n                console.error(\"Database error creating company:\", err);\n                return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\n              }\n              var newCompanyId = this.lastID;\n              db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')\", [newCompanyId, null, full_name, email, password_hash], function (userInsertErr) {\n                if (userInsertErr) {\n                  db.run('ROLLBACK');\n                  console.error(\"Database error creating user:\", userInsertErr);\n                  if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                    return res.status(409).json({\n                      error: 'Email already registered.'\n                    });\n                  }\n                  return next(new Error(\"Could not create user.\")); // Pass error\n                }\n                db.run('COMMIT');\n                res.status(201).json({\n                  message: \"Company and user registered successfully!\",\n                  userId: this.lastID\n                });\n              });\n            });\n          });\n          _context2.n = 7;\n          break;\n        case 6:\n          _context2.p = 6;\n          _t3 = _context2.v;\n          console.error(\"Registration error:\", _t3);\n          next(_t3); // Pass error to error handling middleware\n        case 7:\n          return _context2.a(2);\n      }\n    }, _callee2, null, [[4, 6]]);\n  }));\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/login', authLimiter, function (req, res, next) {\n  // Added 'next'\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n\n  // Input Validation for Login\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  if (!password || typeof password !== 'string' || password.length === 0) {\n    return res.status(400).json({\n      error: \"Password is required.\"\n    });\n  }\n  db.get(\"SELECT * FROM Users WHERE email = ?\", [email], /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(err, user) {\n      var isMatch, payload, token;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (!err) {\n              _context3.n = 1;\n              break;\n            }\n            console.error(\"Database error during login:\", err);\n            return _context3.a(2, next(new Error(\"A server error occurred during login.\")));\n          case 1:\n            if (user) {\n              _context3.n = 2;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 2:\n            _context3.n = 3;\n            return bcrypt.compare(password, user.password_hash);\n          case 3:\n            isMatch = _context3.v;\n            if (isMatch) {\n              _context3.n = 4;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 4:\n            payload = {\n              userId: user.user_id,\n              email: user.email,\n              role: user.role,\n              fullName: user.full_name,\n              companyId: user.company_id,\n              locationId: user.location_id,\n              subscriptionStatus: user.subscription_status,\n              planId: user.plan_id\n            };\n            token = jwt.sign(payload, JWT_SECRET, {\n              expiresIn: '1h'\n            });\n            res.status(200).json({\n              message: \"Login successful!\",\n              token: token,\n              role: user.role\n            });\n          case 5:\n            return _context3.a(2);\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});\napp.post('/api/invite-admin', authenticateToken, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(req, res, next) {\n    var _req$body3, full_name, email, password, location_id, _req$user, companyId, role, password_hash, _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          // Added 'next'\n          _req$body3 = req.body, full_name = _req$body3.full_name, email = _req$body3.email, password = _req$body3.password, location_id = _req$body3.location_id;\n          _req$user = req.user, companyId = _req$user.companyId, role = _req$user.role; // Input Validation for Invite Admin\n          if (!(role !== 'super_admin')) {\n            _context4.n = 1;\n            break;\n          }\n          return _context4.a(2, res.status(403).json({\n            error: 'Access Denied: Only super admins can invite other admins.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context4.n = 3;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context4.n = 4;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          if (!(typeof location_id !== 'number' || location_id <= 0)) {\n            _context4.n = 5;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid location ID is required.\"\n          }));\n        case 5:\n          _context4.p = 5;\n          _context4.n = 6;\n          return bcrypt.hash(password, 10);\n        case 6:\n          password_hash = _context4.v;\n          db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n            if (err) {\n              console.error(\"Database error checking location:\", err);\n              return next(new Error('Database error when verifying location.'));\n            } // Pass error\n            if (!location) {\n              return res.status(400).json({\n                error: 'Selected location does not exist or does not belong to your company.'\n              });\n            }\n            db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash], function (userInsertErr) {\n              if (userInsertErr) {\n                console.error(\"Database error inviting admin:\", userInsertErr);\n                if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                  return res.status(409).json({\n                    error: 'Email already registered.'\n                  });\n                }\n                return next(new Error('Failed to invite admin.')); // Pass error\n              }\n              res.status(201).json({\n                message: \"Location admin invited successfully!\",\n                userId: this.lastID\n              });\n            });\n          });\n          _context4.n = 8;\n          break;\n        case 7:\n          _context4.p = 7;\n          _t4 = _context4.v;\n          console.error(\"Invite admin error:\", _t4);\n          next(_t4);\n        case 8:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[5, 7]]);\n  }));\n  return function (_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\n// NEW: API endpoint for inviting employees\napp.post('/api/invite-employee', authenticateToken, /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(req, res, next) {\n    var _req$body4, full_name, email, password, position, employee_id, location_id, _req$user2, companyId, role, currentUserLocationId, isLocationIdValid, password_hash, locationVerification, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _req$body4 = req.body, full_name = _req$body4.full_name, email = _req$body4.email, password = _req$body4.password, position = _req$body4.position, employee_id = _req$body4.employee_id, location_id = _req$body4.location_id;\n          _req$user2 = req.user, companyId = _req$user2.companyId, role = _req$user2.role, currentUserLocationId = _req$user2.locationId; // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\n          if (['super_admin', 'location_admin'].includes(role)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Only admins can invite employees.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context5.n = 2;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context5.n = 3;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context5.n = 4;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          // Corrected location_id validation: Must be a number > 0.\n          // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\n          // For location_admin, it must match their current location.\n          // This revised logic correctly checks for null OR a valid positive integer.\n          isLocationIdValid = location_id === null || typeof location_id === 'number' && !isNaN(location_id) && location_id > 0;\n          if (isLocationIdValid) {\n            _context5.n = 5;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\"\n          }));\n        case 5:\n          if (!(position !== undefined && typeof position !== 'string')) {\n            _context5.n = 6;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Position must be a string if provided.'\n          }));\n        case 6:\n          if (!(employee_id !== undefined && typeof employee_id !== 'string')) {\n            _context5.n = 7;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Employee ID must be a string if provided.'\n          }));\n        case 7:\n          if (!(role === 'location_admin')) {\n            _context5.n = 8;\n            break;\n          }\n          if (!(location_id !== currentUserLocationId)) {\n            _context5.n = 8;\n            break;\n          }\n          if (location_id === null && currentUserLocationId === null) {\n            _context5.n = 8;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Location admin can only invite employees to their assigned location.'\n          }));\n        case 8:\n          _context5.p = 8;\n          _context5.n = 9;\n          return bcrypt.hash(password, 10);\n        case 9:\n          password_hash = _context5.v;\n          if (!(location_id !== null)) {\n            _context5.n = 11;\n            break;\n          }\n          _context5.n = 10;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n              if (err) reject(err);\n              resolve(location);\n            });\n          });\n        case 10:\n          locationVerification = _context5.v;\n          if (locationVerification) {\n            _context5.n = 11;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Selected location does not exist or does not belong to your company.'\n          }));\n        case 11:\n          db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash, position, employee_id],\n          // Default new employees to 'employee' role\n          function (userInsertErr) {\n            if (userInsertErr) {\n              console.error(\"Database error inviting employee:\", userInsertErr);\n              if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                return res.status(409).json({\n                  error: 'Email already registered.'\n                });\n              }\n              return next(new Error('Failed to invite employee.'));\n            }\n            res.status(201).json({\n              message: \"Employee invited successfully!\",\n              userId: this.lastID\n            });\n          });\n          _context5.n = 13;\n          break;\n        case 12:\n          _context5.p = 12;\n          _t5 = _context5.v;\n          console.error(\"Invite employee error:\", _t5);\n          next(_t5);\n        case 13:\n          return _context5.a(2);\n      }\n    }, _callee5, null, [[8, 12]]);\n  }));\n  return function (_x1, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}());\napp.get('/api/profile', authenticateToken, function (req, res) {\n  var _req$user3 = req.user,\n    userId = _req$user3.userId,\n    fullName = _req$user3.fullName,\n    email = _req$user3.email,\n    role = _req$user3.role,\n    companyId = _req$user3.companyId,\n    locationId = _req$user3.locationId,\n    subscriptionStatus = _req$user3.subscriptionStatus,\n    planId = _req$user3.planId;\n  res.status(200).json({\n    userId: userId,\n    fullName: fullName,\n    email: email,\n    role: role,\n    companyId: companyId,\n    locationId: locationId,\n    subscriptionStatus: subscriptionStatus,\n    planId: planId\n  });\n});\napp.put('/api/profile', authenticateToken, /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(req, res, next) {\n    var _req$body5, fullName, email, currentPassword, newPassword, userId;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          // Added 'next'\n          _req$body5 = req.body, fullName = _req$body5.fullName, email = _req$body5.email, currentPassword = _req$body5.currentPassword, newPassword = _req$body5.newPassword;\n          userId = req.user.userId; // Input Validation for Profile Update\n          if (!(fullName === undefined && email === undefined && (!currentPassword || !newPassword))) {\n            _context7.n = 1;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'No data provided for update.'\n          }));\n        case 1:\n          if (!(fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === ''))) {\n            _context7.n = 2;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"Full name must be a non-empty string if provided.\"\n          }));\n        case 2:\n          if (!(email !== undefined && !isValidEmail(email))) {\n            _context7.n = 3;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"A valid email address must be provided if changing email.\"\n          }));\n        case 3:\n          if (!(newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6))) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"New password must be at least 6 characters long if changing password.\"\n          }));\n        case 4:\n          if (!(currentPassword && !newPassword || !currentPassword && newPassword)) {\n            _context7.n = 5;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'Both current password and new password are required to change password.'\n          }));\n        case 5:\n          db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(err, user) {\n              var updateSql, updateParams, clauses, changesMade, existingUser, isMatch, newPasswordHash, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.n) {\n                  case 0:\n                    if (!err) {\n                      _context6.n = 1;\n                      break;\n                    }\n                    console.error(\"Database error fetching user for profile update:\", err);\n                    return _context6.a(2, next(new Error(\"Server error during profile update.\")));\n                  case 1:\n                    if (user) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    return _context6.a(2, res.status(404).json({\n                      error: \"User not found.\"\n                    }));\n                  case 2:\n                    updateSql = 'UPDATE Users SET ';\n                    updateParams = [];\n                    clauses = [];\n                    changesMade = false;\n                    if (fullName !== undefined && fullName !== user.full_name) {\n                      clauses.push('full_name = ?');\n                      updateParams.push(fullName);\n                      changesMade = true;\n                    }\n                    if (!(email !== undefined && email !== user.email)) {\n                      _context6.n = 8;\n                      break;\n                    }\n                    _context6.p = 3;\n                    _context6.n = 4;\n                    return new Promise(function (resolve, reject) {\n                      db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], function (err, row) {\n                        if (err) reject(err);\n                        resolve(row);\n                      });\n                    });\n                  case 4:\n                    existingUser = _context6.v;\n                    if (!existingUser) {\n                      _context6.n = 5;\n                      break;\n                    }\n                    return _context6.a(2, res.status(409).json({\n                      error: 'Email already in use by another account.'\n                    }));\n                  case 5:\n                    _context6.n = 7;\n                    break;\n                  case 6:\n                    _context6.p = 6;\n                    _t6 = _context6.v;\n                    console.error(\"Database error checking existing email:\", _t6);\n                    return _context6.a(2, next(new Error(\"Server error verifying email availability.\")));\n                  case 7:\n                    clauses.push('email = ?');\n                    updateParams.push(email);\n                    changesMade = true;\n                  case 8:\n                    if (!(currentPassword && newPassword)) {\n                      _context6.n = 12;\n                      break;\n                    }\n                    _context6.n = 9;\n                    return bcrypt.compare(currentPassword, user.password_hash);\n                  case 9:\n                    isMatch = _context6.v;\n                    if (isMatch) {\n                      _context6.n = 10;\n                      break;\n                    }\n                    return _context6.a(2, res.status(401).json({\n                      error: \"Current password incorrect.\"\n                    }));\n                  case 10:\n                    _context6.n = 11;\n                    return bcrypt.hash(newPassword, 10);\n                  case 11:\n                    newPasswordHash = _context6.v;\n                    clauses.push('password_hash = ?');\n                    updateParams.push(newPasswordHash);\n                    changesMade = true;\n                  case 12:\n                    if (changesMade) {\n                      _context6.n = 13;\n                      break;\n                    }\n                    return _context6.a(2, res.status(200).json({\n                      message: 'No changes detected. Profile remains the same.'\n                    }));\n                  case 13:\n                    updateSql += clauses.join(', ') + ' WHERE user_id = ?';\n                    updateParams.push(userId);\n                    db.run(updateSql, updateParams, function (updateErr) {\n                      if (updateErr) {\n                        console.error(\"Database error updating profile:\", updateErr);\n                        return next(new Error('Failed to update profile.'));\n                      } // Pass error\n                      if (this.changes > 0) {\n                        db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], function (fetchErr, updatedUser) {\n                          if (fetchErr || !updatedUser) {\n                            console.error(\"Error fetching updated user for new token:\", fetchErr);\n                            return res.status(200).json({\n                              message: 'Profile updated successfully, but token could not be refreshed.'\n                            });\n                          }\n                          var newPayload = {\n                            userId: updatedUser.user_id,\n                            email: updatedUser.email,\n                            role: updatedUser.role,\n                            fullName: updatedUser.full_name,\n                            companyId: updatedUser.company_id,\n                            locationId: updatedUser.location_id,\n                            subscriptionStatus: updatedUser.subscription_status,\n                            planId: user.plan_id\n                          };\n                          var newToken = jwt.sign(newPayload, JWT_SECRET, {\n                            expiresIn: '1h'\n                          });\n                          res.status(200).json({\n                            message: 'Profile updated successfully!',\n                            token: newToken\n                          });\n                        });\n                      } else {\n                        res.status(200).json({\n                          message: 'No changes applied as data was identical.'\n                        });\n                      }\n                    });\n                  case 14:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[3, 6]]);\n            }));\n            return function (_x15, _x16) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 6:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}());\napp.get('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user4 = req.user,\n    companyId = _req$user4.companyId,\n    role = _req$user4.role;\n  var sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\n  var params = [companyId];\n\n  // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\n  if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view locations.'\n    });\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching locations:\", err);\n      return next(new Error('Database error fetching locations.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp.post('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body6 = req.body,\n    location_name = _req$body6.location_name,\n    location_address = _req$body6.location_address;\n  var _req$user5 = req.user,\n    companyId = _req$user5.companyId,\n    role = _req$user5.role;\n\n  // Input Validation for Create Location\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can create locations.'\n    });\n  }\n  if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Location name is required and must be a non-empty string.\"\n    });\n  }\n  if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\n    return res.status(400).json({\n      error: \"Location address is required and must be a non-empty string.\"\n    });\n  }\n  db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function (err) {\n    if (err) {\n      console.error(\"Database error creating location:\", err);\n      return next(new Error('Failed to create location.'));\n    } // Pass error\n    res.status(201).json({\n      message: 'Location created!',\n      locationId: this.lastID\n    });\n  });\n});\napp[\"delete\"]('/api/locations/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user6 = req.user,\n    companyId = _req$user6.companyId,\n    role = _req$user6.role;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete locations.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID provided.'\n    });\n  }\n  db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting location:\", err);\n      return next(new Error('Failed to delete location.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Location not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.get('/api/users', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user7 = req.user,\n    companyId = _req$user7.companyId,\n    role = _req$user7.role,\n    currentUserId = _req$user7.userId,\n    currentUserLocationId = _req$user7.locationId;\n  var _req$query = req.query,\n    filterRole = _req$query.filterRole,\n    filterLocationId = _req$query.filterLocationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view users.'\n    });\n  }\n\n  // Input validation for filterRole and filterLocationId\n  var allowedRoles = ['super_admin', 'location_admin', 'employee'];\n  if (filterRole && (!allowedRoles.includes(filterRole) || role === 'location_admin' && filterRole === 'super_admin')) {\n    return res.status(400).json({\n      error: 'Invalid filter role provided or insufficient permissions to filter by this role.'\n    });\n  }\n  if (filterLocationId && isNaN(parseInt(filterLocationId))) {\n    return res.status(400).json({\n      error: 'Invalid filter location ID provided.'\n    });\n  }\n  if (filterRole) {\n    if (role === 'super_admin' || role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin') || role === 'employee' && filterRole === 'employee') {\n      sql += \" AND Users.role = ?\";\n      params.push(filterRole);\n    } else {\n      // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by role.'\n      });\n    }\n  }\n  if (filterLocationId) {\n    // Ensure location_admin can only filter by their own location\n    if (role === 'super_admin' || role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId) {\n      sql += \" AND Users.location_id = ?\";\n      params.push(filterLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by location.'\n      });\n    }\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching users:\", err);\n      return next(new Error('Database error fetching users.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/users/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user8 = req.user,\n    companyId = _req$user8.companyId,\n    role = _req$user8.role,\n    authenticatedUserId = _req$user8.userId;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete users.'\n    });\n  }\n  if (parseInt(id) === authenticatedUserId) {\n    return res.status(403).json({\n      error: 'Cannot delete your own super admin account via this interface.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid user ID provided.'\n    });\n  }\n  db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting user:\", err);\n      return next(new Error('Failed to delete user.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'User not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.post('/api/create-checkout-session', authenticateToken, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(req, res, next) {\n    var planId, _req$user9, userId, email, companyId, allowedPlanIds, priceIdMap, stripePriceId, customerId, userRecord, customer, session, _t7;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          // Added 'next'\n          planId = req.body.planId;\n          _req$user9 = req.user, userId = _req$user9.userId, email = _req$user9.email, companyId = _req$user9.companyId; // Input Validation for planId\n          allowedPlanIds = ['pro', 'enterprise'];\n          if (!(!planId || !allowedPlanIds.includes(planId))) {\n            _context8.n = 1;\n            break;\n          }\n          return _context8.a(2, res.status(400).json({\n            error: 'Invalid plan ID provided.'\n          }));\n        case 1:\n          priceIdMap = {\n            'pro': process.env.STRIPE_PRICE_ID_PRO,\n            // Use environment variable\n            'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\n          };\n          stripePriceId = priceIdMap[planId];\n          if (stripePriceId) {\n            _context8.n = 2;\n            break;\n          }\n          return _context8.a(2, res.status(500).json({\n            error: 'Stripe price ID not configured for this plan.'\n          }));\n        case 2:\n          _context8.p = 2;\n          _context8.n = 3;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], function (err, row) {\n              if (err) reject(err);\n              resolve(row);\n            });\n          });\n        case 3:\n          userRecord = _context8.v;\n          if (!(userRecord && userRecord.stripe_customer_id)) {\n            _context8.n = 4;\n            break;\n          }\n          customerId = userRecord.stripe_customer_id;\n          _context8.n = 6;\n          break;\n        case 4:\n          _context8.n = 5;\n          return stripeInstance.customers.create({\n            email: email,\n            metadata: {\n              userId: userId,\n              companyId: companyId\n            }\n          });\n        case 5:\n          customer = _context8.v;\n          customerId = customer.id;\n          db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], function (err) {\n            if (err) console.error('Failed to save Stripe customer ID to DB:', err);\n          });\n        case 6:\n          _context8.n = 7;\n          return stripeInstance.checkout.sessions.create({\n            customer: customerId,\n            mode: 'subscription',\n            line_items: [{\n              price: stripePriceId,\n              quantity: 1\n            }],\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\n            success_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}\"),\n            cancel_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/pricing.html?payment=cancelled\"),\n            metadata: {\n              userId: userId,\n              planId: planId\n            }\n          });\n        case 7:\n          session = _context8.v;\n          res.status(200).json({\n            url: session.url\n          });\n          _context8.n = 9;\n          break;\n        case 8:\n          _context8.p = 8;\n          _t7 = _context8.v;\n          console.error('Error creating Stripe Checkout Session:', _t7);\n          next(_t7);\n        case 9:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[2, 8]]);\n  }));\n  return function (_x17, _x18, _x19) {\n    return _ref8.apply(this, arguments);\n  };\n}());\napp.post('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body7 = req.body,\n    employee_id = _req$body7.employee_id,\n    location_id = _req$body7.location_id,\n    start_time = _req$body7.start_time,\n    end_time = _req$body7.end_time,\n    notes = _req$body7.notes;\n  var _req$user0 = req.user,\n    companyId = _req$user0.companyId,\n    role = _req$user0.role,\n    currentUserId = _req$user0.userId;\n\n  // Input Validation for Create Schedule\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create schedules.'\n    });\n  }\n  if (typeof employee_id !== 'number' || employee_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid employee ID is required.'\n    });\n  }\n  if (typeof location_id !== 'number' || location_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid location ID is required.'\n    });\n  }\n  if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\n    return res.status(400).json({\n      error: 'Valid start and end times are required.'\n    });\n  }\n  if (new Date(start_time) >= new Date(end_time)) {\n    return res.status(400).json({\n      error: 'Start time must be before end time.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], function (err, employee) {\n    if (err) {\n      console.error(\"Database error verifying employee:\", err);\n      return next(new Error('Database error during employee verification.'));\n    } // Pass error\n    if (!employee) {\n      return res.status(400).json({\n        error: 'Employee not found in your company.'\n      });\n    }\n    db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n      if (err) {\n        console.error(\"Database error verifying location:\", err);\n        return next(new Error('Database error during location verification.'));\n      } // Pass error\n      if (!location) {\n        return res.status(400).json({\n          error: 'Location not found in your company.'\n        });\n      }\n      db.run('INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes], function (insertErr) {\n        if (insertErr) {\n          console.error(\"Database error creating schedule:\", insertErr);\n          return next(new Error('Failed to create schedule.'));\n        } // Pass error\n        res.status(201).json({\n          message: 'Schedule created successfully!',\n          scheduleId: this.lastID\n        });\n      });\n    });\n  });\n});\napp.get('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query2 = req.query,\n    employee_id = _req$query2.employee_id,\n    location_id = _req$query2.location_id,\n    start_date = _req$query2.start_date,\n    end_date = _req$query2.end_date;\n  var _req$user1 = req.user,\n    companyId = _req$user1.companyId,\n    role = _req$user1.role,\n    currentUserId = _req$user1.userId,\n    currentUserLocationId = _req$user1.locationId;\n  var sql = \"SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\\n               FROM Schedules\\n               JOIN Users ON Schedules.employee_id = Users.user_id\\n               JOIN Locations ON Schedules.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND Schedules.location_id = ?\";\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  }\n\n  // Input validation for query parameters\n  if (employee_id && isNaN(parseInt(employee_id))) {\n    return res.status(400).json({\n      error: 'Invalid employee ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (start_date && isNaN(new Date(start_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid start date filter provided.'\n    });\n  }\n  if (end_date && isNaN(new Date(end_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid end date filter provided.'\n    });\n  }\n  if (employee_id && (role === 'super_admin' || role === 'location_admin' && parseInt(employee_id) === currentUserId || role === 'employee' && parseInt(employee_id) === currentUserId)) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole); // This should be employee_id, not filterRole\n  }\n  if (location_id && (role === 'super_admin' || role === 'location_admin' && parseInt(location_id) === currentUserLocationId)) {\n    sql += \" AND Schedules.location_id = ?\";\n    params.push(location_id);\n  }\n  if (start_date) {\n    sql += \" AND Schedules.start_time >= ?\";\n    params.push(start_date);\n  }\n  if (end_date) {\n    sql += \" AND Schedules.end_time <= ?\";\n    params.push(end_date);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching schedules:\", err);\n      return next(new Error('Database error fetching schedules.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/schedules/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user10 = req.user,\n    companyId = _req$user10.companyId,\n    role = _req$user10.role,\n    currentUserId = _req$user10.userId,\n    currentUserLocationId = _req$user10.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid schedule ID provided.'\n    });\n  }\n  if (role === 'employee') {\n    return res.status(403).json({\n      error: 'Access Denied: Employees cannot delete schedules.'\n    });\n  }\n  var sql = \"DELETE FROM Schedules WHERE schedule_id = ?\";\n  var params = [id];\n  if (role === 'location_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)\";\n    params.push(currentUserLocationId, companyId);\n  } else if (role === 'super_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)\";\n    params.push(companyId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting schedule:\", err);\n      return next(new Error('Failed to delete schedule.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Schedule not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Hiring Routes ---\n\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\napp.post('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body8 = req.body,\n    title = _req$body8.title,\n    description = _req$body8.description,\n    requirements = _req$body8.requirements,\n    location_id = _req$body8.location_id;\n  var _req$user11 = req.user,\n    companyId = _req$user11.companyId,\n    role = _req$user11.role,\n    currentUserLocationId = _req$user11.locationId;\n  var created_date = new Date().toISOString(); // Current date/time for creation\n\n  // Input Validation for Create Job Posting\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create job postings.'\n    });\n  }\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: \"Job title is required and must be a non-empty string.\"\n    });\n  }\n  if (!description || typeof description !== 'string' || description.trim() === '') {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    // location_id can be null\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // If location_admin, ensure location_id matches their assigned location, or is null\n  // A location admin can only create job postings for their assigned location or company-wide if their location is null\n  if (role === 'location_admin' && location_id && location_id !== currentUserLocationId) {\n    return res.status(403).json({\n      error: 'Access Denied: Location admin can only post jobs for their assigned location.'\n    });\n  }\n  db.run('INSERT INTO JobPostings (company_id, location_id, title, description, requirements, status, created_date) VALUES (?, ?, ?, ?, ?, ?, ?)', [companyId, location_id, title, description, requirements, 'Open', created_date],\n  // Default status to 'Open'\n  function (err) {\n    if (err) {\n      console.error(\"Database error creating job posting:\", err);\n      return next(new Error('Failed to create job posting.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Job posting created successfully!',\n      jobPostingId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\napp.get('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query3 = req.query,\n    status = _req$query3.status,\n    location_id = _req$query3.location_id;\n  var _req$user12 = req.user,\n    companyId = _req$user12.companyId,\n    role = _req$user12.role,\n    currentUserLocationId = _req$user12.locationId;\n  var sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\n  var params = [companyId];\n\n  // Authorization: super_admin sees all, location_admin sees their location's postings\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    // Employees generally shouldn't see job postings list via this admin API\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view job postings.'\n    });\n  }\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid job posting status filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += ' AND status = ?';\n    params.push(status);\n  }\n  // Only super admin can filter by any location_id beyond their own scope\n  if (location_id && role === 'super_admin') {\n    sql += ' AND location_id = ?';\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching job postings:\", err);\n      return next(new Error('Database error fetching job postings.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp.put('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body9 = req.body,\n    title = _req$body9.title,\n    description = _req$body9.description,\n    requirements = _req$body9.requirements,\n    status = _req$body9.status,\n    location_id = _req$body9.location_id;\n  var _req$user13 = req.user,\n    companyId = _req$user13.companyId,\n    role = _req$user13.role,\n    currentUserLocationId = _req$user13.locationId;\n\n  // Input Validation for Job Posting Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update job postings.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\n    return res.status(400).json({\n      error: 'Job title must be a non-empty string if provided.'\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  var allowedStatuses = ['Open', 'Closed', 'Filled'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE JobPostings SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (title !== undefined) {\n    clauses.push('title = ?');\n    updateParams.push(title);\n  }\n  // Fix: Missing closing parenthesis for this condition\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp[\"delete\"]('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user14 = req.user,\n    companyId = _req$user14.companyId,\n    role = _req$user14.role,\n    currentUserLocationId = _req$user14.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete job postings.'\n    });\n  }\n  var sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete their own location's postings\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting job posting:\", err);\n      return next(new Error('Failed to delete job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Update Applicant API endpoints to use job_posting_id\napp.post('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body0 = req.body,\n    job_posting_id = _req$body0.job_posting_id,\n    full_name = _req$body0.full_name,\n    email = _req$body0.email,\n    notes = _req$body0.notes,\n    location_id = _req$body0.location_id,\n    phone_number = _req$body0.phone_number; // Added phone_number\n  var _req$user15 = req.user,\n    companyId = _req$user15.companyId,\n    role = _req$user15.role,\n    currentUserLocationId = _req$user15.locationId;\n  var application_date = new Date().toISOString(); // Current date/time for application\n\n  // Input Validation for Adding Applicant\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can add applicants.'\n    });\n  }\n  if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid job posting ID is required.'\n    });\n  }\n  if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Full name is required and must be a non-empty string.\"\n    });\n  }\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\n  if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\n    return res.status(400).json({\n      error: \"Phone number is required.\"\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // Verify job_posting_id belongs to the company, and for location_admin, to their location\n  db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, jobPosting) {\n    if (err) {\n      console.error(\"Database error verifying job posting:\", err);\n      return next(new Error('Database error when verifying job posting.'));\n    } // Pass error\n    if (!jobPosting) {\n      return res.status(400).json({\n        error: 'Job Posting not found or does not belong to your company.'\n      });\n    }\n\n    // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\n    if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.'\n      });\n    }\n    db.run('INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date],\n    // Use location_id from payload or job posting\n    function (insertErr) {\n      if (insertErr) {\n        console.error(\"Database error creating applicant:\", insertErr);\n        return next(new Error('Failed to create applicant.'));\n      } // Pass error\n      res.status(201).json({\n        message: 'Applicant added successfully!',\n        applicantId: this.lastID\n      });\n    });\n  });\n});\napp.get('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query4 = req.query,\n    job_posting_id = _req$query4.job_posting_id,\n    status = _req$query4.status,\n    location_id = _req$query4.location_id; // Added job_posting_id, status, location_id filters\n  var _req$user16 = req.user,\n    companyId = _req$user16.companyId,\n    role = _req$user16.role,\n    currentUserId = _req$user16.userId,\n    currentUserLocationId = _req$user16.locationId;\n  var sql = \"SELECT Applicants.*, JobPostings.title AS job_title_name\\n               FROM Applicants\\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\\n               WHERE Applicants.company_id = ?\";\n  var params = [companyId];\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid applicant status filter provided.'\n    });\n  }\n  if (job_posting_id && isNaN(parseInt(job_posting_id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += \" AND Applicants.status = ?\";\n    params.push(status);\n  }\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)\"; // Location admin sees applicants for their location or unassigned\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Applicants.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view applicants.'\n    });\n  }\n\n  // Apply job_posting_id filter if provided\n  if (job_posting_id) {\n    sql += \" AND Applicants.job_posting_id = ?\";\n    params.push(job_posting_id);\n  }\n  // Apply location filter from query params for super_admin\n  if (location_id && role === 'super_admin') {\n    sql += \" AND Applicants.location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching applicants:\", err);\n      return next(new Error('Database error fetching applicants.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\napp.put('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body1 = req.body,\n    full_name = _req$body1.full_name,\n    email = _req$body1.email,\n    status = _req$body1.status,\n    resume_url = _req$body1.resume_url,\n    notes = _req$body1.notes,\n    location_id = _req$body1.location_id,\n    job_posting_id = _req$body1.job_posting_id,\n    phone_number = _req$body1.phone_number;\n  var _req$user17 = req.user,\n    companyId = _req$user17.companyId,\n    role = _req$user17.role,\n    currentUserLocationId = _req$user17.locationId;\n\n  // Input Validation for Applicant Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update applicant records.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\n    return res.status(400).json({\n      error: \"Full name must be a non-empty string if provided.\"\n    });\n  }\n  if (email !== undefined && !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address must be provided if changing email.\"\n    });\n  }\n  if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\n    return res.status(400).json({\n      error: \"Phone number must be a non-empty string if provided.\"\n    });\n  }\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (resume_url !== undefined && typeof resume_url !== 'string') {\n    // Assuming resume_url is a string URL\n    return res.status(400).json({\n      error: 'Resume URL must be a string if provided.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\n    return res.status(400).json({\n      error: 'Job posting ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE Applicants SET ';\n  var updateParams = [];\n  var clauses = [];\n\n  // Fields that can be updated\n  if (full_name !== undefined) {\n    clauses.push('full_name = ?');\n    updateParams.push(full_name);\n  }\n  if (email !== undefined) {\n    clauses.push('email = ?');\n    updateParams.push(email);\n  }\n  if (phone_number !== undefined) {\n    clauses.push('phone_number = ?');\n    updateParams.push(phone_number);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n  if (resume_url !== undefined) {\n    clauses.push('resume_url = ?');\n    updateParams.push(resume_url);\n  }\n  if (notes !== undefined) {\n    clauses.push('notes = ?');\n    updateParams.push(notes);\n  }\n\n  // Admins can update location_id or job_posting_id, with restrictions for location_admin\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot assign applicants to another location.'\n        });\n      }\n      // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (job_posting_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    } else if (role === 'location_admin') {\n      // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\n      db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, job) {\n        if (err) {\n          console.error(\"DB error verifying job posting for update:\", err);\n          return next(new Error('Database error verifying job posting.'));\n        } // Pass error\n        if (!job) {\n          return res.status(400).json({\n            error: 'Job Posting not found or does not belong to your company.'\n          });\n        }\n        if (job.location_id !== null && job.location_id !== currentUserLocationId) {\n          return res.status(403).json({\n            error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.'\n          });\n        }\n      });\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // For location_admin, ensure they can only update applicants within their assigned location\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating applicant:\", err);\n      return next(new Error('Failed to update applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Applicant updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\napp[\"delete\"]('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user18 = req.user,\n    companyId = _req$user18.companyId,\n    role = _req$user18.role,\n    currentUserLocationId = _req$user18.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete applicants.'\n    });\n  }\n  var sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete applicants in their own location\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting applicant:\", err);\n      return next(new Error('Failed to delete applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Document Management Routes ---\n\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\napp.post('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body10 = req.body,\n    title = _req$body10.title,\n    file_name = _req$body10.file_name,\n    file_type = _req$body10.file_type,\n    file_url = _req$body10.file_url,\n    description = _req$body10.description;\n  var _req$user19 = req.user,\n    companyId = _req$user19.companyId,\n    userId = _req$user19.userId;\n  var upload_date = new Date().toISOString();\n\n  // Input Validation for Document Upload\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: 'Document title is required and must be a non-empty string.'\n    });\n  }\n  if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\n    return res.status(400).json({\n      error: 'File name is required and must be a non-empty string.'\n    });\n  }\n  if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\n    return res.status(400).json({\n      error: 'File type is required and must be a non-empty string.'\n    });\n  }\n  // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\n  var urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\n  if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\n    return res.status(400).json({\n      error: 'A valid file URL (starting with http or https) is required.'\n    });\n  }\n  if (description !== undefined && typeof description !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.run('INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, userId, title, file_name, file_type, file_url, description, upload_date], function (err) {\n    if (err) {\n      console.error(\"Database error uploading document:\", err);\n      return next(new Error('Failed to upload document metadata.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Document metadata saved successfully!',\n      documentId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\napp.get('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user20 = req.user,\n    companyId = _req$user20.companyId,\n    userId = _req$user20.userId,\n    role = _req$user20.role;\n  var sql = 'SELECT * FROM Documents WHERE company_id = ?';\n  var params = [companyId];\n\n  // Non-super-admins only see their own documents\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching documents:\", err);\n      return next(new Error('Database error fetching documents.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\napp[\"delete\"]('/api/documents/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user21 = req.user,\n    companyId = _req$user21.companyId,\n    userId = _req$user21.userId,\n    role = _req$user21.role;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid document ID provided.'\n    });\n  }\n  var sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Only super_admin or the original uploader can delete\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting document:\", err);\n      return next(new Error('Failed to delete document.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Document not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\n// This should always be the LAST route in your Express app\napp.get(/'*'/, function (req, res) {\n  // Correctly serve the index.html from the parent directory\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// --- Global Error Handling Middleware ---\n// This should be the very last middleware in your Express app\napp.use(function (err, req, res, next) {\n  console.error(\"Unhandled Error: \".concat(err.stack)); // Log the full stack trace for debugging\n  // Respond with a generic error message for the client\n  res.status(500).json({\n    error: 'An unexpected server error occurred. Please try again later.'\n    // In development, you might send more details:\n    // message: err.message,\n    // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// --- Server Start ---\n// This conditional export allows the app to be imported for testing\n// without starting the server listener when the test runner requires it.\nif (require.main === module) {\n  // Only listen if this file is run directly (not required as a module)\n  app.listen(PORT, function () {\n    console.log(\"Server is running successfully on http://localhost:\".concat(PORT));\n  });\n} else {\n  // Export the app for testing purposes\n  module.exports = app;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","express","require","sqlite3","verbose","bcrypt","jwt","cors","path","csv","_require","Readable","rateLimit","morgan","process","env","NODE_ENV","config","stripeInstance","STRIPE_SECRET_KEY","app","allowedOrigins","CORS_ORIGIN","split","push","corsOptions","origin","callback","includes","msg","Error","indexOf","methods","credentials","optionsSuccessStatus","use","PORT","STRIPE_WEBHOOK_SECRET","authLimiter","windowMs","max","message","standardHeaders","legacyHeaders","post","raw","type","_ref","_callee","req","res","sig","event","session","userId","planId","subscriptionUpdated","subscriptionDeleted","invoiceSucceeded","invoiceFailed","_t","_t2","_context","headers","webhooks","constructEvent","body","console","error","concat","status","send","data","object","log","id","metadata","payment_status","db","run","customer","subscription","err","plan","json","received","_x","_x2","JWT_SECRET","join","__dirname","maxAge","immutable","Database","exit","get","serialize","authenticateToken","next","authHeader","token","verify","user","isValidEmail","email","test","_ref2","_callee2","_req$body","company_name","full_name","password","password_hash","_t3","_context2","trim","hash","newCompanyId","lastID","userInsertErr","_x3","_x4","_x5","_req$body2","_ref3","_callee3","isMatch","payload","_context3","compare","user_id","role","fullName","companyId","company_id","locationId","location_id","subscriptionStatus","subscription_status","plan_id","sign","expiresIn","_x6","_x7","_ref4","_callee4","_req$body3","_req$user","_t4","_context4","location","_x8","_x9","_x0","_ref5","_callee5","_req$body4","position","employee_id","_req$user2","currentUserLocationId","isLocationIdValid","locationVerification","_t5","_context5","isNaN","undefined","reject","_x1","_x10","_x11","_req$user3","put","_ref6","_callee7","_req$body5","currentPassword","newPassword","_context7","_ref7","_callee6","updateSql","updateParams","clauses","changesMade","existingUser","newPasswordHash","_t6","_context6","row","updateErr","changes","fetchErr","updatedUser","newPayload","newToken","_x15","_x16","_x12","_x13","_x14","_req$user4","sql","params","all","rows","_req$body6","location_name","location_address","_req$user5","_req$user6","parseInt","_req$user7","currentUserId","_req$query","query","filterRole","filterLocationId","allowedRoles","_req$user8","authenticatedUserId","_ref8","_callee8","_req$user9","allowedPlanIds","priceIdMap","stripePriceId","customerId","userRecord","_t7","_context8","STRIPE_PRICE_ID_PRO","STRIPE_PRICE_ID_ENT","stripe_customer_id","customers","checkout","sessions","mode","line_items","price","quantity","success_url","FRONTEND_URL","cancel_url","url","_x17","_x18","_x19","_req$body7","start_time","end_time","notes","_req$user0","Date","getTime","employee","insertErr","scheduleId","_req$query2","start_date","end_date","_req$user1","_req$user10","_req$body8","title","description","requirements","_req$user11","created_date","toISOString","jobPostingId","_req$query3","_req$user12","allowedStatuses","_req$body9","_req$user13","_req$user14","_req$body0","job_posting_id","phone_number","_req$user15","application_date","jobPosting","applicantId","_req$query4","_req$user16","_req$body1","resume_url","_req$user17","job","_req$user18","_req$body10","file_name","file_type","file_url","_req$user19","upload_date","urlRegex","documentId","_req$user20","_req$user21","sendFile","stack","main","module","listen","exports"],"sourceRoot":"C:\\Users\\xarcy\\OneDrive\\Desktop\\onboardflow\\backend\\","sources":["server.js"],"sourcesContent":["// --- Imports ---\r\nconst express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors'); // Import cors\r\nconst path = require('path');\r\nconst csv = require('csv-parser'); // For CSV parsing\r\nconst { Readable } = require('stream'); // For creating a readable stream from a string\r\nconst rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\r\nconst morgan = require('morgan'); // Import morgan for request logging\r\n\r\n// Load environment variables from .env file in development\r\nif (process.env.NODE_ENV !== 'production') {\r\n    require('dotenv').config();\r\n}\r\n\r\n// Import the Stripe library and initialize it with your secret key\r\n// Use process.env.STRIPE_SECRET_KEY for production\r\nconst stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\r\n\r\n// --- App Initialization ---\r\nconst app = express();\r\n\r\n// Configure CORS for production environment\r\nconst allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\r\n\r\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\r\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\r\n    allowedOrigins.push('null');\r\n}\r\n\r\nconst corsOptions = {\r\n    origin: function (origin, callback) {\r\n        // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\r\n        if (!origin) {\r\n            // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\r\n            if (allowedOrigins.includes('null') || (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN)) {\r\n                return callback(null, true);\r\n            }\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n\r\n        if (allowedOrigins.indexOf(origin) === -1) {\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n        return callback(null, true);\r\n    },\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Allow cookies to be sent\r\n    optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n\r\n// Use process.env.PORT for production, fallback to 3000 for local development\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Define a webhook secret for Stripe. This should also be an environment variable.\r\nconst STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\r\n\r\n// --- Rate Limiting Configuration ---\r\nconst authLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 10, // Max 10 requests per 15 minutes per IP\r\n    message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) ---\r\n// This route needs the raw body for signature verification.\r\napp.post('/api/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {\r\n    const sig = req.headers['stripe-signature'];\r\n\r\n    let event;\r\n\r\n    try {\r\n        event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n    } catch (err) {\r\n        console.error(`Webhook Error: ${err.message}`);\r\n        return res.status(400).send(`Webhook Error: ${err.message}`);\r\n    }\r\n\r\n    // Handle the event\r\n    switch (event.type) {\r\n        case 'checkout.session.completed':\r\n            const session = event.data.object;\r\n            console.log('Checkout Session Completed:', session.id);\r\n            const userId = session.metadata.userId;\r\n            const planId = session.metadata.planId;\r\n            if (session.payment_status === 'paid' && userId && planId) {\r\n                db.run(\r\n                    'UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?',\r\n                    [session.customer, session.subscription, 'active', planId, userId],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for checkout.session.completed:', err.message);\r\n                        else console.log(`User ${userId} subscription updated to ${planId} (active).`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.updated':\r\n            const subscriptionUpdated = event.data.object;\r\n            console.log('Subscription Updated:', subscriptionUpdated.id);\r\n            if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?',\r\n                    [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.updated:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionUpdated.customer} status updated to ${subscriptionUpdated.status} and plan to ${subscriptionUpdated.plan.id}.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.deleted':\r\n            const subscriptionDeleted = event.data.object;\r\n            console.log('Subscription Deleted:', subscriptionDeleted.id);\r\n            if (subscriptionDeleted.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?',\r\n                    ['cancelled', 'free', subscriptionDeleted.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.deleted:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionDeleted.customer} marked as cancelled and reverted to free.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_succeeded':\r\n            const invoiceSucceeded = event.data.object;\r\n            console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\r\n            if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);\r\n                        else console.log(`Subscription ${invoiceSucceeded.subscription} status set to active.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_failed':\r\n            const invoiceFailed = event.data.object;\r\n            console.log('Invoice Payment Failed:', invoiceFailed.id);\r\n            if (invoiceFailed.subscription && invoiceFailed.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['past_due', invoiceFailed.subscription, invoiceFailed.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_failed:', err.message);\r\n                        else console.log(`Subscription ${invoiceFailed.subscription} status set to past_due.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        default:\r\n            console.log(`Unhandled event type ${event.type}`);\r\n    }\r\n    res.status(200).json({ received: true });\r\n});\r\n\r\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\r\napp.use(express.json());\r\n\r\n// --- JWT Secret ---\r\n// Use process.env.JWT_SECRET for production\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-and-long-string-for-jwt';\r\n\r\n// --- Request Logging (using Morgan) ---\r\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\r\napp.use(morgan('dev'));\r\n\r\n// --- Serve Static Files (Frontend) with Caching ---\r\n// This middleware serves static files from the 'onboardflow' root directory\r\n// and sets Cache-Control headers for browser caching.\r\napp.use(express.static(path.join(__dirname, '..'), {\r\n    maxAge: '7d', // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\r\n    immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\r\n}));\r\n\r\n// --- Database Setup ---\r\nconst db = new sqlite3.Database('./onboardflow.db', (err) => {\r\n    if (err) {\r\n        // Log database connection error and exit\r\n        console.error(\"Error opening database:\", err.message);\r\n        process.exit(1); // Exit process if database connection fails\r\n    } else {\r\n        console.log(\"Successfully connected to the database.\");\r\n        db.get(\"PRAGMA foreign_keys = ON\");\r\n        db.serialize(() => {\r\n            db.run(`CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Users (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER,\r\n                location_id INTEGER,\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL UNIQUE,\r\n                password_hash TEXT NOT NULL,\r\n                position TEXT,\r\n                employee_id TEXT,\r\n                role TEXT NOT NULL,\r\n                stripe_customer_id TEXT,\r\n                stripe_subscription_id TEXT,\r\n                subscription_status TEXT,\r\n                plan_id TEXT,\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Schedules (\r\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                employee_id INTEGER NOT NULL,\r\n                location_id INTEGER NOT NULL,\r\n                start_time TEXT NOT NULL,\r\n                end_time TEXT NOT NULL,\r\n                notes TEXT,\r\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // NEW: Create JobPostings table\r\n            db.run(`CREATE TABLE IF NOT EXISTS JobPostings (\r\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: link job posting to a specific location\r\n                title TEXT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                requirements TEXT, -- Optional: job requirements\r\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\r\n                created_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // Update Applicants table schema to link to JobPostings and add phone_number\r\n            db.run(`CREATE TABLE IF NOT EXISTS Applicants (\r\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\r\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL,\r\n                phone_number TEXT, -- NEW: Phone number field\r\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\r\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\r\n                notes TEXT,\r\n                application_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\r\n            )`);\r\n            // NEW: Create Documents table for file/video uploads\r\n            db.run(`CREATE TABLE IF NOT EXISTS Documents (\r\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL, -- User who uploaded the document\r\n                title TEXT NOT NULL,\r\n                file_name TEXT NOT NULL,\r\n                file_type TEXT NOT NULL,\r\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\r\n                description TEXT,\r\n                upload_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\r\n            )`);\r\n        });\r\n    }\r\n});\r\n\r\n// --- Authentication Middleware ---\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1];\r\n    if (token == null) {\r\n        return res.status(401).json({ error: 'Unauthorized: No token provided.' });\r\n    }\r\n    jwt.verify(token, JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            // Log the specific JWT error for debugging\r\n            console.error(\"JWT Verification Error:\", err.message);\r\n            return res.status(403).json({ error: 'Forbidden: Invalid or expired token.' });\r\n        }\r\n        req.user = user;\r\n        next();\r\n    });\r\n}\r\n\r\n// --- Helper for Input Validation ---\r\nconst isValidEmail = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\r\n\r\n// Apply rate limiting to authentication routes\r\napp.post('/api/register', authLimiter, async (req, res, next) => { // Added 'next'\r\n    const { company_name, full_name, email, password } = req.body;\r\n\r\n    // Input Validation for Registration\r\n    if (!company_name || typeof company_name !== 'string' || company_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Company name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Password is required and must be at least 6 characters long.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.serialize(() => {\r\n            db.run('BEGIN TRANSACTION');\r\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function(err) {\r\n                if (err) { \r\n                    db.run('ROLLBACK'); \r\n                    console.error(\"Database error creating company:\", err);\r\n                    return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\r\n                }\r\n                const newCompanyId = this.lastID;\r\n                db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')`, [newCompanyId, null, full_name, email, password_hash], function(userInsertErr) {\r\n                    if (userInsertErr) { \r\n                        db.run('ROLLBACK'); \r\n                        console.error(\"Database error creating user:\", userInsertErr);\r\n                        if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { \r\n                            return res.status(409).json({ error: 'Email already registered.' }); \r\n                        }\r\n                        return next(new Error(\"Could not create user.\")); // Pass error\r\n                    }\r\n                    db.run('COMMIT');\r\n                    res.status(201).json({ message: \"Company and user registered successfully!\", userId: this.lastID });\r\n                });\r\n            });\r\n        });\r\n    } catch (error) { \r\n        console.error(\"Registration error:\", error);\r\n        next(error); // Pass error to error handling middleware\r\n    }\r\n});\r\n\r\napp.post('/api/login', authLimiter, (req, res, next) => { // Added 'next'\r\n    const { email, password } = req.body;\r\n\r\n    // Input Validation for Login\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length === 0) {\r\n        return res.status(400).json({ error: \"Password is required.\" });\r\n    }\r\n\r\n    db.get(\"SELECT * FROM Users WHERE email = ?\", [email], async (err, user) => {\r\n        if (err) {\r\n            console.error(\"Database error during login:\", err);\r\n            return next(new Error(\"A server error occurred during login.\")); // Pass error\r\n        }\r\n        if (!user) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const isMatch = await bcrypt.compare(password, user.password_hash);\r\n        if (!isMatch) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const payload = { userId: user.user_id, email: user.email, role: user.role, fullName: user.full_name, companyId: user.company_id, locationId: user.location_id, subscriptionStatus: user.subscription_status, planId: user.plan_id };\r\n        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });\r\n        res.status(200).json({ message: \"Login successful!\", token, role: user.role });\r\n    });\r\n});\r\n\r\napp.post('/api/invite-admin', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { full_name, email, password, location_id } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Invite Admin\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can invite other admins.' }); }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) { // Assuming location_id is an integer ID\r\n        return res.status(400).json({ error: \"A valid location ID is required.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error checking location:\", err); return next(new Error('Database error when verifying location.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' }); }\r\n            db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')`, [companyId, location_id, full_name, email, password_hash], function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting admin:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite admin.')); // Pass error\r\n                }\r\n                res.status(201).json({ message: \"Location admin invited successfully!\", userId: this.lastID });\r\n            });\r\n        });\r\n    } catch (error) { console.error(\"Invite admin error:\", error); next(error); } // Pass error\r\n});\r\n\r\n// NEW: API endpoint for inviting employees\r\napp.post('/api/invite-employee', authenticateToken, async (req, res, next) => {\r\n    const { full_name, email, password, position, employee_id, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\r\n    if (!['super_admin', 'location_admin'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can invite employees.' });\r\n    }\r\n\r\n    // Input Validation for Invite Employee\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    \r\n    // Corrected location_id validation: Must be a number > 0.\r\n    // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\r\n    // For location_admin, it must match their current location.\r\n    // This revised logic correctly checks for null OR a valid positive integer.\r\n    const isLocationIdValid = location_id === null || (typeof location_id === 'number' && !isNaN(location_id) && location_id > 0);\r\n    if (!isLocationIdValid) {\r\n        return res.status(400).json({ error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\" });\r\n    }\r\n    \r\n    if (position !== undefined && typeof position !== 'string') {\r\n        return res.status(400).json({ error: 'Position must be a string if provided.' });\r\n    }\r\n    if (employee_id !== undefined && typeof employee_id !== 'string') {\r\n        return res.status(400).json({ error: 'Employee ID must be a string if provided.' });\r\n    }\r\n\r\n    // Location Admin specific check: ensure they are inviting to their assigned location or null\r\n    // If location_admin tries to set a location that is NOT their own, block it.\r\n    // Allow location_admin to set to null if their current location is null.\r\n    if (role === 'location_admin') {\r\n        // A location admin can ONLY assign an employee to their own location or to null (unassigned)\r\n        if (location_id !== currentUserLocationId) {\r\n            // If the target location_id is not the current user's location, check if both are null\r\n            if (!(location_id === null && currentUserLocationId === null)) {\r\n                return res.status(403).json({ error: 'Access Denied: Location admin can only invite employees to their assigned location.' });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n\r\n        // Verify the location_id belongs to the company and, if location_admin, matches their assigned location\r\n        // This check is crucial if location_id is NOT null\r\n        if (location_id !== null) {\r\n            const locationVerification = await new Promise((resolve, reject) => {\r\n                db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n                    if (err) reject(err);\r\n                    resolve(location);\r\n                });\r\n            });\r\n            if (!locationVerification) {\r\n                return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' });\r\n            }\r\n        }\r\n\r\n        db.run(\r\n            `INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')`,\r\n            [companyId, location_id, full_name, email, password_hash, position, employee_id,], // Default new employees to 'employee' role\r\n            function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting employee:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite employee.'));\r\n                }\r\n                res.status(201).json({ message: \"Employee invited successfully!\", userId: this.lastID });\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Invite employee error:\", error);\r\n        next(error);\r\n    }\r\n});\r\n\r\n\r\napp.get('/api/profile', authenticateToken, (req, res) => {\r\n    const { userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId } = req.user;\r\n    res.status(200).json({ userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId });\r\n});\r\n\r\napp.put('/api/profile', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { fullName, email, currentPassword, newPassword } = req.body;\r\n    const { userId } = req.user;\r\n\r\n    // Input Validation for Profile Update\r\n    if (fullName === undefined && email === undefined && (!currentPassword || !newPassword)) {\r\n        return res.status(400).json({ error: 'No data provided for update.' });\r\n    }\r\n    if (fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6)) {\r\n        return res.status(400).json({ error: \"New password must be at least 6 characters long if changing password.\" });\r\n    }\r\n    if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {\r\n        return res.status(400).json({ error: 'Both current password and new password are required to change password.' });\r\n    }\r\n\r\n\r\n    db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], async (err, user) => {\r\n        if (err) { console.error(\"Database error fetching user for profile update:\", err); return next(new Error(\"Server error during profile update.\")); } // Pass error\r\n        if (!user) { return res.status(404).json({ error: \"User not found.\" }); }\r\n        let updateSql = 'UPDATE Users SET ';\r\n        const updateParams = [];\r\n        const clauses = [];\r\n        let changesMade = false;\r\n        if (fullName !== undefined && fullName !== user.full_name) {\r\n            clauses.push('full_name = ?');\r\n            updateParams.push(fullName);\r\n            changesMade = true;\r\n        }\r\n        if (email !== undefined && email !== user.email) {\r\n            try { // Added try-catch for async await in db.get\r\n                const existingUser = await new Promise((resolve, reject) => {\r\n                    db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], (err, row) => {\r\n                        if (err) reject(err);\r\n                        resolve(row);\r\n                    });\r\n                });\r\n                if (existingUser) { return res.status(409).json({ error: 'Email already in use by another account.' }); }\r\n            } catch (dbErr) {\r\n                console.error(\"Database error checking existing email:\", dbErr);\r\n                return next(new Error(\"Server error verifying email availability.\"));\r\n            }\r\n            clauses.push('email = ?');\r\n            updateParams.push(email);\r\n            changesMade = true;\r\n        }\r\n        if (currentPassword && newPassword) {\r\n            const isMatch = await bcrypt.compare(currentPassword, user.password_hash);\r\n            if (!isMatch) { return res.status(401).json({ error: \"Current password incorrect.\" }); }\r\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\r\n            clauses.push('password_hash = ?');\r\n            updateParams.push(newPasswordHash);\r\n            changesMade = true;\r\n        }\r\n        if (!changesMade) { return res.status(200).json({ message: 'No changes detected. Profile remains the same.' }); }\r\n        updateSql += clauses.join(', ') + ' WHERE user_id = ?';\r\n        updateParams.push(userId);\r\n        db.run(updateSql, updateParams, function(updateErr) {\r\n            if (updateErr) { console.error(\"Database error updating profile:\", updateErr); return next(new Error('Failed to update profile.')); } // Pass error\r\n            if (this.changes > 0) {\r\n                db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], (fetchErr, updatedUser) => {\r\n                    if (fetchErr || !updatedUser) { console.error(\"Error fetching updated user for new token:\", fetchErr); return res.status(200).json({ message: 'Profile updated successfully, but token could not be refreshed.' }); }\r\n                    const newPayload = { userId: updatedUser.user_id, email: updatedUser.email, role: updatedUser.role, fullName: updatedUser.full_name, companyId: updatedUser.company_id, locationId: updatedUser.location_id, subscriptionStatus: updatedUser.subscription_status, planId: user.plan_id };\r\n                    const newToken = jwt.sign(newPayload, JWT_SECRET, { expiresIn: '1h' });\r\n                    res.status(200).json({ message: 'Profile updated successfully!', token: newToken });\r\n                });\r\n            } else { res.status(200).json({ message: 'No changes applied as data was identical.' }); }\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role } = req.user;\r\n    let sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\r\n    if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view locations.' });\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching locations:\", err); return next(new Error('Database error fetching locations.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.post('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { location_name, location_address } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Create Location\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can create locations.' }); }\r\n    if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Location name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\r\n        return res.status(400).json({ error: \"Location address is required and must be a non-empty string.\" });\r\n    }\r\n\r\n    db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function(err) {\r\n        if (err) { console.error(\"Database error creating location:\", err); return next(new Error('Failed to create location.')); } // Pass error\r\n        res.status(201).json({ message: 'Location created!', locationId: this.lastID });\r\n    });\r\n});\r\n\r\napp.delete('/api/locations/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete locations.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting location:\", err); return next(new Error('Failed to delete location.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Location not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.get('/api/users', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n    const { filterRole, filterLocationId } = req.query;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view users.' });\r\n    }\r\n\r\n    // Input validation for filterRole and filterLocationId\r\n    const allowedRoles = ['super_admin', 'location_admin', 'employee'];\r\n    if (filterRole && (!allowedRoles.includes(filterRole) || (role === 'location_admin' && filterRole === 'super_admin'))) {\r\n        return res.status(400).json({ error: 'Invalid filter role provided or insufficient permissions to filter by this role.' });\r\n    }\r\n    if (filterLocationId && isNaN(parseInt(filterLocationId))) {\r\n        return res.status(400).json({ error: 'Invalid filter location ID provided.' });\r\n    }\r\n\r\n\r\n    if (filterRole) {\r\n        if (role === 'super_admin' || (role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin')) || (role === 'employee' && filterRole === 'employee')) {\r\n            sql += ` AND Users.role = ?`;\r\n            params.push(filterRole);\r\n        } else {\r\n            // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by role.' });\r\n        }\r\n    }\r\n    if (filterLocationId) {\r\n        // Ensure location_admin can only filter by their own location\r\n        if (role === 'super_admin' || (role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId)) {\r\n            sql += ` AND Users.location_id = ?`;\r\n            params.push(filterLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by location.' });\r\n        }\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching users:\", err); return next(new Error('Database error fetching users.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/users/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: authenticatedUserId } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete users.' }); }\r\n    if (parseInt(id) === authenticatedUserId) { return res.status(403).json({ error: 'Cannot delete your own super admin account via this interface.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid user ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting user:\", err); return next(new Error('Failed to delete user.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'User not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.post('/api/create-checkout-session', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { planId } = req.body;\r\n    const { userId, email, companyId } = req.user;\r\n\r\n    // Input Validation for planId\r\n    const allowedPlanIds = ['pro', 'enterprise'];\r\n    if (!planId || !allowedPlanIds.includes(planId)) {\r\n        return res.status(400).json({ error: 'Invalid plan ID provided.' });\r\n    }\r\n\r\n    const priceIdMap = {\r\n        'pro': process.env.STRIPE_PRICE_ID_PRO,       // Use environment variable\r\n        'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\r\n    };\r\n    const stripePriceId = priceIdMap[planId];\r\n    if (!stripePriceId) { return res.status(500).json({ error: 'Stripe price ID not configured for this plan.' }); } // Changed from 400 to 500 as this is a server-side config issue\r\n    try {\r\n        let customerId;\r\n        const userRecord = await new Promise((resolve, reject) => {\r\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], (err, row) => {\r\n                if (err) reject(err);\r\n                resolve(row);\r\n            });\r\n        });\r\n        if (userRecord && userRecord.stripe_customer_id) {\r\n            customerId = userRecord.stripe_customer_id;\r\n        } else {\r\n            const customer = await stripeInstance.customers.create({ email: email, metadata: { userId: userId, companyId: companyId, }, });\r\n            customerId = customer.id;\r\n            db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], (err) => {\r\n                if (err) console.error('Failed to save Stripe customer ID to DB:', err);\r\n            });\r\n        }\r\n        const session = await stripeInstance.checkout.sessions.create({\r\n            customer: customerId,\r\n            mode: 'subscription',\r\n            line_items: [{ price: stripePriceId, quantity: 1, }, ],\r\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\r\n            success_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}`,\r\n            cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/pricing.html?payment=cancelled`,\r\n            metadata: { userId: userId, planId: planId, },\r\n        });\r\n        res.status(200).json({ url: session.url });\r\n    } catch (error) { console.error('Error creating Stripe Checkout Session:', error); next(error); } // Pass error\r\n});\r\n\r\napp.post('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_time, end_time, notes } = req.body;\r\n    const { companyId, role, userId: currentUserId } = req.user;\r\n\r\n    // Input Validation for Create Schedule\r\n    if (role !== 'super_admin' && role !== 'location_admin') { return res.status(403).json({ error: 'Access Denied: Only admins can create schedules.' }); }\r\n    if (typeof employee_id !== 'number' || employee_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid employee ID is required.' });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid location ID is required.' });\r\n    }\r\n    if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\r\n        return res.status(400).json({ error: 'Valid start and end times are required.' });\r\n    }\r\n    if (new Date(start_time) >= new Date(end_time)) {\r\n        return res.status(400).json({ error: 'Start time must be before end time.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], (err, employee) => {\r\n        if (err) { console.error(\"Database error verifying employee:\", err); return next(new Error('Database error during employee verification.')); } // Pass error\r\n        if (!employee) { return res.status(400).json({ error: 'Employee not found in your company.' }); }\r\n        db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error verifying location:\", err); return next(new Error('Database error during location verification.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Location not found in your company.' }); }\r\n            db.run(\r\n                'INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes],\r\n                function(insertErr) {\r\n                    if (insertErr) { console.error(\"Database error creating schedule:\", insertErr); return next(new Error('Failed to create schedule.')); } // Pass error\r\n                    res.status(201).json({ message: 'Schedule created successfully!', scheduleId: this.lastID });\r\n                }\r\n            );\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_date, end_date } = req.query;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\r\n               FROM Schedules\r\n               JOIN Users ON Schedules.employee_id = Users.user_id\r\n               JOIN Locations ON Schedules.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND Schedules.location_id = ?`;\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    if (employee_id && isNaN(parseInt(employee_id))) {\r\n        return res.status(400).json({ error: 'Invalid employee ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n    if (start_date && isNaN(new Date(start_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid start date filter provided.' });\r\n    }\r\n    if (end_date && isNaN(new Date(end_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid end date filter provided.' });\r\n    }\r\n\r\n\r\n    if (employee_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(employee_id) === currentUserId) || (role === 'employee' && parseInt(employee_id) === currentUserId))) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole); // This should be employee_id, not filterRole\r\n    }\r\n    if (location_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(location_id) === currentUserLocationId))) {\r\n        sql += ` AND Schedules.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n    if (start_date) {\r\n        sql += ` AND Schedules.start_time >= ?`;\r\n        params.push(start_date);\r\n    }\r\n    if (end_date) {\r\n        sql += ` AND Schedules.end_time <= ?`;\r\n        params.push(end_date);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching schedules:\", err); return next(new Error('Database error fetching schedules.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/schedules/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid schedule ID provided.' });\r\n    }\r\n\r\n    if (role === 'employee') {\r\n        return res.status(403).json({ error: 'Access Denied: Employees cannot delete schedules.' });\r\n    }\r\n\r\n    let sql = `DELETE FROM Schedules WHERE schedule_id = ?`;\r\n    const params = [id];\r\n\r\n    if (role === 'location_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)`;\r\n        params.push(currentUserLocationId, companyId);\r\n    } else if (role === 'super_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)`;\r\n        params.push(companyId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting schedule:\", err); return next(new Error('Failed to delete schedule.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Schedule not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Hiring Routes ---\r\n\r\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\r\napp.post('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, description, requirements, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const created_date = new Date().toISOString(); // Current date/time for creation\r\n\r\n    // Input Validation for Create Job Posting\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can create job postings.' });\r\n    }\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: \"Job title is required and must be a non-empty string.\" });\r\n    }\r\n    if (!description || typeof description !== 'string' || description.trim() === '') {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) { // location_id can be null\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n    // If location_admin, ensure location_id matches their assigned location, or is null\r\n    // A location admin can only create job postings for their assigned location or company-wide if their location is null\r\n    if (role === 'location_admin' && location_id && location_id !== currentUserLocationId) {\r\n        return res.status(403).json({ error: 'Access Denied: Location admin can only post jobs for their assigned location.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO JobPostings (company_id, location_id, title, description, requirements, status, created_date) VALUES (?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, location_id, title, description, requirements, 'Open', created_date], // Default status to 'Open'\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error creating job posting:\", err);\r\n                return next(new Error('Failed to create job posting.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Job posting created successfully!', jobPostingId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\r\napp.get('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { status, location_id } = req.query;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Authorization: super_admin sees all, location_admin sees their location's postings\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        // Employees generally shouldn't see job postings list via this admin API\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view job postings.' });\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid job posting status filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n\r\n    if (status) {\r\n        sql += ' AND status = ?';\r\n        params.push(status);\r\n    }\r\n    // Only super admin can filter by any location_id beyond their own scope\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ' AND location_id = ?';\r\n        params.push(location_id);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching job postings:\", err); return next(new Error('Database error fetching job postings.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.put('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { title, description, requirements, status, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Job Posting Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update job postings.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n    if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\r\n        return res.status(400).json({ error: 'Job title must be a non-empty string if provided.' });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE JobPostings SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (title !== undefined) { clauses.push('title = ?'); updateParams.push(title); }\r\n    // Fix: Missing closing parenthesis for this condition\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.delete('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete job postings.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete their own location's postings\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting job posting:\", err); return next(new Error('Failed to delete job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n\r\n// Update Applicant API endpoints to use job_posting_id\r\napp.post('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, full_name, email, notes, location_id, phone_number } = req.body; // Added phone_number\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const application_date = new Date().toISOString(); // Current date/time for application\r\n\r\n    // Input Validation for Adding Applicant\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can add applicants.' });\r\n    }\r\n    if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid job posting ID is required.' });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\r\n    if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\r\n        return res.status(400).json({ error: \"Phone number is required.\" });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    // Verify job_posting_id belongs to the company, and for location_admin, to their location\r\n    db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, jobPosting) => {\r\n        if (err) { console.error(\"Database error verifying job posting:\", err); return next(new Error('Database error when verifying job posting.')); } // Pass error\r\n        if (!jobPosting) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n        \r\n        // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\r\n        if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.' });\r\n        }\r\n\r\n        db.run(\r\n            'INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n            [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date], // Use location_id from payload or job posting\r\n            function(insertErr) {\r\n                if (insertErr) { console.error(\"Database error creating applicant:\", insertErr); return next(new Error('Failed to create applicant.')); } // Pass error\r\n                res.status(201).json({ message: 'Applicant added successfully!', applicantId: this.lastID });\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\napp.get('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, status, location_id } = req.query; // Added job_posting_id, status, location_id filters\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Applicants.*, JobPostings.title AS job_title_name\r\n               FROM Applicants\r\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\r\n               WHERE Applicants.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid applicant status filter provided.' });\r\n    }\r\n    if (job_posting_id && isNaN(parseInt(job_posting_id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n    if (status) {\r\n        sql += ` AND Applicants.status = ?`;\r\n        params.push(status);\r\n    }\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)`; // Location admin sees applicants for their location or unassigned\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Applicants.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view applicants.' });\r\n    }\r\n\r\n    // Apply job_posting_id filter if provided\r\n    if (job_posting_id) {\r\n        sql += ` AND Applicants.job_posting_id = ?`;\r\n        params.push(job_posting_id);\r\n    }\r\n    // Apply location filter from query params for super_admin\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND Applicants.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching applicants:\", err); return next(new Error('Database error fetching applicants.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\r\napp.put('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { full_name, email, status, resume_url, notes, location_id, job_posting_id, phone_number } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Applicant Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update applicant records.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n    if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\r\n        return res.status(400).json({ error: \"Phone number must be a non-empty string if provided.\" });\r\n    }\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (resume_url !== undefined && typeof resume_url !== 'string') { // Assuming resume_url is a string URL\r\n        return res.status(400).json({ error: 'Resume URL must be a string if provided.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n    if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\r\n        return res.status(400).json({ error: 'Job posting ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE Applicants SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    // Fields that can be updated\r\n    if (full_name !== undefined) { clauses.push('full_name = ?'); updateParams.push(full_name); }\r\n    if (email !== undefined) { clauses.push('email = ?'); updateParams.push(email); }\r\n    if (phone_number !== undefined) { clauses.push('phone_number = ?'); updateParams.push(phone_number); }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    if (resume_url !== undefined) { clauses.push('resume_url = ?'); updateParams.push(resume_url); }\r\n    if (notes !== undefined) { clauses.push('notes = ?'); updateParams.push(notes); }\r\n    \r\n    // Admins can update location_id or job_posting_id, with restrictions for location_admin\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to another location.' });\r\n            }\r\n            // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n    if (job_posting_id !== undefined) {\r\n         if (role === 'super_admin') {\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        } else if (role === 'location_admin') {\r\n            // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\r\n            db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, job) => {\r\n                if (err) { console.error(\"DB error verifying job posting for update:\", err); return next(new Error('Database error verifying job posting.')); } // Pass error\r\n                if (!job) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n                if (job.location_id !== null && job.location_id !== currentUserLocationId) {\r\n                    return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.' });\r\n                }\r\n            });\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // For location_admin, ensure they can only update applicants within their assigned location\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating applicant:\", err); return next(new Error('Failed to update applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Applicant updated successfully!' });\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\r\napp.delete('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete applicants.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete applicants in their own location\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting applicant:\", err); return next(new Error('Failed to delete applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Document Management Routes ---\r\n\r\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\r\napp.post('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, file_name, file_type, file_url, description } = req.body;\r\n    const { companyId, userId } = req.user;\r\n    const upload_date = new Date().toISOString();\r\n\r\n    // Input Validation for Document Upload\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: 'Document title is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\r\n        return res.status(400).json({ error: 'File name is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\r\n        return res.status(400).json({ error: 'File type is required and must be a non-empty string.' });\r\n    }\r\n    // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\r\n    const urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\r\n    if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\r\n        return res.status(400).json({ error: 'A valid file URL (starting with http or https) is required.' });\r\n    }\r\n    if (description !== undefined && typeof description !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, userId, title, file_name, file_type, file_url, description, upload_date],\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error uploading document:\", err);\r\n                return next(new Error('Failed to upload document metadata.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Document metadata saved successfully!', documentId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\r\napp.get('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, userId, role } = req.user;\r\n    \r\n    let sql = 'SELECT * FROM Documents WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Non-super-admins only see their own documents\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching documents:\", err); return next(new Error('Database error fetching documents.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\r\napp.delete('/api/documents/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, userId, role } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid document ID provided.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Only super_admin or the original uploader can delete\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting document:\", err); return next(new Error('Failed to delete document.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Document not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\r\n// This should always be the LAST route in your Express app\r\napp.get(/'*'/, (req, res) => {\r\n    // Correctly serve the index.html from the parent directory\r\n    res.sendFile(path.join(__dirname, '..', 'index.html'));\r\n});\r\n\r\n// --- Global Error Handling Middleware ---\r\n// This should be the very last middleware in your Express app\r\napp.use((err, req, res, next) => {\r\n    console.error(`Unhandled Error: ${err.stack}`); // Log the full stack trace for debugging\r\n    // Respond with a generic error message for the client\r\n    res.status(500).json({\r\n        error: 'An unexpected server error occurred. Please try again later.',\r\n        // In development, you might send more details:\r\n        // message: err.message,\r\n        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n});\r\n\r\n// --- Server Start ---\r\n// This conditional export allows the app to be imported for testing\r\n// without starting the server listener when the test runner requires it.\r\nif (require.main === module) {\r\n    // Only listen if this file is run directly (not required as a module)\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is running successfully on http://localhost:${PORT}`);\r\n    });\r\n} else {\r\n    // Export the app for testing purposes\r\n    module.exports = app;\r\n}\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1750315066447},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"filename\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\test\\\\server.test.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"_exploded\":true,\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$47\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$48\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.27.4:development":{"value":{"code":"\"use strict\";\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// --- Imports ---\nvar express = require('express');\nvar sqlite3 = require('sqlite3').verbose();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar cors = require('cors'); // Import cors\nvar path = require('path');\nvar csv = require('csv-parser'); // For CSV parsing\nvar _require = require('stream'),\n  Readable = _require.Readable; // For creating a readable stream from a string\nvar rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\nvar morgan = require('morgan'); // Import morgan for request logging\n\n// Load environment variables from .env file in development\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\n  require('dotenv').config();\n}\n\n// Import the Stripe library and initialize it with your secret key\n// Use process.env.STRIPE_SECRET_KEY for production\nvar stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\n\n// --- App Initialization ---\nvar app = express();\n\n// Configure CORS for production environment\nvar allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\n\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n  allowedOrigins.push('null');\n}\nvar corsOptions = {\n  origin: function origin(_origin, callback) {\n    // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\n    if (!_origin) {\n      // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\n      if (allowedOrigins.includes('null') || process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n        return callback(null, true);\n      }\n      var msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(msg), false);\n    }\n    if (allowedOrigins.indexOf(_origin) === -1) {\n      var _msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(_msg), false);\n    }\n    return callback(null, true);\n  },\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  // Allow cookies to be sent\n  optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\napp.use(cors(corsOptions));\n\n// Use process.env.PORT for production, fallback to 3000 for local development\nvar PORT = process.env.PORT || 3000;\n\n// Define a webhook secret for Stripe. This should also be an environment variable.\nvar STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\n\n// --- Rate Limiting Configuration ---\nvar authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 10,\n  // Max 10 requests per 15 minutes per IP\n  message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\n  standardHeaders: true,\n  // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false // Disable the `X-RateLimit-*` headers\n});\n\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\n// This route needs the raw body for signature verification.\napp.post('/api/stripe-webhook', express.raw({\n  type: 'application/json'\n}), /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req, res) {\n    var sig, event, session, userId, planId, subscriptionUpdated, subscriptionDeleted, invoiceSucceeded, invoiceFailed, _t, _t2;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          sig = req.headers['stripe-signature'];\n          _context.p = 1;\n          event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n          _context.n = 3;\n          break;\n        case 2:\n          _context.p = 2;\n          _t = _context.v;\n          console.error(\"Webhook Error: \".concat(_t.message));\n          return _context.a(2, res.status(400).send(\"Webhook Error: \".concat(_t.message)));\n        case 3:\n          _t2 = event.type;\n          _context.n = _t2 === 'checkout.session.completed' ? 4 : _t2 === 'customer.subscription.updated' ? 5 : _t2 === 'customer.subscription.deleted' ? 6 : _t2 === 'invoice.payment_succeeded' ? 7 : _t2 === 'invoice.payment_failed' ? 8 : 9;\n          break;\n        case 4:\n          session = event.data.object;\n          console.log('Checkout Session Completed:', session.id);\n          userId = session.metadata.userId;\n          planId = session.metadata.planId;\n          if (session.payment_status === 'paid' && userId && planId) {\n            db.run('UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?', [session.customer, session.subscription, 'active', planId, userId], function (err) {\n              if (err) console.error('Database update error for checkout.session.completed:', err.message);else console.log(\"User \".concat(userId, \" subscription updated to \").concat(planId, \" (active).\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 5:\n          subscriptionUpdated = event.data.object;\n          console.log('Subscription Updated:', subscriptionUpdated.id);\n          if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?', [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.updated:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionUpdated.customer, \" status updated to \").concat(subscriptionUpdated.status, \" and plan to \").concat(subscriptionUpdated.plan.id, \".\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 6:\n          subscriptionDeleted = event.data.object;\n          console.log('Subscription Deleted:', subscriptionDeleted.id);\n          if (subscriptionDeleted.customer) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?', ['cancelled', 'free', subscriptionDeleted.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.deleted:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionDeleted.customer, \" marked as cancelled and reverted to free.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 7:\n          invoiceSucceeded = event.data.object;\n          console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\n          if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);else console.log(\"Subscription \".concat(invoiceSucceeded.subscription, \" status set to active.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 8:\n          invoiceFailed = event.data.object;\n          console.log('Invoice Payment Failed:', invoiceFailed.id);\n          if (invoiceFailed.subscription && invoiceFailed.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['past_due', invoiceFailed.subscription, invoiceFailed.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_failed:', err.message);else console.log(\"Subscription \".concat(invoiceFailed.subscription, \" status set to past_due.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 9:\n          console.log(\"Unhandled event type \".concat(event.type));\n        case 10:\n          res.status(200).json({\n            received: true\n          });\n        case 11:\n          return _context.a(2);\n      }\n    }, _callee, null, [[1, 2]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\napp.use(express.json());\n\n// --- JWT Secret ---\n// CRUCIAL FOR TESTING: Directly access process.env.JWT_SECRET without fallback.\n// This ensures tests control the secret used by the app instance.\nvar JWT_SECRET = process.env.JWT_SECRET; // Ensure it *must* come from process.env\n\n// --- Request Logging (using Morgan) ---\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\napp.use(morgan('dev'));\n\n// --- Serve Static Files (Frontend) with Caching ---\n// This middleware serves static files from the 'onboardflow' root directory\n// and sets Cache-Control headers for browser caching.\napp.use(express[\"static\"](path.join(__dirname, '..'), {\n  maxAge: '7d',\n  // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\n  immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\n}));\n\n// --- Database Setup ---\nvar db = new sqlite3.Database('./onboardflow.db', function (err) {\n  if (err) {\n    // Log database connection error and exit\n    console.error(\"Error opening database:\", err.message);\n    process.exit(1); // Exit process if database connection fails\n  } else {\n    console.log(\"Successfully connected to the database.\");\n    db.get(\"PRAGMA foreign_keys = ON\");\n    db.serialize(function () {\n      db.run(\"CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Users (\\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER,\\n                location_id INTEGER,\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL UNIQUE,\\n                password_hash TEXT NOT NULL,\\n                position TEXT,\\n                employee_id TEXT,\\n                role TEXT NOT NULL,\\n                stripe_customer_id TEXT,\\n                stripe_subscription_id TEXT,\\n                subscription_status TEXT,\\n                plan_id TEXT,\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Schedules (\\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                employee_id INTEGER NOT NULL,\\n                location_id INTEGER NOT NULL,\\n                start_time TEXT NOT NULL,\\n                end_time TEXT NOT NULL,\\n                notes TEXT,\\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // NEW: Create JobPostings table\n      db.run(\"CREATE TABLE IF NOT EXISTS JobPostings (\\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: link job posting to a specific location\\n                title TEXT NOT NULL,\\n                description TEXT NOT NULL,\\n                requirements TEXT, -- Optional: job requirements\\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\\n                created_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // Update Applicants table schema to link to JobPostings and add phone_number\n      db.run(\"CREATE TABLE IF NOT EXISTS Applicants (\\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL,\\n                phone_number TEXT, -- NEW: Phone number field\\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\\n                notes TEXT,\\n                application_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\\n            )\");\n      // NEW: Create Documents table for file/video uploads\n      db.run(\"CREATE TABLE IF NOT EXISTS Documents (\\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                user_id INTEGER NOT NULL, -- User who uploaded the document\\n                title TEXT NOT NULL,\\n                file_name TEXT NOT NULL,\\n                file_type TEXT NOT NULL,\\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\\n                description TEXT,\\n                upload_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\\n            )\");\n    });\n  }\n});\n\n// --- Authentication Middleware ---\nfunction authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) {\n    return res.status(401).json({\n      error: 'Unauthorized: No token provided.'\n    });\n  }\n  jwt.verify(token, JWT_SECRET, function (err, user) {\n    if (err) {\n      // Log the specific JWT error for debugging\n      console.error(\"JWT Verification Error:\", err.message);\n      return res.status(403).json({\n        error: 'Forbidden: Invalid or expired token.'\n      });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// --- Helper for Input Validation ---\nvar isValidEmail = function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\n\n// Apply rate limiting to authentication routes\napp.post('/api/register', authLimiter, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(req, res, next) {\n    var _req$body, company_name, full_name, email, password, password_hash, _t3;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          // Added 'next'\n          _req$body = req.body, company_name = _req$body.company_name, full_name = _req$body.full_name, email = _req$body.email, password = _req$body.password; // Input Validation for Registration\n          if (!(!company_name || typeof company_name !== 'string' || company_name.trim() === '')) {\n            _context2.n = 1;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Company name is required and must be a non-empty string.\"\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context2.n = 2;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context2.n = 3;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context2.n = 4;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          _context2.p = 4;\n          _context2.n = 5;\n          return bcrypt.hash(password, 10);\n        case 5:\n          password_hash = _context2.v;\n          db.serialize(function () {\n            db.run('BEGIN TRANSACTION');\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function (err) {\n              if (err) {\n                db.run('ROLLBACK');\n                console.error(\"Database error creating company:\", err);\n                return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\n              }\n              var newCompanyId = this.lastID;\n              db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')\", [newCompanyId, null, full_name, email, password_hash], function (userInsertErr) {\n                if (userInsertErr) {\n                  db.run('ROLLBACK');\n                  console.error(\"Database error creating user:\", userInsertErr);\n                  if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                    return res.status(409).json({\n                      error: 'Email already registered.'\n                    });\n                  }\n                  return next(new Error(\"Could not create user.\")); // Pass error\n                }\n                db.run('COMMIT');\n                res.status(201).json({\n                  message: \"Company and user registered successfully!\",\n                  userId: this.lastID\n                });\n              });\n            });\n          });\n          _context2.n = 7;\n          break;\n        case 6:\n          _context2.p = 6;\n          _t3 = _context2.v;\n          console.error(\"Registration error:\", _t3);\n          next(_t3); // Pass error to error handling middleware\n        case 7:\n          return _context2.a(2);\n      }\n    }, _callee2, null, [[4, 6]]);\n  }));\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/login', authLimiter, function (req, res, next) {\n  // Added 'next'\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n\n  // Input Validation for Login\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  if (!password || typeof password !== 'string' || password.length === 0) {\n    return res.status(400).json({\n      error: \"Password is required.\"\n    });\n  }\n  db.get(\"SELECT * FROM Users WHERE email = ?\", [email], /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(err, user) {\n      var isMatch, payload, token;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (!err) {\n              _context3.n = 1;\n              break;\n            }\n            console.error(\"Database error during login:\", err);\n            return _context3.a(2, next(new Error(\"A server error occurred during login.\")));\n          case 1:\n            if (user) {\n              _context3.n = 2;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 2:\n            _context3.n = 3;\n            return bcrypt.compare(password, user.password_hash);\n          case 3:\n            isMatch = _context3.v;\n            if (isMatch) {\n              _context3.n = 4;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 4:\n            payload = {\n              userId: user.user_id,\n              email: user.email,\n              role: user.role,\n              fullName: user.full_name,\n              companyId: user.company_id,\n              locationId: user.location_id,\n              subscriptionStatus: user.subscription_status,\n              planId: user.plan_id\n            };\n            token = jwt.sign(payload, JWT_SECRET, {\n              expiresIn: '1h'\n            });\n            res.status(200).json({\n              message: \"Login successful!\",\n              token: token,\n              role: user.role\n            });\n          case 5:\n            return _context3.a(2);\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});\napp.post('/api/invite-admin', authenticateToken, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(req, res, next) {\n    var _req$body3, full_name, email, password, location_id, _req$user, companyId, role, password_hash, _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          // Added 'next'\n          _req$body3 = req.body, full_name = _req$body3.full_name, email = _req$body3.email, password = _req$body3.password, location_id = _req$body3.location_id;\n          _req$user = req.user, companyId = _req$user.companyId, role = _req$user.role; // Input Validation for Invite Admin\n          if (!(role !== 'super_admin')) {\n            _context4.n = 1;\n            break;\n          }\n          return _context4.a(2, res.status(403).json({\n            error: 'Access Denied: Only super admins can invite other admins.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context4.n = 3;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context4.n = 4;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          if (!(typeof location_id !== 'number' || location_id <= 0)) {\n            _context4.n = 5;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid location ID is required.\"\n          }));\n        case 5:\n          _context4.p = 5;\n          _context4.n = 6;\n          return bcrypt.hash(password, 10);\n        case 6:\n          password_hash = _context4.v;\n          db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n            if (err) {\n              console.error(\"Database error checking location:\", err);\n              return next(new Error('Database error when verifying location.'));\n            } // Pass error\n            if (!location) {\n              return res.status(400).json({\n                error: 'Selected location does not exist or does not belong to your company.'\n              });\n            }\n            db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash], function (userInsertErr) {\n              if (userInsertErr) {\n                console.error(\"Database error inviting admin:\", userInsertErr);\n                if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                  return res.status(409).json({\n                    error: 'Email already registered.'\n                  });\n                }\n                return next(new Error('Failed to invite admin.')); // Pass error\n              }\n              res.status(201).json({\n                message: \"Location admin invited successfully!\",\n                userId: this.lastID\n              });\n            });\n          });\n          _context4.n = 8;\n          break;\n        case 7:\n          _context4.p = 7;\n          _t4 = _context4.v;\n          console.error(\"Invite admin error:\", _t4);\n          next(_t4);\n        case 8:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[5, 7]]);\n  }));\n  return function (_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\n// NEW: API endpoint for inviting employees\napp.post('/api/invite-employee', authenticateToken, /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(req, res, next) {\n    var _req$body4, full_name, email, password, position, employee_id, location_id, _req$user2, companyId, role, currentUserLocationId, isLocationIdValid, password_hash, locationVerification, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _req$body4 = req.body, full_name = _req$body4.full_name, email = _req$body4.email, password = _req$body4.password, position = _req$body4.position, employee_id = _req$body4.employee_id, location_id = _req$body4.location_id;\n          _req$user2 = req.user, companyId = _req$user2.companyId, role = _req$user2.role, currentUserLocationId = _req$user2.locationId; // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\n          if (['super_admin', 'location_admin'].includes(role)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Only admins can invite employees.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context5.n = 2;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context5.n = 3;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context5.n = 4;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          // Corrected location_id validation: Must be a number > 0.\n          // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\n          // For location_admin, it must match their current location.\n          // This revised logic correctly checks for null OR a valid positive integer.\n          isLocationIdValid = location_id === null || typeof location_id === 'number' && !isNaN(location_id) && location_id > 0;\n          if (isLocationIdValid) {\n            _context5.n = 5;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\"\n          }));\n        case 5:\n          if (!(position !== undefined && typeof position !== 'string')) {\n            _context5.n = 6;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Position must be a string if provided.'\n          }));\n        case 6:\n          if (!(employee_id !== undefined && typeof employee_id !== 'string')) {\n            _context5.n = 7;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Employee ID must be a string if provided.'\n          }));\n        case 7:\n          if (!(role === 'location_admin')) {\n            _context5.n = 8;\n            break;\n          }\n          if (!(location_id !== currentUserLocationId)) {\n            _context5.n = 8;\n            break;\n          }\n          if (location_id === null && currentUserLocationId === null) {\n            _context5.n = 8;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Location admin can only invite employees to their assigned location.'\n          }));\n        case 8:\n          _context5.p = 8;\n          _context5.n = 9;\n          return bcrypt.hash(password, 10);\n        case 9:\n          password_hash = _context5.v;\n          if (!(location_id !== null)) {\n            _context5.n = 11;\n            break;\n          }\n          _context5.n = 10;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n              if (err) reject(err);\n              resolve(location);\n            });\n          });\n        case 10:\n          locationVerification = _context5.v;\n          if (locationVerification) {\n            _context5.n = 11;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Selected location does not exist or does not belong to your company.'\n          }));\n        case 11:\n          db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash, position, employee_id],\n          // Default new employees to 'employee' role\n          function (userInsertErr) {\n            if (userInsertErr) {\n              console.error(\"Database error inviting employee:\", userInsertErr);\n              if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                return res.status(409).json({\n                  error: 'Email already registered.'\n                });\n              }\n              return next(new Error('Failed to invite employee.'));\n            }\n            res.status(201).json({\n              message: \"Employee invited successfully!\",\n              userId: this.lastID\n            });\n          });\n          _context5.n = 13;\n          break;\n        case 12:\n          _context5.p = 12;\n          _t5 = _context5.v;\n          console.error(\"Invite employee error:\", _t5);\n          next(_t5);\n        case 13:\n          return _context5.a(2);\n      }\n    }, _callee5, null, [[8, 12]]);\n  }));\n  return function (_x1, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}());\napp.get('/api/profile', authenticateToken, function (req, res) {\n  var _req$user3 = req.user,\n    userId = _req$user3.userId,\n    fullName = _req$user3.fullName,\n    email = _req$user3.email,\n    role = _req$user3.role,\n    companyId = _req$user3.companyId,\n    locationId = _req$user3.locationId,\n    subscriptionStatus = _req$user3.subscriptionStatus,\n    planId = _req$user3.planId;\n  res.status(200).json({\n    userId: userId,\n    fullName: fullName,\n    email: email,\n    role: role,\n    companyId: companyId,\n    locationId: locationId,\n    subscriptionStatus: subscriptionStatus,\n    planId: planId\n  });\n});\napp.put('/api/profile', authenticateToken, /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(req, res, next) {\n    var _req$body5, fullName, email, currentPassword, newPassword, userId;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          // Added 'next'\n          _req$body5 = req.body, fullName = _req$body5.fullName, email = _req$body5.email, currentPassword = _req$body5.currentPassword, newPassword = _req$body5.newPassword;\n          userId = req.user.userId; // Input Validation for Profile Update\n          if (!(fullName === undefined && email === undefined && (!currentPassword || !newPassword))) {\n            _context7.n = 1;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'No data provided for update.'\n          }));\n        case 1:\n          if (!(fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === ''))) {\n            _context7.n = 2;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"Full name must be a non-empty string if provided.\"\n          }));\n        case 2:\n          if (!(email !== undefined && !isValidEmail(email))) {\n            _context7.n = 3;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"A valid email address must be provided if changing email.\"\n          }));\n        case 3:\n          if (!(newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6))) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"New password must be at least 6 characters long if changing password.\"\n          }));\n        case 4:\n          if (!(currentPassword && !newPassword || !currentPassword && newPassword)) {\n            _context7.n = 5;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'Both current password and new password are required to change password.'\n          }));\n        case 5:\n          db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(err, user) {\n              var updateSql, updateParams, clauses, changesMade, existingUser, isMatch, newPasswordHash, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.n) {\n                  case 0:\n                    if (!err) {\n                      _context6.n = 1;\n                      break;\n                    }\n                    console.error(\"Database error fetching user for profile update:\", err);\n                    return _context6.a(2, next(new Error(\"Server error during profile update.\")));\n                  case 1:\n                    if (user) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    return _context6.a(2, res.status(404).json({\n                      error: \"User not found.\"\n                    }));\n                  case 2:\n                    updateSql = 'UPDATE Users SET ';\n                    updateParams = [];\n                    clauses = [];\n                    changesMade = false;\n                    if (fullName !== undefined && fullName !== user.full_name) {\n                      clauses.push('full_name = ?');\n                      updateParams.push(fullName);\n                      changesMade = true;\n                    }\n                    if (!(email !== undefined && email !== user.email)) {\n                      _context6.n = 8;\n                      break;\n                    }\n                    _context6.p = 3;\n                    _context6.n = 4;\n                    return new Promise(function (resolve, reject) {\n                      db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], function (err, row) {\n                        if (err) reject(err);\n                        resolve(row);\n                      });\n                    });\n                  case 4:\n                    existingUser = _context6.v;\n                    if (!existingUser) {\n                      _context6.n = 5;\n                      break;\n                    }\n                    return _context6.a(2, res.status(409).json({\n                      error: 'Email already in use by another account.'\n                    }));\n                  case 5:\n                    _context6.n = 7;\n                    break;\n                  case 6:\n                    _context6.p = 6;\n                    _t6 = _context6.v;\n                    console.error(\"Database error checking existing email:\", _t6);\n                    return _context6.a(2, next(new Error(\"Server error verifying email availability.\")));\n                  case 7:\n                    clauses.push('email = ?');\n                    updateParams.push(email);\n                    changesMade = true;\n                  case 8:\n                    if (!(currentPassword && newPassword)) {\n                      _context6.n = 12;\n                      break;\n                    }\n                    _context6.n = 9;\n                    return bcrypt.compare(currentPassword, user.password_hash);\n                  case 9:\n                    isMatch = _context6.v;\n                    if (isMatch) {\n                      _context6.n = 10;\n                      break;\n                    }\n                    return _context6.a(2, res.status(401).json({\n                      error: \"Current password incorrect.\"\n                    }));\n                  case 10:\n                    _context6.n = 11;\n                    return bcrypt.hash(newPassword, 10);\n                  case 11:\n                    newPasswordHash = _context6.v;\n                    clauses.push('password_hash = ?');\n                    updateParams.push(newPasswordHash);\n                    changesMade = true;\n                  case 12:\n                    if (changesMade) {\n                      _context6.n = 13;\n                      break;\n                    }\n                    return _context6.a(2, res.status(200).json({\n                      message: 'No changes detected. Profile remains the same.'\n                    }));\n                  case 13:\n                    updateSql += clauses.join(', ') + ' WHERE user_id = ?';\n                    updateParams.push(userId);\n                    db.run(updateSql, updateParams, function (updateErr) {\n                      if (updateErr) {\n                        console.error(\"Database error updating profile:\", updateErr);\n                        return next(new Error('Failed to update profile.'));\n                      } // Pass error\n                      if (this.changes > 0) {\n                        db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], function (fetchErr, updatedUser) {\n                          if (fetchErr || !updatedUser) {\n                            console.error(\"Error fetching updated user for new token:\", fetchErr);\n                            return res.status(200).json({\n                              message: 'Profile updated successfully, but token could not be refreshed.'\n                            });\n                          }\n                          var newPayload = {\n                            userId: updatedUser.user_id,\n                            email: updatedUser.email,\n                            role: updatedUser.role,\n                            fullName: updatedUser.full_name,\n                            companyId: updatedUser.company_id,\n                            locationId: updatedUser.location_id,\n                            subscriptionStatus: updatedUser.subscription_status,\n                            planId: user.plan_id\n                          };\n                          var newToken = jwt.sign(newPayload, JWT_SECRET, {\n                            expiresIn: '1h'\n                          });\n                          res.status(200).json({\n                            message: 'Profile updated successfully!',\n                            token: newToken\n                          });\n                        });\n                      } else {\n                        res.status(200).json({\n                          message: 'No changes applied as data was identical.'\n                        });\n                      }\n                    });\n                  case 14:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[3, 6]]);\n            }));\n            return function (_x15, _x16) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 6:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}());\napp.get('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user4 = req.user,\n    companyId = _req$user4.companyId,\n    role = _req$user4.role;\n  var sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\n  var params = [companyId];\n\n  // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\n  if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view locations.'\n    });\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching locations:\", err);\n      return next(new Error('Database error fetching locations.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp.post('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body6 = req.body,\n    location_name = _req$body6.location_name,\n    location_address = _req$body6.location_address;\n  var _req$user5 = req.user,\n    companyId = _req$user5.companyId,\n    role = _req$user5.role;\n\n  // Input Validation for Create Location\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can create locations.'\n    });\n  }\n  if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Location name is required and must be a non-empty string.\"\n    });\n  }\n  if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\n    return res.status(400).json({\n      error: \"Location address is required and must be a non-empty string.\"\n    });\n  }\n  db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function (err) {\n    if (err) {\n      console.error(\"Database error creating location:\", err);\n      return next(new Error('Failed to create location.'));\n    } // Pass error\n    res.status(201).json({\n      message: 'Location created!',\n      locationId: this.lastID\n    });\n  });\n});\napp[\"delete\"]('/api/locations/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user6 = req.user,\n    companyId = _req$user6.companyId,\n    role = _req$user6.role;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete locations.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID provided.'\n    });\n  }\n  db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting location:\", err);\n      return next(new Error('Failed to delete location.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Location not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.get('/api/users', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user7 = req.user,\n    companyId = _req$user7.companyId,\n    role = _req$user7.role,\n    currentUserId = _req$user7.userId,\n    currentUserLocationId = _req$user7.locationId;\n  var _req$query = req.query,\n    filterRole = _req$query.filterRole,\n    filterLocationId = _req$query.filterLocationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view users.'\n    });\n  }\n\n  // Input validation for filterRole and filterLocationId\n  var allowedRoles = ['super_admin', 'location_admin', 'employee'];\n  if (filterRole && (!allowedRoles.includes(filterRole) || role === 'location_admin' && filterRole === 'super_admin')) {\n    return res.status(400).json({\n      error: 'Invalid filter role provided or insufficient permissions to filter by this role.'\n    });\n  }\n  if (filterLocationId && isNaN(parseInt(filterLocationId))) {\n    return res.status(400).json({\n      error: 'Invalid filter location ID provided.'\n    });\n  }\n  if (filterRole) {\n    if (role === 'super_admin' || role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin') || role === 'employee' && filterRole === 'employee') {\n      sql += \" AND Users.role = ?\";\n      params.push(filterRole);\n    } else {\n      // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by role.'\n      });\n    }\n  }\n  if (filterLocationId) {\n    // Ensure location_admin can only filter by their own location\n    if (role === 'super_admin' || role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId) {\n      sql += \" AND Users.location_id = ?\";\n      params.push(filterLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by location.'\n      });\n    }\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching users:\", err);\n      return next(new Error('Database error fetching users.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/users/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user8 = req.user,\n    companyId = _req$user8.companyId,\n    role = _req$user8.role,\n    authenticatedUserId = _req$user8.userId;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete users.'\n    });\n  }\n  if (parseInt(id) === authenticatedUserId) {\n    return res.status(403).json({\n      error: 'Cannot delete your own super admin account via this interface.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid user ID provided.'\n    });\n  }\n  db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting user:\", err);\n      return next(new Error('Failed to delete user.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'User not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.post('/api/create-checkout-session', authenticateToken, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(req, res, next) {\n    var planId, _req$user9, userId, email, companyId, allowedPlanIds, priceIdMap, stripePriceId, customerId, userRecord, customer, session, _t7;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          // Added 'next'\n          planId = req.body.planId;\n          _req$user9 = req.user, userId = _req$user9.userId, email = _req$user9.email, companyId = _req$user9.companyId; // Input Validation for planId\n          allowedPlanIds = ['pro', 'enterprise'];\n          if (!(!planId || !allowedPlanIds.includes(planId))) {\n            _context8.n = 1;\n            break;\n          }\n          return _context8.a(2, res.status(400).json({\n            error: 'Invalid plan ID provided.'\n          }));\n        case 1:\n          priceIdMap = {\n            'pro': process.env.STRIPE_PRICE_ID_PRO,\n            // Use environment variable\n            'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\n          };\n          stripePriceId = priceIdMap[planId];\n          if (stripePriceId) {\n            _context8.n = 2;\n            break;\n          }\n          return _context8.a(2, res.status(500).json({\n            error: 'Stripe price ID not configured for this plan.'\n          }));\n        case 2:\n          _context8.p = 2;\n          _context8.n = 3;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], function (err, row) {\n              if (err) reject(err);\n              resolve(row);\n            });\n          });\n        case 3:\n          userRecord = _context8.v;\n          if (!(userRecord && userRecord.stripe_customer_id)) {\n            _context8.n = 4;\n            break;\n          }\n          customerId = userRecord.stripe_customer_id;\n          _context8.n = 6;\n          break;\n        case 4:\n          _context8.n = 5;\n          return stripeInstance.customers.create({\n            email: email,\n            metadata: {\n              userId: userId,\n              companyId: companyId\n            }\n          });\n        case 5:\n          customer = _context8.v;\n          customerId = customer.id;\n          db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], function (err) {\n            if (err) console.error('Failed to save Stripe customer ID to DB:', err);\n          });\n        case 6:\n          _context8.n = 7;\n          return stripeInstance.checkout.sessions.create({\n            customer: customerId,\n            mode: 'subscription',\n            line_items: [{\n              price: stripePriceId,\n              quantity: 1\n            }],\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\n            success_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}\"),\n            cancel_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/pricing.html?payment=cancelled\"),\n            metadata: {\n              userId: userId,\n              planId: planId\n            }\n          });\n        case 7:\n          session = _context8.v;\n          res.status(200).json({\n            url: session.url\n          });\n          _context8.n = 9;\n          break;\n        case 8:\n          _context8.p = 8;\n          _t7 = _context8.v;\n          console.error('Error creating Stripe Checkout Session:', _t7);\n          next(_t7);\n        case 9:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[2, 8]]);\n  }));\n  return function (_x17, _x18, _x19) {\n    return _ref8.apply(this, arguments);\n  };\n}());\napp.post('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body7 = req.body,\n    employee_id = _req$body7.employee_id,\n    location_id = _req$body7.location_id,\n    start_time = _req$body7.start_time,\n    end_time = _req$body7.end_time,\n    notes = _req$body7.notes;\n  var _req$user0 = req.user,\n    companyId = _req$user0.companyId,\n    role = _req$user0.role,\n    currentUserId = _req$user0.userId;\n\n  // Input Validation for Create Schedule\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create schedules.'\n    });\n  }\n  if (typeof employee_id !== 'number' || employee_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid employee ID is required.'\n    });\n  }\n  if (typeof location_id !== 'number' || location_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid location ID is required.'\n    });\n  }\n  if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\n    return res.status(400).json({\n      error: 'Valid start and end times are required.'\n    });\n  }\n  if (new Date(start_time) >= new Date(end_time)) {\n    return res.status(400).json({\n      error: 'Start time must be before end time.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], function (err, employee) {\n    if (err) {\n      console.error(\"Database error verifying employee:\", err);\n      return next(new Error('Database error during employee verification.'));\n    } // Pass error\n    if (!employee) {\n      return res.status(400).json({\n        error: 'Employee not found in your company.'\n      });\n    }\n    db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n      if (err) {\n        console.error(\"Database error verifying location:\", err);\n        return next(new Error('Database error during location verification.'));\n      } // Pass error\n      if (!location) {\n        return res.status(400).json({\n          error: 'Location not found in your company.'\n        });\n      }\n      db.run('INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes], function (insertErr) {\n        if (insertErr) {\n          console.error(\"Database error creating schedule:\", insertErr);\n          return next(new Error('Failed to create schedule.'));\n        } // Pass error\n        res.status(201).json({\n          message: 'Schedule created successfully!',\n          scheduleId: this.lastID\n        });\n      });\n    });\n  });\n});\napp.get('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query2 = req.query,\n    employee_id = _req$query2.employee_id,\n    location_id = _req$query2.location_id,\n    start_date = _req$query2.start_date,\n    end_date = _req$query2.end_date;\n  var _req$user1 = req.user,\n    companyId = _req$user1.companyId,\n    role = _req$user1.role,\n    currentUserId = _req$user1.userId,\n    currentUserLocationId = _req$user1.locationId;\n  var sql = \"SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\\n               FROM Schedules\\n               JOIN Users ON Schedules.employee_id = Users.user_id\\n               JOIN Locations ON Schedules.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND Schedules.location_id = ?\";\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  }\n\n  // Input validation for query parameters\n  if (employee_id && isNaN(parseInt(employee_id))) {\n    return res.status(400).json({\n      error: 'Invalid employee ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (start_date && isNaN(new Date(start_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid start date filter provided.'\n    });\n  }\n  if (end_date && isNaN(new Date(end_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid end date filter provided.'\n    });\n  }\n  if (employee_id && (role === 'super_admin' || role === 'location_admin' && parseInt(employee_id) === currentUserId || role === 'employee' && parseInt(employee_id) === currentUserId)) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole); // This should be employee_id, not filterRole\n  }\n  if (location_id && (role === 'super_admin' || role === 'location_admin' && parseInt(location_id) === currentUserLocationId)) {\n    sql += \" AND Schedules.location_id = ?\";\n    params.push(location_id);\n  }\n  if (start_date) {\n    sql += \" AND Schedules.start_time >= ?\";\n    params.push(start_date);\n  }\n  if (end_date) {\n    sql += \" AND Schedules.end_time <= ?\";\n    params.push(end_date);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching schedules:\", err);\n      return next(new Error('Database error fetching schedules.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/schedules/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user10 = req.user,\n    companyId = _req$user10.companyId,\n    role = _req$user10.role,\n    currentUserId = _req$user10.userId,\n    currentUserLocationId = _req$user10.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid schedule ID provided.'\n    });\n  }\n  if (role === 'employee') {\n    return res.status(403).json({\n      error: 'Access Denied: Employees cannot delete schedules.'\n    });\n  }\n  var sql = \"DELETE FROM Schedules WHERE schedule_id = ?\";\n  var params = [id];\n  if (role === 'location_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)\";\n    params.push(currentUserLocationId, companyId);\n  } else if (role === 'super_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)\";\n    params.push(companyId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting schedule:\", err);\n      return next(new Error('Failed to delete schedule.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Schedule not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Hiring Routes ---\n\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\napp.post('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body8 = req.body,\n    title = _req$body8.title,\n    description = _req$body8.description,\n    requirements = _req$body8.requirements,\n    location_id = _req$body8.location_id;\n  var _req$user11 = req.user,\n    companyId = _req$user11.companyId,\n    role = _req$user11.role,\n    currentUserLocationId = _req$user11.locationId;\n  var created_date = new Date().toISOString(); // Current date/time for creation\n\n  // Input Validation for Create Job Posting\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create job postings.'\n    });\n  }\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: \"Job title is required and must be a non-empty string.\"\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\napp.get('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query3 = req.query,\n    status = _req$query3.status,\n    location_id = _req$query3.location_id;\n  var _req$user12 = req.user,\n    companyId = _req$user12.companyId,\n    role = _req$user12.role,\n    currentUserLocationId = _req$user12.locationId;\n  var sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\n  var params = [companyId];\n\n  // Authorization: super_admin sees all, location_admin sees their location's postings\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    // Employees generally shouldn't see job postings list via this admin API\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view job postings.'\n    });\n  }\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid job posting status filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += ' AND status = ?';\n    params.push(status);\n  }\n  // Only super admin can filter by any location_id beyond their own scope\n  if (location_id && role === 'super_admin') {\n    sql += \" AND location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching job postings:\", err);\n      return next(new Error('Database error fetching job postings.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp.put('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body9 = req.body,\n    title = _req$body9.title,\n    description = _req$body9.description,\n    requirements = _req$body9.requirements,\n    status = _req$body9.status,\n    location_id = _req$body9.location_id;\n  var _req$user13 = req.user,\n    companyId = _req$user13.companyId,\n    role = _req$user13.role,\n    currentUserLocationId = _req$user13.locationId;\n\n  // Input Validation for Job Posting Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update job postings.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\n    return res.status(400).json({\n      error: 'Job title must be a non-empty string if provided.'\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  var allowedStatuses = ['Open', 'Closed', 'Filled'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE JobPostings SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (title !== undefined) {\n    clauses.push('title = ?');\n    updateParams.push(title);\n  }\n  // Line 1009 fix: Ensure this line and surrounding logic is correct.\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  } else if (description !== undefined) {\n    clauses.push('description = ?');\n    updateParams.push(description);\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  } else if (requirements !== undefined) {\n    clauses.push('requirements = ?');\n    updateParams.push(requirements);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp[\"delete\"]('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user14 = req.user,\n    companyId = _req$user14.companyId,\n    role = _req$user14.role,\n    currentUserLocationId = _req$user14.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete job postings.'\n    });\n  }\n  var sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete their own location's postings\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting job posting:\", err);\n      return next(new Error('Failed to delete job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Update Applicant API endpoints to use job_posting_id\napp.post('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body0 = req.body,\n    job_posting_id = _req$body0.job_posting_id,\n    full_name = _req$body0.full_name,\n    email = _req$body0.email,\n    notes = _req$body0.notes,\n    location_id = _req$body0.location_id,\n    phone_number = _req$body0.phone_number; // Added phone_number\n  var _req$user15 = req.user,\n    companyId = _req$user15.companyId,\n    role = _req$user15.role,\n    currentUserLocationId = _req$user15.locationId;\n  var application_date = new Date().toISOString(); // Current date/time for application\n\n  // Input Validation for Adding Applicant\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can add applicants.'\n    });\n  }\n  if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid job posting ID is required.'\n    });\n  }\n  if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Full name is required and must be a non-empty string.\"\n    });\n  }\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\n  if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\n    return res.status(400).json({\n      error: \"Phone number is required.\"\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // Verify job_posting_id belongs to the company, and for location_admin, to their location\n  db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, jobPosting) {\n    if (err) {\n      console.error(\"Database error verifying job posting:\", err);\n      return next(new Error('Database error when verifying job posting.'));\n    } // Pass error\n    if (!jobPosting) {\n      return res.status(400).json({\n        error: 'Job Posting not found or does not belong to your company.'\n      });\n    }\n\n    // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\n    if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.'\n      });\n    }\n    db.run('INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date],\n    // Use location_id from payload or job posting\n    function (insertErr) {\n      if (insertErr) {\n        console.error(\"Database error creating applicant:\", insertErr);\n        return next(new Error('Failed to create applicant.'));\n      } // Pass error\n      res.status(201).json({\n        message: 'Applicant added successfully!',\n        applicantId: this.lastID\n      });\n    });\n  });\n});\napp.get('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query4 = req.query,\n    job_posting_id = _req$query4.job_posting_id,\n    status = _req$query4.status,\n    location_id = _req$query4.location_id; // Added job_posting_id, status, location_id filters\n  var _req$user16 = req.user,\n    companyId = _req$user16.companyId,\n    role = _req$user16.role,\n    currentUserId = _req$user16.userId,\n    currentUserLocationId = _req$user16.locationId;\n  var sql = \"SELECT Applicants.*, JobPostings.title AS job_title_name\\n               FROM Applicants\\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\\n               WHERE Applicants.company_id = ?\";\n  var params = [companyId];\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid applicant status filter provided.'\n    });\n  }\n  if (job_posting_id && isNaN(parseInt(job_posting_id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += \" AND Applicants.status = ?\";\n    params.push(status);\n  }\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)\"; // Location admin sees applicants for their location or unassigned\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Applicants.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view applicants.'\n    });\n  }\n\n  // Apply job_posting_id filter if provided\n  if (job_posting_id) {\n    sql += \" AND Applicants.job_posting_id = ?\";\n    params.push(job_posting_id);\n  }\n  // Apply location filter from query params for super_admin\n  if (location_id && role === 'super_admin') {\n    sql += \" AND Applicants.location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching applicants:\", err);\n      return next(new Error('Database error fetching applicants.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\napp.put('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body1 = req.body,\n    full_name = _req$body1.full_name,\n    email = _req$body1.email,\n    status = _req$body1.status,\n    resume_url = _req$body1.resume_url,\n    notes = _req$body1.notes,\n    location_id = _req$body1.location_id,\n    job_posting_id = _req$body1.job_posting_id,\n    phone_number = _req$body1.phone_number;\n  var _req$user17 = req.user,\n    companyId = _req$user17.companyId,\n    role = _req$user17.role,\n    currentUserLocationId = _req$user17.locationId;\n\n  // Input Validation for Applicant Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update applicant records.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\n    return res.status(400).json({\n      error: \"Full name must be a non-empty string if provided.\"\n    });\n  }\n  if (email !== undefined && !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address must be provided if changing email.\"\n    });\n  }\n  if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\n    return res.status(400).json({\n      error: \"Phone number must be a non-empty string if provided.\"\n    });\n  }\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (resume_url !== undefined && typeof resume_url !== 'string') {\n    // Assuming resume_url is a string URL\n    return res.status(400).json({\n      error: 'Resume URL must be a string if provided.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\n    return res.status(400).json({\n      error: 'Job posting ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE Applicants SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (full_name !== undefined) {\n    clauses.push('full_name = ?');\n    updateParams.push(full_name);\n  }\n  if (email !== undefined) {\n    clauses.push('email = ?');\n    updateParams.push(email);\n  }\n  if (phone_number !== undefined) {\n    clauses.push('phone_number = ?');\n    updateParams.push(phone_number);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n  if (resume_url !== undefined) {\n    clauses.push('resume_url = ?');\n    updateParams.push(resume_url);\n  }\n  if (notes !== undefined) {\n    clauses.push('notes = ?');\n    updateParams.push(notes);\n  }\n\n  // Admins can update location_id or job_posting_id, with restrictions for location_admin\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot assign applicants to another location.'\n        });\n      }\n      // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (job_posting_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    } else if (role === 'location_admin') {\n      // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\n      db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, job) {\n        if (err) {\n          console.error(\"DB error verifying job posting for update:\", err);\n          return next(new Error('Database error verifying job posting.'));\n        } // Pass error\n        if (!job) {\n          return res.status(400).json({\n            error: 'Job Posting not found or does not belong to your company.'\n          });\n        }\n        if (job.location_id !== null && job.location_id !== currentUserLocationId) {\n          return res.status(403).json({\n            error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.'\n          });\n        }\n      });\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // For location_admin, ensure they can only update applicants within their assigned location\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating applicant:\", err);\n      return next(new Error('Failed to update applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Applicant updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\napp[\"delete\"]('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user18 = req.user,\n    companyId = _req$user18.companyId,\n    role = _req$user18.role,\n    currentUserLocationId = _req$user18.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete applicants.'\n    });\n  }\n  var sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete applicants in their own location\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting applicant:\", err);\n      return next(new Error('Failed to delete applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Document Management Routes ---\n\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\napp.post('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body10 = req.body,\n    title = _req$body10.title,\n    file_name = _req$body10.file_name,\n    file_type = _req$body10.file_type,\n    file_url = _req$body10.file_url,\n    description = _req$body10.description;\n  var _req$user19 = req.user,\n    companyId = _req$user19.companyId,\n    userId = _req$user19.userId;\n  var upload_date = new Date().toISOString();\n\n  // Input Validation for Document Upload\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: 'Document title is required and must be a non-empty string.'\n    });\n  }\n  if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\n    return res.status(400).json({\n      error: 'File name is required and must be a non-empty string.'\n    });\n  }\n  if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\n    return res.status(400).json({\n      error: 'File type is required and must be a non-empty string.'\n    });\n  }\n  // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\n  var urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\n  if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\n    return res.status(400).json({\n      error: 'A valid file URL (starting with http or https) is required.'\n    });\n  }\n  if (description !== undefined && typeof description !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.run('INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, userId, title, file_name, file_type, file_url, description, upload_date], function (err) {\n    if (err) {\n      console.error(\"Database error uploading document:\", err);\n      return next(new Error('Failed to upload document metadata.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Document metadata saved successfully!',\n      documentId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\napp.get('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user20 = req.user,\n    companyId = _req$user20.companyId,\n    userId = _req$user20.userId,\n    role = _req$user20.role;\n  var sql = 'SELECT * FROM Documents WHERE company_id = ?';\n  var params = [companyId];\n\n  // Non-super-admins only see their own documents\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching documents:\", err);\n      return next(new Error('Database error fetching documents.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\napp[\"delete\"]('/api/documents/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user21 = req.user,\n    companyId = _req$user21.companyId,\n    userId = _req$user21.userId,\n    role = _req$user21.role;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid document ID provided.'\n    });\n  }\n  var sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Only super_admin or the original uploader can delete\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting document:\", err);\n      return next(new Error('Failed to delete document.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Document not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\n// This should always be the LAST route in your Express app\napp.get(/'*'/, function (req, res) {\n  // Correctly serve the index.html from the parent directory\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// --- Global Error Handling Middleware ---\n// This should be the very last middleware in your Express app\napp.use(function (err, req, res, next) {\n  console.error(\"Unhandled Error: \".concat(err.stack)); // Log the full stack trace for debugging\n  // Respond with a generic error message for the client\n  res.status(500).json({\n    error: 'An unexpected server error occurred. Please try again later.'\n    // In development, you might send more details:\n    // message: err.message,\n    // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// --- Server Start ---\n// This conditional export allows the app to be imported for testing\n// without starting the server listener when the test runner requires it.\nif (require.main === module) {\n  // Only listen if this file is run directly (not required as a module)\n  app.listen(PORT, function () {\n    console.log(\"Server is running successfully on http://localhost:\".concat(PORT));\n  });\n} else {\n  // Export the app for testing purposes\n  module.exports = app;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","express","require","sqlite3","verbose","bcrypt","jwt","cors","path","csv","_require","Readable","rateLimit","morgan","process","env","NODE_ENV","main","module","config","stripeInstance","STRIPE_SECRET_KEY","app","allowedOrigins","CORS_ORIGIN","split","push","corsOptions","origin","callback","includes","msg","Error","indexOf","methods","credentials","optionsSuccessStatus","use","PORT","STRIPE_WEBHOOK_SECRET","authLimiter","windowMs","max","message","standardHeaders","legacyHeaders","post","raw","type","_ref","_callee","req","res","sig","event","session","userId","planId","subscriptionUpdated","subscriptionDeleted","invoiceSucceeded","invoiceFailed","_t","_t2","_context","headers","webhooks","constructEvent","body","console","error","concat","status","send","data","object","log","id","metadata","payment_status","db","run","customer","subscription","err","plan","json","received","_x","_x2","JWT_SECRET","join","__dirname","maxAge","immutable","Database","exit","get","serialize","authenticateToken","next","authHeader","token","verify","user","isValidEmail","email","test","_ref2","_callee2","_req$body","company_name","full_name","password","password_hash","_t3","_context2","trim","hash","newCompanyId","lastID","userInsertErr","_x3","_x4","_x5","_req$body2","_ref3","_callee3","isMatch","payload","_context3","compare","user_id","role","fullName","companyId","company_id","locationId","location_id","subscriptionStatus","subscription_status","plan_id","sign","expiresIn","_x6","_x7","_ref4","_callee4","_req$body3","_req$user","_t4","_context4","location","_x8","_x9","_x0","_ref5","_callee5","_req$body4","position","employee_id","_req$user2","currentUserLocationId","isLocationIdValid","locationVerification","_t5","_context5","isNaN","undefined","reject","_x1","_x10","_x11","_req$user3","put","_ref6","_callee7","_req$body5","currentPassword","newPassword","_context7","_ref7","_callee6","updateSql","updateParams","clauses","changesMade","existingUser","newPasswordHash","_t6","_context6","row","updateErr","changes","fetchErr","updatedUser","newPayload","newToken","_x15","_x16","_x12","_x13","_x14","_req$user4","sql","params","all","rows","_req$body6","location_name","location_address","_req$user5","_req$user6","parseInt","_req$user7","currentUserId","_req$query","query","filterRole","filterLocationId","allowedRoles","_req$user8","authenticatedUserId","_ref8","_callee8","_req$user9","allowedPlanIds","priceIdMap","stripePriceId","customerId","userRecord","_t7","_context8","STRIPE_PRICE_ID_PRO","STRIPE_PRICE_ID_ENT","stripe_customer_id","customers","checkout","sessions","mode","line_items","price","quantity","success_url","FRONTEND_URL","cancel_url","url","_x17","_x18","_x19","_req$body7","start_time","end_time","notes","_req$user0","Date","getTime","employee","insertErr","scheduleId","_req$query2","start_date","end_date","_req$user1","_req$user10","_req$body8","title","description","requirements","_req$user11","created_date","toISOString","_req$query3","_req$user12","allowedStatuses","_req$body9","_req$user13","_req$user14","_req$body0","job_posting_id","phone_number","_req$user15","application_date","jobPosting","applicantId","_req$query4","_req$user16","_req$body1","resume_url","_req$user17","job","_req$user18","_req$body10","file_name","file_type","file_url","_req$user19","upload_date","urlRegex","documentId","_req$user20","_req$user21","sendFile","stack","listen","exports"],"sourceRoot":"C:\\Users\\xarcy\\OneDrive\\Desktop\\onboardflow\\backend\\test\\","sources":["server.test.cjs"],"sourcesContent":["// --- Imports ---\r\nconst express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors'); // Import cors\r\nconst path = require('path');\r\nconst csv = require('csv-parser'); // For CSV parsing\r\nconst { Readable } = require('stream'); // For creating a readable stream from a string\r\nconst rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\r\nconst morgan = require('morgan'); // Import morgan for request logging\r\n\r\n// Load environment variables from .env file in development\r\n// IMPORTANT: Only load .env if server.js is run directly, NOT when required by tests.\r\nif (process.env.NODE_ENV !== 'production' && require.main === module) {\r\n    require('dotenv').config();\r\n}\r\n\r\n// Import the Stripe library and initialize it with your secret key\r\n// Use process.env.STRIPE_SECRET_KEY for production\r\nconst stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\r\n\r\n// --- App Initialization ---\r\nconst app = express();\r\n\r\n// Configure CORS for production environment\r\nconst allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\r\n\r\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\r\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\r\n    allowedOrigins.push('null');\r\n}\r\n\r\nconst corsOptions = {\r\n    origin: function (origin, callback) {\r\n        // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\r\n        if (!origin) {\r\n            // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\r\n            if (allowedOrigins.includes('null') || (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN)) {\r\n                return callback(null, true);\r\n            }\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n\r\n        if (allowedOrigins.indexOf(origin) === -1) {\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n        return callback(null, true);\r\n    },\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Allow cookies to be sent\r\n    optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n\r\n// Use process.env.PORT for production, fallback to 3000 for local development\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Define a webhook secret for Stripe. This should also be an environment variable.\r\nconst STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\r\n\r\n// --- Rate Limiting Configuration ---\r\nconst authLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 10, // Max 10 requests per 15 minutes per IP\r\n    message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) --\r\n// This route needs the raw body for signature verification.\r\napp.post('/api/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {\r\n    const sig = req.headers['stripe-signature'];\r\n\r\n    let event;\r\n\r\n    try {\r\n        event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n    } catch (err) {\r\n        console.error(`Webhook Error: ${err.message}`);\r\n        return res.status(400).send(`Webhook Error: ${err.message}`);\r\n    }\r\n\r\n    // Handle the event\r\n    switch (event.type) {\r\n        case 'checkout.session.completed':\r\n            const session = event.data.object;\r\n            console.log('Checkout Session Completed:', session.id);\r\n            const userId = session.metadata.userId;\r\n            const planId = session.metadata.planId;\r\n            if (session.payment_status === 'paid' && userId && planId) {\r\n                db.run(\r\n                    'UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?',\r\n                    [session.customer, session.subscription, 'active', planId, userId],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for checkout.session.completed:', err.message);\r\n                        else console.log(`User ${userId} subscription updated to ${planId} (active).`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.updated':\r\n            const subscriptionUpdated = event.data.object;\r\n            console.log('Subscription Updated:', subscriptionUpdated.id);\r\n            if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?',\r\n                    [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.updated:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionUpdated.customer} status updated to ${subscriptionUpdated.status} and plan to ${subscriptionUpdated.plan.id}.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.deleted':\r\n            const subscriptionDeleted = event.data.object;\r\n            console.log('Subscription Deleted:', subscriptionDeleted.id);\r\n            if (subscriptionDeleted.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?',\r\n                    ['cancelled', 'free', subscriptionDeleted.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.deleted:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionDeleted.customer} marked as cancelled and reverted to free.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_succeeded':\r\n            const invoiceSucceeded = event.data.object;\r\n            console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\r\n            if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);\r\n                        else console.log(`Subscription ${invoiceSucceeded.subscription} status set to active.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_failed':\r\n            const invoiceFailed = event.data.object;\r\n            console.log('Invoice Payment Failed:', invoiceFailed.id);\r\n            if (invoiceFailed.subscription && invoiceFailed.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['past_due', invoiceFailed.subscription, invoiceFailed.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_failed:', err.message);\r\n                        else console.log(`Subscription ${invoiceFailed.subscription} status set to past_due.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        default:\r\n            console.log(`Unhandled event type ${event.type}`);\r\n    }\r\n    res.status(200).json({ received: true });\r\n});\r\n\r\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\r\napp.use(express.json());\r\n\r\n// --- JWT Secret ---\r\n// CRUCIAL FOR TESTING: Directly access process.env.JWT_SECRET without fallback.\r\n// This ensures tests control the secret used by the app instance.\r\nconst JWT_SECRET = process.env.JWT_SECRET; // Ensure it *must* come from process.env\r\n\r\n// --- Request Logging (using Morgan) ---\r\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\r\napp.use(morgan('dev'));\r\n\r\n// --- Serve Static Files (Frontend) with Caching ---\r\n// This middleware serves static files from the 'onboardflow' root directory\r\n// and sets Cache-Control headers for browser caching.\r\napp.use(express.static(path.join(__dirname, '..'), {\r\n    maxAge: '7d', // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\r\n    immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\r\n}));\r\n\r\n// --- Database Setup ---\r\nconst db = new sqlite3.Database('./onboardflow.db', (err) => {\r\n    if (err) {\r\n        // Log database connection error and exit\r\n        console.error(\"Error opening database:\", err.message);\r\n        process.exit(1); // Exit process if database connection fails\r\n    } else {\r\n        console.log(\"Successfully connected to the database.\");\r\n        db.get(\"PRAGMA foreign_keys = ON\");\r\n        db.serialize(() => {\r\n            db.run(`CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Users (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER,\r\n                location_id INTEGER,\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL UNIQUE,\r\n                password_hash TEXT NOT NULL,\r\n                position TEXT,\r\n                employee_id TEXT,\r\n                role TEXT NOT NULL,\r\n                stripe_customer_id TEXT,\r\n                stripe_subscription_id TEXT,\r\n                subscription_status TEXT,\r\n                plan_id TEXT,\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Schedules (\r\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                employee_id INTEGER NOT NULL,\r\n                location_id INTEGER NOT NULL,\r\n                start_time TEXT NOT NULL,\r\n                end_time TEXT NOT NULL,\r\n                notes TEXT,\r\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // NEW: Create JobPostings table\r\n            db.run(`CREATE TABLE IF NOT EXISTS JobPostings (\r\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: link job posting to a specific location\r\n                title TEXT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                requirements TEXT, -- Optional: job requirements\r\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\r\n                created_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // Update Applicants table schema to link to JobPostings and add phone_number\r\n            db.run(`CREATE TABLE IF NOT EXISTS Applicants (\r\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\r\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL,\r\n                phone_number TEXT, -- NEW: Phone number field\r\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\r\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\r\n                notes TEXT,\r\n                application_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\r\n            )`);\r\n            // NEW: Create Documents table for file/video uploads\r\n            db.run(`CREATE TABLE IF NOT EXISTS Documents (\r\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL, -- User who uploaded the document\r\n                title TEXT NOT NULL,\r\n                file_name TEXT NOT NULL,\r\n                file_type TEXT NOT NULL,\r\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\r\n                description TEXT,\r\n                upload_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\r\n            )`);\r\n        });\r\n    }\r\n});\r\n\r\n// --- Authentication Middleware ---\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1];\r\n    if (token == null) {\r\n        return res.status(401).json({ error: 'Unauthorized: No token provided.' });\r\n    }\r\n    jwt.verify(token, JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            // Log the specific JWT error for debugging\r\n            console.error(\"JWT Verification Error:\", err.message);\r\n            return res.status(403).json({ error: 'Forbidden: Invalid or expired token.' });\r\n        }\r\n        req.user = user;\r\n        next();\r\n    });\r\n}\r\n\r\n// --- Helper for Input Validation ---\r\nconst isValidEmail = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\r\n\r\n// Apply rate limiting to authentication routes\r\napp.post('/api/register', authLimiter, async (req, res, next) => { // Added 'next'\r\n    const { company_name, full_name, email, password } = req.body;\r\n\r\n    // Input Validation for Registration\r\n    if (!company_name || typeof company_name !== 'string' || company_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Company name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Password is required and must be at least 6 characters long.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.serialize(() => {\r\n            db.run('BEGIN TRANSACTION');\r\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function(err) {\r\n                if (err) { \r\n                    db.run('ROLLBACK'); \r\n                    console.error(\"Database error creating company:\", err);\r\n                    return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\r\n                }\r\n                const newCompanyId = this.lastID;\r\n                db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')`, [newCompanyId, null, full_name, email, password_hash], function(userInsertErr) {\r\n                    if (userInsertErr) { \r\n                        db.run('ROLLBACK'); \r\n                        console.error(\"Database error creating user:\", userInsertErr);\r\n                        if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { \r\n                            return res.status(409).json({ error: 'Email already registered.' }); \r\n                        }\r\n                        return next(new Error(\"Could not create user.\")); // Pass error\r\n                    }\r\n                    db.run('COMMIT');\r\n                    res.status(201).json({ message: \"Company and user registered successfully!\", userId: this.lastID });\r\n                });\r\n            });\r\n        });\r\n    } catch (error) { \r\n        console.error(\"Registration error:\", error);\r\n        next(error); // Pass error to error handling middleware\r\n    }\r\n});\r\n\r\napp.post('/api/login', authLimiter, (req, res, next) => { // Added 'next'\r\n    const { email, password } = req.body;\r\n\r\n    // Input Validation for Login\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length === 0) {\r\n        return res.status(400).json({ error: \"Password is required.\" });\r\n    }\r\n\r\n    db.get(\"SELECT * FROM Users WHERE email = ?\", [email], async (err, user) => {\r\n        if (err) {\r\n            console.error(\"Database error during login:\", err);\r\n            return next(new Error(\"A server error occurred during login.\")); // Pass error\r\n        }\r\n        if (!user) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const isMatch = await bcrypt.compare(password, user.password_hash);\r\n        if (!isMatch) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const payload = { userId: user.user_id, email: user.email, role: user.role, fullName: user.full_name, companyId: user.company_id, locationId: user.location_id, subscriptionStatus: user.subscription_status, planId: user.plan_id };\r\n        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });\r\n        res.status(200).json({ message: \"Login successful!\", token, role: user.role });\r\n    });\r\n});\r\n\r\napp.post('/api/invite-admin', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { full_name, email, password, location_id } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Invite Admin\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can invite other admins.' }); }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) { // Assuming location_id is an integer ID\r\n        return res.status(400).json({ error: \"A valid location ID is required.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error checking location:\", err); return next(new Error('Database error when verifying location.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' }); }\r\n            db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')`, [companyId, location_id, full_name, email, password_hash], function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting admin:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite admin.')); // Pass error\r\n                }\r\n                res.status(201).json({ message: \"Location admin invited successfully!\", userId: this.lastID });\r\n            });\r\n        });\r\n    } catch (error) { console.error(\"Invite admin error:\", error); next(error); } // Pass error\r\n});\r\n\r\n// NEW: API endpoint for inviting employees\r\napp.post('/api/invite-employee', authenticateToken, async (req, res, next) => {\r\n    const { full_name, email, password, position, employee_id, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\r\n    if (!['super_admin', 'location_admin'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can invite employees.' });\r\n    }\r\n\r\n    // Input Validation for Invite Employee\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    \r\n    // Corrected location_id validation: Must be a number > 0.\r\n    // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\r\n    // For location_admin, it must match their current location.\r\n    // This revised logic correctly checks for null OR a valid positive integer.\r\n    const isLocationIdValid = location_id === null || (typeof location_id === 'number' && !isNaN(location_id) && location_id > 0);\r\n    if (!isLocationIdValid) {\r\n        return res.status(400).json({ error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\" });\r\n    }\r\n    \r\n    if (position !== undefined && typeof position !== 'string') {\r\n        return res.status(400).json({ error: 'Position must be a string if provided.' });\r\n    }\r\n    if (employee_id !== undefined && typeof employee_id !== 'string') {\r\n        return res.status(400).json({ error: 'Employee ID must be a string if provided.' });\r\n    }\r\n\r\n    // Location Admin specific check: ensure they are inviting to their assigned location or null\r\n    // If location_admin tries to set a location that is NOT their own, block it.\r\n    // Allow location_admin to set to null if their current location is null.\r\n    if (role === 'location_admin') {\r\n        // A location admin can ONLY assign an employee to their own location or to null (unassigned)\r\n        if (location_id !== currentUserLocationId) {\r\n            // If the target location_id is not the current user's location, check if both are null\r\n            if (!(location_id === null && currentUserLocationId === null)) {\r\n                return res.status(403).json({ error: 'Access Denied: Location admin can only invite employees to their assigned location.' });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n\r\n        // Verify the location_id belongs to the company and, if location_admin, matches their assigned location\r\n        // This check is crucial if location_id is NOT null\r\n        if (location_id !== null) {\r\n            const locationVerification = await new Promise((resolve, reject) => {\r\n                db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n                    if (err) reject(err);\r\n                    resolve(location);\r\n                });\r\n            });\r\n            if (!locationVerification) {\r\n                return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' });\r\n            }\r\n        }\r\n\r\n        db.run(\r\n            `INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')`,\r\n            [companyId, location_id, full_name, email, password_hash, position, employee_id,], // Default new employees to 'employee' role\r\n            function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting employee:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite employee.'));\r\n                }\r\n                res.status(201).json({ message: \"Employee invited successfully!\", userId: this.lastID });\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Invite employee error:\", error);\r\n        next(error);\r\n    }\r\n});\r\n\r\n\r\napp.get('/api/profile', authenticateToken, (req, res) => {\r\n    const { userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId } = req.user;\r\n    res.status(200).json({ userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId });\r\n});\r\n\r\napp.put('/api/profile', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { fullName, email, currentPassword, newPassword } = req.body;\r\n    const { userId } = req.user;\r\n\r\n    // Input Validation for Profile Update\r\n    if (fullName === undefined && email === undefined && (!currentPassword || !newPassword)) {\r\n        return res.status(400).json({ error: 'No data provided for update.' });\r\n    }\r\n    if (fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6)) {\r\n        return res.status(400).json({ error: \"New password must be at least 6 characters long if changing password.\" });\r\n    }\r\n    if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {\r\n        return res.status(400).json({ error: 'Both current password and new password are required to change password.' });\r\n    }\r\n\r\n\r\n    db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], async (err, user) => {\r\n        if (err) { console.error(\"Database error fetching user for profile update:\", err); return next(new Error(\"Server error during profile update.\")); } // Pass error\r\n        if (!user) { return res.status(404).json({ error: \"User not found.\" }); }\r\n        let updateSql = 'UPDATE Users SET ';\r\n        const updateParams = [];\r\n        const clauses = [];\r\n        let changesMade = false;\r\n        if (fullName !== undefined && fullName !== user.full_name) {\r\n            clauses.push('full_name = ?');\r\n            updateParams.push(fullName);\r\n            changesMade = true;\r\n        }\r\n        if (email !== undefined && email !== user.email) {\r\n            try { // Added try-catch for async await in db.get\r\n                const existingUser = await new Promise((resolve, reject) => {\r\n                    db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], (err, row) => {\r\n                        if (err) reject(err);\r\n                        resolve(row);\r\n                    });\r\n                });\r\n                if (existingUser) { return res.status(409).json({ error: 'Email already in use by another account.' }); }\r\n            } catch (dbErr) {\r\n                console.error(\"Database error checking existing email:\", dbErr);\r\n                return next(new Error(\"Server error verifying email availability.\"));\r\n            }\r\n            clauses.push('email = ?');\r\n            updateParams.push(email);\r\n            changesMade = true;\r\n        }\r\n        if (currentPassword && newPassword) {\r\n            const isMatch = await bcrypt.compare(currentPassword, user.password_hash);\r\n            if (!isMatch) { return res.status(401).json({ error: \"Current password incorrect.\" }); }\r\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\r\n            clauses.push('password_hash = ?');\r\n            updateParams.push(newPasswordHash);\r\n            changesMade = true;\r\n        }\r\n        if (!changesMade) { return res.status(200).json({ message: 'No changes detected. Profile remains the same.' }); }\r\n        updateSql += clauses.join(', ') + ' WHERE user_id = ?';\r\n        updateParams.push(userId);\r\n        db.run(updateSql, updateParams, function(updateErr) {\r\n            if (updateErr) { console.error(\"Database error updating profile:\", updateErr); return next(new Error('Failed to update profile.')); } // Pass error\r\n            if (this.changes > 0) {\r\n                db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], (fetchErr, updatedUser) => {\r\n                    if (fetchErr || !updatedUser) { console.error(\"Error fetching updated user for new token:\", fetchErr); return res.status(200).json({ message: 'Profile updated successfully, but token could not be refreshed.' }); }\r\n                    const newPayload = { userId: updatedUser.user_id, email: updatedUser.email, role: updatedUser.role, fullName: updatedUser.full_name, companyId: updatedUser.company_id, locationId: updatedUser.location_id, subscriptionStatus: updatedUser.subscription_status, planId: user.plan_id };\r\n                    const newToken = jwt.sign(newPayload, JWT_SECRET, { expiresIn: '1h' });\r\n                    res.status(200).json({ message: 'Profile updated successfully!', token: newToken });\r\n                });\r\n            } else { res.status(200).json({ message: 'No changes applied as data was identical.' }); }\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role } = req.user;\r\n    let sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\r\n    if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view locations.' });\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching locations:\", err); return next(new Error('Database error fetching locations.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.post('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { location_name, location_address } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Create Location\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can create locations.' }); }\r\n    if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Location name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\r\n        return res.status(400).json({ error: \"Location address is required and must be a non-empty string.\" });\r\n    }\r\n\r\n    db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function(err) {\r\n        if (err) { console.error(\"Database error creating location:\", err); return next(new Error('Failed to create location.')); } // Pass error\r\n        res.status(201).json({ message: 'Location created!', locationId: this.lastID });\r\n    });\r\n});\r\n\r\napp.delete('/api/locations/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete locations.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting location:\", err); return next(new Error('Failed to delete location.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Location not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.get('/api/users', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n    const { filterRole, filterLocationId } = req.query;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view users.' });\r\n    }\r\n\r\n    // Input validation for filterRole and filterLocationId\r\n    const allowedRoles = ['super_admin', 'location_admin', 'employee'];\r\n    if (filterRole && (!allowedRoles.includes(filterRole) || (role === 'location_admin' && filterRole === 'super_admin'))) {\r\n        return res.status(400).json({ error: 'Invalid filter role provided or insufficient permissions to filter by this role.' });\r\n    }\r\n    if (filterLocationId && isNaN(parseInt(filterLocationId))) {\r\n        return res.status(400).json({ error: 'Invalid filter location ID provided.' });\r\n    }\r\n\r\n\r\n    if (filterRole) {\r\n        if (role === 'super_admin' || (role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin')) || (role === 'employee' && filterRole === 'employee')) {\r\n            sql += ` AND Users.role = ?`;\r\n            params.push(filterRole);\r\n        } else {\r\n            // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by role.' });\r\n        }\r\n    }\r\n    if (filterLocationId) {\r\n        // Ensure location_admin can only filter by their own location\r\n        if (role === 'super_admin' || (role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId)) {\r\n            sql += ` AND Users.location_id = ?`;\r\n            params.push(filterLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by location.' });\r\n        }\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching users:\", err); return next(new Error('Database error fetching users.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/users/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: authenticatedUserId } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete users.' }); }\r\n    if (parseInt(id) === authenticatedUserId) { return res.status(403).json({ error: 'Cannot delete your own super admin account via this interface.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid user ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting user:\", err); return next(new Error('Failed to delete user.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'User not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.post('/api/create-checkout-session', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { planId } = req.body;\r\n    const { userId, email, companyId } = req.user;\r\n\r\n    // Input Validation for planId\r\n    const allowedPlanIds = ['pro', 'enterprise'];\r\n    if (!planId || !allowedPlanIds.includes(planId)) {\r\n        return res.status(400).json({ error: 'Invalid plan ID provided.' });\r\n    }\r\n\r\n    const priceIdMap = {\r\n        'pro': process.env.STRIPE_PRICE_ID_PRO,       // Use environment variable\r\n        'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\r\n    };\r\n    const stripePriceId = priceIdMap[planId];\r\n    if (!stripePriceId) { return res.status(500).json({ error: 'Stripe price ID not configured for this plan.' }); } // Changed from 400 to 500 as this is a server-side config issue\r\n    try {\r\n        let customerId;\r\n        const userRecord = await new Promise((resolve, reject) => {\r\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], (err, row) => {\r\n                if (err) reject(err);\r\n                resolve(row);\r\n            });\r\n        });\r\n        if (userRecord && userRecord.stripe_customer_id) {\r\n            customerId = userRecord.stripe_customer_id;\r\n        } else {\r\n            const customer = await stripeInstance.customers.create({ email: email, metadata: { userId: userId, companyId: companyId, }, });\r\n            customerId = customer.id;\r\n            db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], (err) => {\r\n                if (err) console.error('Failed to save Stripe customer ID to DB:', err);\r\n            });\r\n        }\r\n        const session = await stripeInstance.checkout.sessions.create({\r\n            customer: customerId,\r\n            mode: 'subscription',\r\n            line_items: [{ price: stripePriceId, quantity: 1, }, ],\r\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\r\n            success_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}`,\r\n            cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/pricing.html?payment=cancelled`,\r\n            metadata: { userId: userId, planId: planId, },\r\n        });\r\n        res.status(200).json({ url: session.url });\r\n    } catch (error) { console.error('Error creating Stripe Checkout Session:', error); next(error); } // Pass error\r\n});\r\n\r\napp.post('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_time, end_time, notes } = req.body;\r\n    const { companyId, role, userId: currentUserId } = req.user;\r\n\r\n    // Input Validation for Create Schedule\r\n    if (role !== 'super_admin' && role !== 'location_admin') { return res.status(403).json({ error: 'Access Denied: Only admins can create schedules.' }); }\r\n    if (typeof employee_id !== 'number' || employee_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid employee ID is required.' });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid location ID is required.' });\r\n    }\r\n    if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\r\n        return res.status(400).json({ error: 'Valid start and end times are required.' });\r\n    }\r\n    if (new Date(start_time) >= new Date(end_time)) {\r\n        return res.status(400).json({ error: 'Start time must be before end time.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], (err, employee) => {\r\n        if (err) { console.error(\"Database error verifying employee:\", err); return next(new Error('Database error during employee verification.')); } // Pass error\r\n        if (!employee) { return res.status(400).json({ error: 'Employee not found in your company.' }); }\r\n        db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error verifying location:\", err); return next(new Error('Database error during location verification.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Location not found in your company.' }); }\r\n            db.run(\r\n                'INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes],\r\n                function(insertErr) {\r\n                    if (insertErr) { console.error(\"Database error creating schedule:\", insertErr); return next(new Error('Failed to create schedule.')); } // Pass error\r\n                    res.status(201).json({ message: 'Schedule created successfully!', scheduleId: this.lastID });\r\n                }\r\n            );\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_date, end_date } = req.query;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\r\n               FROM Schedules\r\n               JOIN Users ON Schedules.employee_id = Users.user_id\r\n               JOIN Locations ON Schedules.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND Schedules.location_id = ?`;\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    if (employee_id && isNaN(parseInt(employee_id))) {\r\n        return res.status(400).json({ error: 'Invalid employee ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n    if (start_date && isNaN(new Date(start_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid start date filter provided.' });\r\n    }\r\n    if (end_date && isNaN(new Date(end_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid end date filter provided.' });\r\n    }\r\n\r\n\r\n    if (employee_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(employee_id) === currentUserId) || (role === 'employee' && parseInt(employee_id) === currentUserId))) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole); // This should be employee_id, not filterRole\r\n    }\r\n    if (location_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(location_id) === currentUserLocationId))) {\r\n        sql += ` AND Schedules.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n    if (start_date) {\r\n        sql += ` AND Schedules.start_time >= ?`;\r\n        params.push(start_date);\r\n    }\r\n    if (end_date) {\r\n        sql += ` AND Schedules.end_time <= ?`;\r\n        params.push(end_date);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching schedules:\", err); return next(new Error('Database error fetching schedules.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/schedules/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid schedule ID provided.' });\r\n    }\r\n\r\n    if (role === 'employee') {\r\n        return res.status(403).json({ error: 'Access Denied: Employees cannot delete schedules.' });\r\n    }\r\n\r\n    let sql = `DELETE FROM Schedules WHERE schedule_id = ?`;\r\n    const params = [id];\r\n\r\n    if (role === 'location_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)`;\r\n        params.push(currentUserLocationId, companyId);\r\n    } else if (role === 'super_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)`;\r\n        params.push(companyId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting schedule:\", err); return next(new Error('Failed to delete schedule.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Schedule not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Hiring Routes ---\r\n\r\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\r\napp.post('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, description, requirements, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const created_date = new Date().toISOString(); // Current date/time for creation\r\n\r\n    // Input Validation for Create Job Posting\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can create job postings.' });\r\n    }\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: \"Job title is required and must be a non-empty string.\" });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\r\napp.get('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { status, location_id } = req.query;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Authorization: super_admin sees all, location_admin sees their location's postings\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        // Employees generally shouldn't see job postings list via this admin API\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view job postings.' });\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid job posting status filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n\r\n    if (status) {\r\n        sql += ' AND status = ?';\r\n        params.push(status);\r\n    }\r\n    // Only super admin can filter by any location_id beyond their own scope\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching job postings:\", err); return next(new Error('Database error fetching job postings.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.put('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { title, description, requirements, status, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Job Posting Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update job postings.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n    if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\r\n        return res.status(400).json({ error: 'Job title must be a non-empty string if provided.' });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE JobPostings SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (title !== undefined) { clauses.push('title = ?'); updateParams.push(title); }\r\n    // Line 1009 fix: Ensure this line and surrounding logic is correct.\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    } else if (description !== undefined) { \r\n        clauses.push('description = ?'); \r\n        updateParams.push(description); \r\n    }\r\n    \r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    } else if (requirements !== undefined) { \r\n        clauses.push('requirements = ?');\r\n        updateParams.push(requirements);\r\n    }\r\n    \r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.delete('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete job postings.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete their own location's postings\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting job posting:\", err); return next(new Error('Failed to delete job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n\r\n// Update Applicant API endpoints to use job_posting_id\r\napp.post('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, full_name, email, notes, location_id, phone_number } = req.body; // Added phone_number\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const application_date = new Date().toISOString(); // Current date/time for application\r\n\r\n    // Input Validation for Adding Applicant\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can add applicants.' });\r\n    }\r\n    if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid job posting ID is required.' });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\r\n    if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\r\n        return res.status(400).json({ error: \"Phone number is required.\" });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    // Verify job_posting_id belongs to the company, and for location_admin, to their location\r\n    db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, jobPosting) => {\r\n        if (err) { console.error(\"Database error verifying job posting:\", err); return next(new Error('Database error when verifying job posting.')); } // Pass error\r\n        if (!jobPosting) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n        \r\n        // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\r\n        if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.' });\r\n        }\r\n\r\n        db.run(\r\n            'INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n            [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date], // Use location_id from payload or job posting\r\n            function(insertErr) {\r\n                if (insertErr) { console.error(\"Database error creating applicant:\", insertErr); return next(new Error('Failed to create applicant.')); } // Pass error\r\n                res.status(201).json({ message: 'Applicant added successfully!', applicantId: this.lastID });\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\napp.get('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, status, location_id } = req.query; // Added job_posting_id, status, location_id filters\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Applicants.*, JobPostings.title AS job_title_name\r\n               FROM Applicants\r\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\r\n               WHERE Applicants.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid applicant status filter provided.' });\r\n    }\r\n    if (job_posting_id && isNaN(parseInt(job_posting_id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n    if (status) {\r\n        sql += ` AND Applicants.status = ?`;\r\n        params.push(status);\r\n    }\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)`; // Location admin sees applicants for their location or unassigned\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Applicants.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view applicants.' });\r\n    }\r\n\r\n    // Apply job_posting_id filter if provided\r\n    if (job_posting_id) {\r\n        sql += ` AND Applicants.job_posting_id = ?`;\r\n        params.push(job_posting_id);\r\n    }\r\n    // Apply location filter from query params for super_admin\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND Applicants.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching applicants:\", err); return next(new Error('Database error fetching applicants.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\r\napp.put('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { full_name, email, status, resume_url, notes, location_id, job_posting_id, phone_number } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Applicant Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update applicant records.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n    if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\r\n        return res.status(400).json({ error: \"Phone number must be a non-empty string if provided.\" });\r\n    }\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (resume_url !== undefined && typeof resume_url !== 'string') { // Assuming resume_url is a string URL\r\n        return res.status(400).json({ error: 'Resume URL must be a string if provided.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n    if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\r\n        return res.status(400).json({ error: 'Job posting ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE Applicants SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (full_name !== undefined) { clauses.push('full_name = ?'); updateParams.push(full_name); }\r\n    if (email !== undefined) { clauses.push('email = ?'); updateParams.push(email); }\r\n    if (phone_number !== undefined) { clauses.push('phone_number = ?'); updateParams.push(phone_number); }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    if (resume_url !== undefined) { clauses.push('resume_url = ?'); updateParams.push(resume_url); }\r\n    if (notes !== undefined) { clauses.push('notes = ?'); updateParams.push(notes); }\r\n    \r\n    // Admins can update location_id or job_posting_id, with restrictions for location_admin\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to another location.' });\r\n            }\r\n            // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n    if (job_posting_id !== undefined) {\r\n         if (role === 'super_admin') {\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        } else if (role === 'location_admin') {\r\n            // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\r\n            db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, job) => {\r\n                if (err) { console.error(\"DB error verifying job posting for update:\", err); return next(new Error('Database error verifying job posting.')); } // Pass error\r\n                if (!job) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n                if (job.location_id !== null && job.location_id !== currentUserLocationId) {\r\n                    return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.' });\r\n                }\r\n            });\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // For location_admin, ensure they can only update applicants within their assigned location\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating applicant:\", err); return next(new Error('Failed to update applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Applicant updated successfully!' });\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\r\napp.delete('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete applicants.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete applicants in their own location\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting applicant:\", err); return next(new Error('Failed to delete applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Document Management Routes ---\r\n\r\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\r\napp.post('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, file_name, file_type, file_url, description } = req.body;\r\n    const { companyId, userId } = req.user;\r\n    const upload_date = new Date().toISOString();\r\n\r\n    // Input Validation for Document Upload\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: 'Document title is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\r\n        return res.status(400).json({ error: 'File name is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\r\n        return res.status(400).json({ error: 'File type is required and must be a non-empty string.' });\r\n    }\r\n    // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\r\n    const urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\r\n    if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\r\n        return res.status(400).json({ error: 'A valid file URL (starting with http or https) is required.' });\r\n    }\r\n    if (description !== undefined && typeof description !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, userId, title, file_name, file_type, file_url, description, upload_date],\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error uploading document:\", err);\r\n                return next(new Error('Failed to upload document metadata.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Document metadata saved successfully!', documentId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\r\napp.get('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, userId, role } = req.user;\r\n    \r\n    let sql = 'SELECT * FROM Documents WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Non-super-admins only see their own documents\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching documents:\", err); return next(new Error('Database error fetching documents.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\r\napp.delete('/api/documents/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, userId, role } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid document ID provided.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Only super_admin or the original uploader can delete\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting document:\", err); return next(new Error('Failed to delete document.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Document not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\r\n// This should always be the LAST route in your Express app\r\napp.get(/'*'/, (req, res) => {\r\n    // Correctly serve the index.html from the parent directory\r\n    res.sendFile(path.join(__dirname, '..', 'index.html'));\r\n});\r\n\r\n// --- Global Error Handling Middleware ---\r\n// This should be the very last middleware in your Express app\r\napp.use((err, req, res, next) => {\r\n    console.error(`Unhandled Error: ${err.stack}`); // Log the full stack trace for debugging\r\n    // Respond with a generic error message for the client\r\n    res.status(500).json({\r\n        error: 'An unexpected server error occurred. Please try again later.',\r\n        // In development, you might send more details:\r\n        // message: err.message,\r\n        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n});\r\n\r\n// --- Server Start ---\r\n// This conditional export allows the app to be imported for testing\r\n// without starting the server listener when the test runner requires it.\r\nif (require.main === module) {\r\n    // Only listen if this file is run directly (not required as a module)\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is running successfully on http://localhost:${PORT}`);\r\n    });\r\n} else {\r\n    // Export the app for testing purposes\r\n    module.exports = app;\r\n}\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1750333852455},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"filename\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"_exploded\":true,\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$47\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"C:\\\\Users\\\\xarcy\\\\OneDrive\\\\Desktop\\\\onboardflow\\\\backend\\\\node_modules\\\\@babel\\\\preset-env\\\\lib\\\\index.js$48\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.27.4:development":{"value":{"code":"\"use strict\";\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// --- Imports ---\nvar express = require('express');\nvar sqlite3 = require('sqlite3').verbose();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar cors = require('cors'); // Import cors\nvar path = require('path');\nvar csv = require('csv-parser'); // For CSV parsing\nvar _require = require('stream'),\n  Readable = _require.Readable; // For creating a readable stream from a string\nvar rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\nvar morgan = require('morgan'); // Import morgan for request logging\n\n// Load environment variables from .env file in development\nif (process.env.NODE_ENV !== 'production') {\n  require('dotenv').config();\n}\n\n// Import the Stripe library and initialize it with your secret key\n// Use process.env.STRIPE_SECRET_KEY for production\nvar stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\n\n// --- App Initialization ---\nvar app = express();\n\n// Configure CORS for production environment\nvar allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\n\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n  allowedOrigins.push('null');\n}\nvar corsOptions = {\n  origin: function origin(_origin, callback) {\n    // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\n    if (!_origin) {\n      // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\n      if (allowedOrigins.includes('null') || process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\n        return callback(null, true);\n      }\n      var msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(msg), false);\n    }\n    if (allowedOrigins.indexOf(_origin) === -1) {\n      var _msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n      return callback(new Error(_msg), false);\n    }\n    return callback(null, true);\n  },\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  credentials: true,\n  // Allow cookies to be sent\n  optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\n};\napp.use(cors(corsOptions));\n\n// Use process.env.PORT for production, fallback to 3000 for local development\nvar PORT = process.env.PORT || 3000;\n\n// Define a webhook secret for Stripe. This should also be an environment variable.\nvar STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\n\n// --- Rate Limiting Configuration ---\nvar authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 10,\n  // Max 10 requests per 15 minutes per IP\n  message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\n  standardHeaders: true,\n  // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false // Disable the `X-RateLimit-*` headers\n});\n\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) ---\n// This route needs the raw body for signature verification.\napp.post('/api/stripe-webhook', express.raw({\n  type: 'application/json'\n}), /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req, res) {\n    var sig, event, session, userId, planId, subscriptionUpdated, subscriptionDeleted, invoiceSucceeded, invoiceFailed, _t, _t2;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          sig = req.headers['stripe-signature'];\n          _context.p = 1;\n          event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n          _context.n = 3;\n          break;\n        case 2:\n          _context.p = 2;\n          _t = _context.v;\n          console.error(\"Webhook Error: \".concat(_t.message));\n          return _context.a(2, res.status(400).send(\"Webhook Error: \".concat(_t.message)));\n        case 3:\n          _t2 = event.type;\n          _context.n = _t2 === 'checkout.session.completed' ? 4 : _t2 === 'customer.subscription.updated' ? 5 : _t2 === 'customer.subscription.deleted' ? 6 : _t2 === 'invoice.payment_succeeded' ? 7 : _t2 === 'invoice.payment_failed' ? 8 : 9;\n          break;\n        case 4:\n          session = event.data.object;\n          console.log('Checkout Session Completed:', session.id);\n          userId = session.metadata.userId;\n          planId = session.metadata.planId;\n          if (session.payment_status === 'paid' && userId && planId) {\n            db.run('UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?', [session.customer, session.subscription, 'active', planId, userId], function (err) {\n              if (err) console.error('Database update error for checkout.session.completed:', err.message);else console.log(\"User \".concat(userId, \" subscription updated to \").concat(planId, \" (active).\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 5:\n          subscriptionUpdated = event.data.object;\n          console.log('Subscription Updated:', subscriptionUpdated.id);\n          if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?', [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.updated:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionUpdated.customer, \" status updated to \").concat(subscriptionUpdated.status, \" and plan to \").concat(subscriptionUpdated.plan.id, \".\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 6:\n          subscriptionDeleted = event.data.object;\n          console.log('Subscription Deleted:', subscriptionDeleted.id);\n          if (subscriptionDeleted.customer) {\n            db.run('UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?', ['cancelled', 'free', subscriptionDeleted.customer], function (err) {\n              if (err) console.error('Database update error for customer.subscription.deleted:', err.message);else console.log(\"Subscription for customer \".concat(subscriptionDeleted.customer, \" marked as cancelled and reverted to free.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 7:\n          invoiceSucceeded = event.data.object;\n          console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\n          if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);else console.log(\"Subscription \".concat(invoiceSucceeded.subscription, \" status set to active.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 8:\n          invoiceFailed = event.data.object;\n          console.log('Invoice Payment Failed:', invoiceFailed.id);\n          if (invoiceFailed.subscription && invoiceFailed.customer) {\n            db.run('UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?', ['past_due', invoiceFailed.subscription, invoiceFailed.customer], function (err) {\n              if (err) console.error('Database update error for invoice.payment_failed:', err.message);else console.log(\"Subscription \".concat(invoiceFailed.subscription, \" status set to past_due.\"));\n            });\n          }\n          return _context.a(3, 10);\n        case 9:\n          console.log(\"Unhandled event type \".concat(event.type));\n        case 10:\n          res.status(200).json({\n            received: true\n          });\n        case 11:\n          return _context.a(2);\n      }\n    }, _callee, null, [[1, 2]]);\n  }));\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\napp.use(express.json());\n\n// --- JWT Secret ---\n// Use process.env.JWT_SECRET for production\nvar JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-and-long-string-for-jwt';\n\n// --- Request Logging (using Morgan) ---\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\napp.use(morgan('dev'));\n\n// --- Serve Static Files (Frontend) with Caching ---\n// This middleware serves static files from the 'onboardflow' root directory\n// and sets Cache-Control headers for browser caching.\napp.use(express[\"static\"](path.join(__dirname, '..'), {\n  maxAge: '7d',\n  // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\n  immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\n}));\n\n// --- Database Setup ---\nvar db = new sqlite3.Database('./onboardflow.db', function (err) {\n  if (err) {\n    // Log database connection error and exit\n    console.error(\"Error opening database:\", err.message);\n    process.exit(1); // Exit process if database connection fails\n  } else {\n    console.log(\"Successfully connected to the database.\");\n    db.get(\"PRAGMA foreign_keys = ON\");\n    db.serialize(function () {\n      db.run(\"CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Users (\\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER,\\n                location_id INTEGER,\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL UNIQUE,\\n                password_hash TEXT NOT NULL,\\n                position TEXT,\\n                employee_id TEXT,\\n                role TEXT NOT NULL,\\n                stripe_customer_id TEXT,\\n                stripe_subscription_id TEXT,\\n                subscription_status TEXT,\\n                plan_id TEXT,\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      db.run(\"CREATE TABLE IF NOT EXISTS Schedules (\\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                employee_id INTEGER NOT NULL,\\n                location_id INTEGER NOT NULL,\\n                start_time TEXT NOT NULL,\\n                end_time TEXT NOT NULL,\\n                notes TEXT,\\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // NEW: Create JobPostings table\n      db.run(\"CREATE TABLE IF NOT EXISTS JobPostings (\\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: link job posting to a specific location\\n                title TEXT NOT NULL,\\n                description TEXT NOT NULL,\\n                requirements TEXT, -- Optional: job requirements\\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\\n                created_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\\n            )\");\n      // Update Applicants table schema to link to JobPostings and add phone_number\n      db.run(\"CREATE TABLE IF NOT EXISTS Applicants (\\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\\n                full_name TEXT NOT NULL,\\n                email TEXT NOT NULL,\\n                phone_number TEXT, -- NEW: Phone number field\\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\\n                notes TEXT,\\n                application_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\\n            )\");\n      // NEW: Create Documents table for file/video uploads\n      db.run(\"CREATE TABLE IF NOT EXISTS Documents (\\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                company_id INTEGER NOT NULL,\\n                user_id INTEGER NOT NULL, -- User who uploaded the document\\n                title TEXT NOT NULL,\\n                file_name TEXT NOT NULL,\\n                file_type TEXT NOT NULL,\\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\\n                description TEXT,\\n                upload_date TEXT NOT NULL, -- ISO 8601 format\\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\\n            )\");\n    });\n  }\n});\n\n// --- Authentication Middleware ---\nfunction authenticateToken(req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) {\n    return res.status(401).json({\n      error: 'Unauthorized: No token provided.'\n    });\n  }\n  jwt.verify(token, JWT_SECRET, function (err, user) {\n    if (err) {\n      // Log the specific JWT error for debugging\n      console.error(\"JWT Verification Error:\", err.message);\n      return res.status(403).json({\n        error: 'Forbidden: Invalid or expired token.'\n      });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// --- Helper for Input Validation ---\nvar isValidEmail = function isValidEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\n\n// Apply rate limiting to authentication routes\napp.post('/api/register', authLimiter, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(req, res, next) {\n    var _req$body, company_name, full_name, email, password, password_hash, _t3;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          // Added 'next'\n          _req$body = req.body, company_name = _req$body.company_name, full_name = _req$body.full_name, email = _req$body.email, password = _req$body.password; // Input Validation for Registration\n          if (!(!company_name || typeof company_name !== 'string' || company_name.trim() === '')) {\n            _context2.n = 1;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Company name is required and must be a non-empty string.\"\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context2.n = 2;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context2.n = 3;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context2.n = 4;\n            break;\n          }\n          return _context2.a(2, res.status(400).json({\n            error: \"Password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          _context2.p = 4;\n          _context2.n = 5;\n          return bcrypt.hash(password, 10);\n        case 5:\n          password_hash = _context2.v;\n          db.serialize(function () {\n            db.run('BEGIN TRANSACTION');\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function (err) {\n              if (err) {\n                db.run('ROLLBACK');\n                console.error(\"Database error creating company:\", err);\n                return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\n              }\n              var newCompanyId = this.lastID;\n              db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')\", [newCompanyId, null, full_name, email, password_hash], function (userInsertErr) {\n                if (userInsertErr) {\n                  db.run('ROLLBACK');\n                  console.error(\"Database error creating user:\", userInsertErr);\n                  if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                    return res.status(409).json({\n                      error: 'Email already registered.'\n                    });\n                  }\n                  return next(new Error(\"Could not create user.\")); // Pass error\n                }\n                db.run('COMMIT');\n                res.status(201).json({\n                  message: \"Company and user registered successfully!\",\n                  userId: this.lastID\n                });\n              });\n            });\n          });\n          _context2.n = 7;\n          break;\n        case 6:\n          _context2.p = 6;\n          _t3 = _context2.v;\n          console.error(\"Registration error:\", _t3);\n          next(_t3); // Pass error to error handling middleware\n        case 7:\n          return _context2.a(2);\n      }\n    }, _callee2, null, [[4, 6]]);\n  }));\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/login', authLimiter, function (req, res, next) {\n  // Added 'next'\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n\n  // Input Validation for Login\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  if (!password || typeof password !== 'string' || password.length === 0) {\n    return res.status(400).json({\n      error: \"Password is required.\"\n    });\n  }\n  db.get(\"SELECT * FROM Users WHERE email = ?\", [email], /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(err, user) {\n      var isMatch, payload, token;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (!err) {\n              _context3.n = 1;\n              break;\n            }\n            console.error(\"Database error during login:\", err);\n            return _context3.a(2, next(new Error(\"A server error occurred during login.\")));\n          case 1:\n            if (user) {\n              _context3.n = 2;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 2:\n            _context3.n = 3;\n            return bcrypt.compare(password, user.password_hash);\n          case 3:\n            isMatch = _context3.v;\n            if (isMatch) {\n              _context3.n = 4;\n              break;\n            }\n            return _context3.a(2, res.status(401).json({\n              error: \"Invalid credentials.\"\n            }));\n          case 4:\n            payload = {\n              userId: user.user_id,\n              email: user.email,\n              role: user.role,\n              fullName: user.full_name,\n              companyId: user.company_id,\n              locationId: user.location_id,\n              subscriptionStatus: user.subscription_status,\n              planId: user.plan_id\n            };\n            token = jwt.sign(payload, JWT_SECRET, {\n              expiresIn: '1h'\n            });\n            res.status(200).json({\n              message: \"Login successful!\",\n              token: token,\n              role: user.role\n            });\n          case 5:\n            return _context3.a(2);\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});\napp.post('/api/invite-admin', authenticateToken, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(req, res, next) {\n    var _req$body3, full_name, email, password, location_id, _req$user, companyId, role, password_hash, _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          // Added 'next'\n          _req$body3 = req.body, full_name = _req$body3.full_name, email = _req$body3.email, password = _req$body3.password, location_id = _req$body3.location_id;\n          _req$user = req.user, companyId = _req$user.companyId, role = _req$user.role; // Input Validation for Invite Admin\n          if (!(role !== 'super_admin')) {\n            _context4.n = 1;\n            break;\n          }\n          return _context4.a(2, res.status(403).json({\n            error: 'Access Denied: Only super admins can invite other admins.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context4.n = 3;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context4.n = 4;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          if (!(typeof location_id !== 'number' || location_id <= 0)) {\n            _context4.n = 5;\n            break;\n          }\n          return _context4.a(2, res.status(400).json({\n            error: \"A valid location ID is required.\"\n          }));\n        case 5:\n          _context4.p = 5;\n          _context4.n = 6;\n          return bcrypt.hash(password, 10);\n        case 6:\n          password_hash = _context4.v;\n          db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n            if (err) {\n              console.error(\"Database error checking location:\", err);\n              return next(new Error('Database error when verifying location.'));\n            } // Pass error\n            if (!location) {\n              return res.status(400).json({\n                error: 'Selected location does not exist or does not belong to your company.'\n              });\n            }\n            db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash], function (userInsertErr) {\n              if (userInsertErr) {\n                console.error(\"Database error inviting admin:\", userInsertErr);\n                if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                  return res.status(409).json({\n                    error: 'Email already registered.'\n                  });\n                }\n                return next(new Error('Failed to invite admin.')); // Pass error\n              }\n              res.status(201).json({\n                message: \"Location admin invited successfully!\",\n                userId: this.lastID\n              });\n            });\n          });\n          _context4.n = 8;\n          break;\n        case 7:\n          _context4.p = 7;\n          _t4 = _context4.v;\n          console.error(\"Invite admin error:\", _t4);\n          next(_t4);\n        case 8:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[5, 7]]);\n  }));\n  return function (_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\n// NEW: API endpoint for inviting employees\napp.post('/api/invite-employee', authenticateToken, /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(req, res, next) {\n    var _req$body4, full_name, email, password, position, employee_id, location_id, _req$user2, companyId, role, currentUserLocationId, isLocationIdValid, password_hash, locationVerification, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _req$body4 = req.body, full_name = _req$body4.full_name, email = _req$body4.email, password = _req$body4.password, position = _req$body4.position, employee_id = _req$body4.employee_id, location_id = _req$body4.location_id;\n          _req$user2 = req.user, companyId = _req$user2.companyId, role = _req$user2.role, currentUserLocationId = _req$user2.locationId; // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\n          if (['super_admin', 'location_admin'].includes(role)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Only admins can invite employees.'\n          }));\n        case 1:\n          if (!(!full_name || typeof full_name !== 'string' || full_name.trim() === '')) {\n            _context5.n = 2;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Full name is required and must be a non-empty string.\"\n          }));\n        case 2:\n          if (!(!email || !isValidEmail(email))) {\n            _context5.n = 3;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid email address is required.\"\n          }));\n        case 3:\n          if (!(!password || typeof password !== 'string' || password.length < 6)) {\n            _context5.n = 4;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"Temporary password is required and must be at least 6 characters long.\"\n          }));\n        case 4:\n          // Corrected location_id validation: Must be a number > 0.\n          // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\n          // For location_admin, it must match their current location.\n          // This revised logic correctly checks for null OR a valid positive integer.\n          isLocationIdValid = location_id === null || typeof location_id === 'number' && !isNaN(location_id) && location_id > 0;\n          if (isLocationIdValid) {\n            _context5.n = 5;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\"\n          }));\n        case 5:\n          if (!(position !== undefined && typeof position !== 'string')) {\n            _context5.n = 6;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Position must be a string if provided.'\n          }));\n        case 6:\n          if (!(employee_id !== undefined && typeof employee_id !== 'string')) {\n            _context5.n = 7;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Employee ID must be a string if provided.'\n          }));\n        case 7:\n          if (!(role === 'location_admin')) {\n            _context5.n = 8;\n            break;\n          }\n          if (!(location_id !== currentUserLocationId)) {\n            _context5.n = 8;\n            break;\n          }\n          if (location_id === null && currentUserLocationId === null) {\n            _context5.n = 8;\n            break;\n          }\n          return _context5.a(2, res.status(403).json({\n            error: 'Access Denied: Location admin can only invite employees to their assigned location.'\n          }));\n        case 8:\n          _context5.p = 8;\n          _context5.n = 9;\n          return bcrypt.hash(password, 10);\n        case 9:\n          password_hash = _context5.v;\n          if (!(location_id !== null)) {\n            _context5.n = 11;\n            break;\n          }\n          _context5.n = 10;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n              if (err) reject(err);\n              resolve(location);\n            });\n          });\n        case 10:\n          locationVerification = _context5.v;\n          if (locationVerification) {\n            _context5.n = 11;\n            break;\n          }\n          return _context5.a(2, res.status(400).json({\n            error: 'Selected location does not exist or does not belong to your company.'\n          }));\n        case 11:\n          db.run(\"INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')\", [companyId, location_id, full_name, email, password_hash, position, employee_id],\n          // Default new employees to 'employee' role\n          function (userInsertErr) {\n            if (userInsertErr) {\n              console.error(\"Database error inviting employee:\", userInsertErr);\n              if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) {\n                return res.status(409).json({\n                  error: 'Email already registered.'\n                });\n              }\n              return next(new Error('Failed to invite employee.'));\n            }\n            res.status(201).json({\n              message: \"Employee invited successfully!\",\n              userId: this.lastID\n            });\n          });\n          _context5.n = 13;\n          break;\n        case 12:\n          _context5.p = 12;\n          _t5 = _context5.v;\n          console.error(\"Invite employee error:\", _t5);\n          next(_t5);\n        case 13:\n          return _context5.a(2);\n      }\n    }, _callee5, null, [[8, 12]]);\n  }));\n  return function (_x1, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}());\napp.get('/api/profile', authenticateToken, function (req, res) {\n  var _req$user3 = req.user,\n    userId = _req$user3.userId,\n    fullName = _req$user3.fullName,\n    email = _req$user3.email,\n    role = _req$user3.role,\n    companyId = _req$user3.companyId,\n    locationId = _req$user3.locationId,\n    subscriptionStatus = _req$user3.subscriptionStatus,\n    planId = _req$user3.planId;\n  res.status(200).json({\n    userId: userId,\n    fullName: fullName,\n    email: email,\n    role: role,\n    companyId: companyId,\n    locationId: locationId,\n    subscriptionStatus: subscriptionStatus,\n    planId: planId\n  });\n});\napp.put('/api/profile', authenticateToken, /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(req, res, next) {\n    var _req$body5, fullName, email, currentPassword, newPassword, userId;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          // Added 'next'\n          _req$body5 = req.body, fullName = _req$body5.fullName, email = _req$body5.email, currentPassword = _req$body5.currentPassword, newPassword = _req$body5.newPassword;\n          userId = req.user.userId; // Input Validation for Profile Update\n          if (!(fullName === undefined && email === undefined && (!currentPassword || !newPassword))) {\n            _context7.n = 1;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'No data provided for update.'\n          }));\n        case 1:\n          if (!(fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === ''))) {\n            _context7.n = 2;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"Full name must be a non-empty string if provided.\"\n          }));\n        case 2:\n          if (!(email !== undefined && !isValidEmail(email))) {\n            _context7.n = 3;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"A valid email address must be provided if changing email.\"\n          }));\n        case 3:\n          if (!(newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6))) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: \"New password must be at least 6 characters long if changing password.\"\n          }));\n        case 4:\n          if (!(currentPassword && !newPassword || !currentPassword && newPassword)) {\n            _context7.n = 5;\n            break;\n          }\n          return _context7.a(2, res.status(400).json({\n            error: 'Both current password and new password are required to change password.'\n          }));\n        case 5:\n          db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(err, user) {\n              var updateSql, updateParams, clauses, changesMade, existingUser, isMatch, newPasswordHash, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.n) {\n                  case 0:\n                    if (!err) {\n                      _context6.n = 1;\n                      break;\n                    }\n                    console.error(\"Database error fetching user for profile update:\", err);\n                    return _context6.a(2, next(new Error(\"Server error during profile update.\")));\n                  case 1:\n                    if (user) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    return _context6.a(2, res.status(404).json({\n                      error: \"User not found.\"\n                    }));\n                  case 2:\n                    updateSql = 'UPDATE Users SET ';\n                    updateParams = [];\n                    clauses = [];\n                    changesMade = false;\n                    if (fullName !== undefined && fullName !== user.full_name) {\n                      clauses.push('full_name = ?');\n                      updateParams.push(fullName);\n                      changesMade = true;\n                    }\n                    if (!(email !== undefined && email !== user.email)) {\n                      _context6.n = 8;\n                      break;\n                    }\n                    _context6.p = 3;\n                    _context6.n = 4;\n                    return new Promise(function (resolve, reject) {\n                      db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], function (err, row) {\n                        if (err) reject(err);\n                        resolve(row);\n                      });\n                    });\n                  case 4:\n                    existingUser = _context6.v;\n                    if (!existingUser) {\n                      _context6.n = 5;\n                      break;\n                    }\n                    return _context6.a(2, res.status(409).json({\n                      error: 'Email already in use by another account.'\n                    }));\n                  case 5:\n                    _context6.n = 7;\n                    break;\n                  case 6:\n                    _context6.p = 6;\n                    _t6 = _context6.v;\n                    console.error(\"Database error checking existing email:\", _t6);\n                    return _context6.a(2, next(new Error(\"Server error verifying email availability.\")));\n                  case 7:\n                    clauses.push('email = ?');\n                    updateParams.push(email);\n                    changesMade = true;\n                  case 8:\n                    if (!(currentPassword && newPassword)) {\n                      _context6.n = 12;\n                      break;\n                    }\n                    _context6.n = 9;\n                    return bcrypt.compare(currentPassword, user.password_hash);\n                  case 9:\n                    isMatch = _context6.v;\n                    if (isMatch) {\n                      _context6.n = 10;\n                      break;\n                    }\n                    return _context6.a(2, res.status(401).json({\n                      error: \"Current password incorrect.\"\n                    }));\n                  case 10:\n                    _context6.n = 11;\n                    return bcrypt.hash(newPassword, 10);\n                  case 11:\n                    newPasswordHash = _context6.v;\n                    clauses.push('password_hash = ?');\n                    updateParams.push(newPasswordHash);\n                    changesMade = true;\n                  case 12:\n                    if (changesMade) {\n                      _context6.n = 13;\n                      break;\n                    }\n                    return _context6.a(2, res.status(200).json({\n                      message: 'No changes detected. Profile remains the same.'\n                    }));\n                  case 13:\n                    updateSql += clauses.join(', ') + ' WHERE user_id = ?';\n                    updateParams.push(userId);\n                    db.run(updateSql, updateParams, function (updateErr) {\n                      if (updateErr) {\n                        console.error(\"Database error updating profile:\", updateErr);\n                        return next(new Error('Failed to update profile.'));\n                      } // Pass error\n                      if (this.changes > 0) {\n                        db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], function (fetchErr, updatedUser) {\n                          if (fetchErr || !updatedUser) {\n                            console.error(\"Error fetching updated user for new token:\", fetchErr);\n                            return res.status(200).json({\n                              message: 'Profile updated successfully, but token could not be refreshed.'\n                            });\n                          }\n                          var newPayload = {\n                            userId: updatedUser.user_id,\n                            email: updatedUser.email,\n                            role: updatedUser.role,\n                            fullName: updatedUser.full_name,\n                            companyId: updatedUser.company_id,\n                            locationId: updatedUser.location_id,\n                            subscriptionStatus: updatedUser.subscription_status,\n                            planId: user.plan_id\n                          };\n                          var newToken = jwt.sign(newPayload, JWT_SECRET, {\n                            expiresIn: '1h'\n                          });\n                          res.status(200).json({\n                            message: 'Profile updated successfully!',\n                            token: newToken\n                          });\n                        });\n                      } else {\n                        res.status(200).json({\n                          message: 'No changes applied as data was identical.'\n                        });\n                      }\n                    });\n                  case 14:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[3, 6]]);\n            }));\n            return function (_x15, _x16) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 6:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}());\napp.get('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user4 = req.user,\n    companyId = _req$user4.companyId,\n    role = _req$user4.role;\n  var sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\n  var params = [companyId];\n\n  // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\n  if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view locations.'\n    });\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching locations:\", err);\n      return next(new Error('Database error fetching locations.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp.post('/api/locations', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body6 = req.body,\n    location_name = _req$body6.location_name,\n    location_address = _req$body6.location_address;\n  var _req$user5 = req.user,\n    companyId = _req$user5.companyId,\n    role = _req$user5.role;\n\n  // Input Validation for Create Location\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can create locations.'\n    });\n  }\n  if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Location name is required and must be a non-empty string.\"\n    });\n  }\n  if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\n    return res.status(400).json({\n      error: \"Location address is required and must be a non-empty string.\"\n    });\n  }\n  db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function (err) {\n    if (err) {\n      console.error(\"Database error creating location:\", err);\n      return next(new Error('Failed to create location.'));\n    } // Pass error\n    res.status(201).json({\n      message: 'Location created!',\n      locationId: this.lastID\n    });\n  });\n});\napp[\"delete\"]('/api/locations/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user6 = req.user,\n    companyId = _req$user6.companyId,\n    role = _req$user6.role;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete locations.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID provided.'\n    });\n  }\n  db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting location:\", err);\n      return next(new Error('Failed to delete location.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Location not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.get('/api/users', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user7 = req.user,\n    companyId = _req$user7.companyId,\n    role = _req$user7.role,\n    currentUserId = _req$user7.userId,\n    currentUserLocationId = _req$user7.locationId;\n  var _req$query = req.query,\n    filterRole = _req$query.filterRole,\n    filterLocationId = _req$query.filterLocationId;\n  var sql = \"SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\\n               FROM Users\\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'super_admin') {\n    // Super admin can view all users in their company.\n  } else if (role === 'location_admin') {\n    // Location admin can view all users within their assigned location, plus unassigned users for their company.\n    if (currentUserLocationId) {\n      sql += \" AND (Users.location_id = ? OR Users.location_id IS NULL)\"; // Admins might need to see unassigned users\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view users.'\n    });\n  }\n\n  // Input validation for filterRole and filterLocationId\n  var allowedRoles = ['super_admin', 'location_admin', 'employee'];\n  if (filterRole && (!allowedRoles.includes(filterRole) || role === 'location_admin' && filterRole === 'super_admin')) {\n    return res.status(400).json({\n      error: 'Invalid filter role provided or insufficient permissions to filter by this role.'\n    });\n  }\n  if (filterLocationId && isNaN(parseInt(filterLocationId))) {\n    return res.status(400).json({\n      error: 'Invalid filter location ID provided.'\n    });\n  }\n  if (filterRole) {\n    if (role === 'super_admin' || role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin') || role === 'employee' && filterRole === 'employee') {\n      sql += \" AND Users.role = ?\";\n      params.push(filterRole);\n    } else {\n      // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by role.'\n      });\n    }\n  }\n  if (filterLocationId) {\n    // Ensure location_admin can only filter by their own location\n    if (role === 'super_admin' || role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId) {\n      sql += \" AND Users.location_id = ?\";\n      params.push(filterLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Insufficient permissions to filter by location.'\n      });\n    }\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching users:\", err);\n      return next(new Error('Database error fetching users.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/users/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user8 = req.user,\n    companyId = _req$user8.companyId,\n    role = _req$user8.role,\n    authenticatedUserId = _req$user8.userId;\n  if (role !== 'super_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only super admins can delete users.'\n    });\n  }\n  if (parseInt(id) === authenticatedUserId) {\n    return res.status(403).json({\n      error: 'Cannot delete your own super admin account via this interface.'\n    });\n  }\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid user ID provided.'\n    });\n  }\n  db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function (err) {\n    if (err) {\n      console.error(\"Database error deleting user:\", err);\n      return next(new Error('Failed to delete user.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'User not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\napp.post('/api/create-checkout-session', authenticateToken, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(req, res, next) {\n    var planId, _req$user9, userId, email, companyId, allowedPlanIds, priceIdMap, stripePriceId, customerId, userRecord, customer, session, _t7;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          // Added 'next'\n          planId = req.body.planId;\n          _req$user9 = req.user, userId = _req$user9.userId, email = _req$user9.email, companyId = _req$user9.companyId; // Input Validation for planId\n          allowedPlanIds = ['pro', 'enterprise'];\n          if (!(!planId || !allowedPlanIds.includes(planId))) {\n            _context8.n = 1;\n            break;\n          }\n          return _context8.a(2, res.status(400).json({\n            error: 'Invalid plan ID provided.'\n          }));\n        case 1:\n          priceIdMap = {\n            'pro': process.env.STRIPE_PRICE_ID_PRO,\n            // Use environment variable\n            'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\n          };\n          stripePriceId = priceIdMap[planId];\n          if (stripePriceId) {\n            _context8.n = 2;\n            break;\n          }\n          return _context8.a(2, res.status(500).json({\n            error: 'Stripe price ID not configured for this plan.'\n          }));\n        case 2:\n          _context8.p = 2;\n          _context8.n = 3;\n          return new Promise(function (resolve, reject) {\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], function (err, row) {\n              if (err) reject(err);\n              resolve(row);\n            });\n          });\n        case 3:\n          userRecord = _context8.v;\n          if (!(userRecord && userRecord.stripe_customer_id)) {\n            _context8.n = 4;\n            break;\n          }\n          customerId = userRecord.stripe_customer_id;\n          _context8.n = 6;\n          break;\n        case 4:\n          _context8.n = 5;\n          return stripeInstance.customers.create({\n            email: email,\n            metadata: {\n              userId: userId,\n              companyId: companyId\n            }\n          });\n        case 5:\n          customer = _context8.v;\n          customerId = customer.id;\n          db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], function (err) {\n            if (err) console.error('Failed to save Stripe customer ID to DB:', err);\n          });\n        case 6:\n          _context8.n = 7;\n          return stripeInstance.checkout.sessions.create({\n            customer: customerId,\n            mode: 'subscription',\n            line_items: [{\n              price: stripePriceId,\n              quantity: 1\n            }],\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\n            success_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}\"),\n            cancel_url: \"\".concat(process.env.FRONTEND_URL || 'http://localhost:8000', \"/pricing.html?payment=cancelled\"),\n            metadata: {\n              userId: userId,\n              planId: planId\n            }\n          });\n        case 7:\n          session = _context8.v;\n          res.status(200).json({\n            url: session.url\n          });\n          _context8.n = 9;\n          break;\n        case 8:\n          _context8.p = 8;\n          _t7 = _context8.v;\n          console.error('Error creating Stripe Checkout Session:', _t7);\n          next(_t7);\n        case 9:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[2, 8]]);\n  }));\n  return function (_x17, _x18, _x19) {\n    return _ref8.apply(this, arguments);\n  };\n}());\napp.post('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body7 = req.body,\n    employee_id = _req$body7.employee_id,\n    location_id = _req$body7.location_id,\n    start_time = _req$body7.start_time,\n    end_time = _req$body7.end_time,\n    notes = _req$body7.notes;\n  var _req$user0 = req.user,\n    companyId = _req$user0.companyId,\n    role = _req$user0.role,\n    currentUserId = _req$user0.userId;\n\n  // Input Validation for Create Schedule\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create schedules.'\n    });\n  }\n  if (typeof employee_id !== 'number' || employee_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid employee ID is required.'\n    });\n  }\n  if (typeof location_id !== 'number' || location_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid location ID is required.'\n    });\n  }\n  if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\n    return res.status(400).json({\n      error: 'Valid start and end times are required.'\n    });\n  }\n  if (new Date(start_time) >= new Date(end_time)) {\n    return res.status(400).json({\n      error: 'Start time must be before end time.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], function (err, employee) {\n    if (err) {\n      console.error(\"Database error verifying employee:\", err);\n      return next(new Error('Database error during employee verification.'));\n    } // Pass error\n    if (!employee) {\n      return res.status(400).json({\n        error: 'Employee not found in your company.'\n      });\n    }\n    db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], function (err, location) {\n      if (err) {\n        console.error(\"Database error verifying location:\", err);\n        return next(new Error('Database error during location verification.'));\n      } // Pass error\n      if (!location) {\n        return res.status(400).json({\n          error: 'Location not found in your company.'\n        });\n      }\n      db.run('INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes], function (insertErr) {\n        if (insertErr) {\n          console.error(\"Database error creating schedule:\", insertErr);\n          return next(new Error('Failed to create schedule.'));\n        } // Pass error\n        res.status(201).json({\n          message: 'Schedule created successfully!',\n          scheduleId: this.lastID\n        });\n      });\n    });\n  });\n});\napp.get('/api/schedules', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query2 = req.query,\n    employee_id = _req$query2.employee_id,\n    location_id = _req$query2.location_id,\n    start_date = _req$query2.start_date,\n    end_date = _req$query2.end_date;\n  var _req$user1 = req.user,\n    companyId = _req$user1.companyId,\n    role = _req$user1.role,\n    currentUserId = _req$user1.userId,\n    currentUserLocationId = _req$user1.locationId;\n  var sql = \"SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\\n               FROM Schedules\\n               JOIN Users ON Schedules.employee_id = Users.user_id\\n               JOIN Locations ON Schedules.location_id = Locations.location_id\\n               WHERE Users.company_id = ?\";\n  var params = [companyId];\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND Schedules.location_id = ?\";\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Users.user_id = ?\";\n    params.push(currentUserId);\n  }\n\n  // Input validation for query parameters\n  if (employee_id && isNaN(parseInt(employee_id))) {\n    return res.status(400).json({\n      error: 'Invalid employee ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (start_date && isNaN(new Date(start_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid start date filter provided.'\n    });\n  }\n  if (end_date && isNaN(new Date(end_date).getTime())) {\n    return res.status(400).json({\n      error: 'Invalid end date filter provided.'\n    });\n  }\n  if (employee_id && (role === 'super_admin' || role === 'location_admin' && parseInt(employee_id) === currentUserId || role === 'employee' && parseInt(employee_id) === currentUserId)) {\n    sql += \" AND Users.role = ?\";\n    params.push(filterRole); // This should be employee_id, not filterRole\n  }\n  if (location_id && (role === 'super_admin' || role === 'location_admin' && parseInt(location_id) === currentUserLocationId)) {\n    sql += \" AND Schedules.location_id = ?\";\n    params.push(location_id);\n  }\n  if (start_date) {\n    sql += \" AND Schedules.start_time >= ?\";\n    params.push(start_date);\n  }\n  if (end_date) {\n    sql += \" AND Schedules.end_time <= ?\";\n    params.push(end_date);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching schedules:\", err);\n      return next(new Error('Database error fetching schedules.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\napp[\"delete\"]('/api/schedules/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user10 = req.user,\n    companyId = _req$user10.companyId,\n    role = _req$user10.role,\n    currentUserId = _req$user10.userId,\n    currentUserLocationId = _req$user10.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid schedule ID provided.'\n    });\n  }\n  if (role === 'employee') {\n    return res.status(403).json({\n      error: 'Access Denied: Employees cannot delete schedules.'\n    });\n  }\n  var sql = \"DELETE FROM Schedules WHERE schedule_id = ?\";\n  var params = [id];\n  if (role === 'location_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)\";\n    params.push(currentUserLocationId, companyId);\n  } else if (role === 'super_admin') {\n    sql += \" AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)\";\n    params.push(companyId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting schedule:\", err);\n      return next(new Error('Failed to delete schedule.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Schedule not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Hiring Routes ---\n\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\napp.post('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body8 = req.body,\n    title = _req$body8.title,\n    description = _req$body8.description,\n    requirements = _req$body8.requirements,\n    location_id = _req$body8.location_id;\n  var _req$user11 = req.user,\n    companyId = _req$user11.companyId,\n    role = _req$user11.role,\n    currentUserLocationId = _req$user11.locationId;\n  var created_date = new Date().toISOString(); // Current date/time for creation\n\n  // Input Validation for Create Job Posting\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can create job postings.'\n    });\n  }\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: \"Job title is required and must be a non-empty string.\"\n    });\n  }\n  if (!description || typeof description !== 'string' || description.trim() === '') {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    // location_id can be null\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // If location_admin, ensure location_id matches their assigned location, or is null\n  // A location admin can only create job postings for their assigned location or company-wide if their location is null\n  if (role === 'location_admin' && location_id && location_id !== currentUserLocationId) {\n    return res.status(403).json({\n      error: 'Access Denied: Location admin can only post jobs for their assigned location.'\n    });\n  }\n  db.run('INSERT INTO JobPostings (company_id, location_id, title, description, requirements, status, created_date) VALUES (?, ?, ?, ?, ?, ?, ?)', [companyId, location_id, title, description, requirements, 'Open', created_date],\n  // Default status to 'Open'\n  function (err) {\n    if (err) {\n      console.error(\"Database error creating job posting:\", err);\n      return next(new Error('Failed to create job posting.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Job posting created successfully!',\n      jobPostingId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\napp.get('/api/job-postings', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query3 = req.query,\n    status = _req$query3.status,\n    location_id = _req$query3.location_id;\n  var _req$user12 = req.user,\n    companyId = _req$user12.companyId,\n    role = _req$user12.role,\n    currentUserLocationId = _req$user12.locationId;\n  var sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\n  var params = [companyId];\n\n  // Authorization: super_admin sees all, location_admin sees their location's postings\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    // Employees generally shouldn't see job postings list via this admin API\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view job postings.'\n    });\n  }\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid job posting status filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += ' AND status = ?';\n    params.push(status);\n  }\n  // Only super admin can filter by any location_id beyond their own scope\n  if (location_id && role === 'super_admin') {\n    sql += ' AND location_id = ?';\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching job postings:\", err);\n      return next(new Error('Database error fetching job postings.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp.put('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body9 = req.body,\n    title = _req$body9.title,\n    description = _req$body9.description,\n    requirements = _req$body9.requirements,\n    status = _req$body9.status,\n    location_id = _req$body9.location_id;\n  var _req$user13 = req.user,\n    companyId = _req$user13.companyId,\n    role = _req$user13.role,\n    currentUserLocationId = _req$user13.locationId;\n\n  // Input Validation for Job Posting Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update job postings.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\n    return res.status(400).json({\n      error: 'Job title must be a non-empty string if provided.'\n    });\n  }\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  var allowedStatuses = ['Open', 'Closed', 'Filled'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE JobPostings SET ';\n  var updateParams = [];\n  var clauses = [];\n  if (title !== undefined) {\n    clauses.push('title = ?');\n    updateParams.push(title);\n  }\n  // Fix: Missing closing parenthesis for this condition\n  if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\n    // Line 1009\n    return res.status(400).json({\n      error: 'Description must be a non-empty string if provided.'\n    });\n  }\n  if (requirements !== undefined && typeof requirements !== 'string') {\n    return res.status(400).json({\n      error: 'Requirements must be a string if provided.'\n    });\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n\n  // super_admin can change location_id. location_admin cannot change location_id or change to different location\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot change job posting location to another location.'\n        });\n      }\n      // If location admin updates job posting, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // Additional security for location_admin: ensure they only update their own location's postings\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating job posting:\", err);\n      return next(new Error('Failed to update job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Job posting updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\napp[\"delete\"]('/api/job-postings/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user14 = req.user,\n    companyId = _req$user14.companyId,\n    role = _req$user14.role,\n    currentUserLocationId = _req$user14.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete job postings.'\n    });\n  }\n  var sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete their own location's postings\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting job posting:\", err);\n      return next(new Error('Failed to delete job posting.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Job posting not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Update Applicant API endpoints to use job_posting_id\napp.post('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body0 = req.body,\n    job_posting_id = _req$body0.job_posting_id,\n    full_name = _req$body0.full_name,\n    email = _req$body0.email,\n    notes = _req$body0.notes,\n    location_id = _req$body0.location_id,\n    phone_number = _req$body0.phone_number; // Added phone_number\n  var _req$user15 = req.user,\n    companyId = _req$user15.companyId,\n    role = _req$user15.role,\n    currentUserLocationId = _req$user15.locationId;\n  var application_date = new Date().toISOString(); // Current date/time for application\n\n  // Input Validation for Adding Applicant\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can add applicants.'\n    });\n  }\n  if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\n    return res.status(400).json({\n      error: 'A valid job posting ID is required.'\n    });\n  }\n  if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\n    return res.status(400).json({\n      error: \"Full name is required and must be a non-empty string.\"\n    });\n  }\n  if (!email || !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address is required.\"\n    });\n  }\n  // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\n  if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\n    return res.status(400).json({\n      error: \"Phone number is required.\"\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n\n  // Verify job_posting_id belongs to the company, and for location_admin, to their location\n  db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, jobPosting) {\n    if (err) {\n      console.error(\"Database error verifying job posting:\", err);\n      return next(new Error('Database error when verifying job posting.'));\n    } // Pass error\n    if (!jobPosting) {\n      return res.status(400).json({\n        error: 'Job Posting not found or does not belong to your company.'\n      });\n    }\n\n    // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\n    if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.'\n      });\n    }\n    db.run('INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date],\n    // Use location_id from payload or job posting\n    function (insertErr) {\n      if (insertErr) {\n        console.error(\"Database error creating applicant:\", insertErr);\n        return next(new Error('Failed to create applicant.'));\n      } // Pass error\n      res.status(201).json({\n        message: 'Applicant added successfully!',\n        applicantId: this.lastID\n      });\n    });\n  });\n});\napp.get('/api/applicants', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$query4 = req.query,\n    job_posting_id = _req$query4.job_posting_id,\n    status = _req$query4.status,\n    location_id = _req$query4.location_id; // Added job_posting_id, status, location_id filters\n  var _req$user16 = req.user,\n    companyId = _req$user16.companyId,\n    role = _req$user16.role,\n    currentUserId = _req$user16.userId,\n    currentUserLocationId = _req$user16.locationId;\n  var sql = \"SELECT Applicants.*, JobPostings.title AS job_title_name\\n               FROM Applicants\\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\\n               WHERE Applicants.company_id = ?\";\n  var params = [companyId];\n\n  // Input validation for query parameters\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\n  if (status && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid applicant status filter provided.'\n    });\n  }\n  if (job_posting_id && isNaN(parseInt(job_posting_id))) {\n    return res.status(400).json({\n      error: 'Invalid job posting ID filter provided.'\n    });\n  }\n  if (location_id && isNaN(parseInt(location_id))) {\n    return res.status(400).json({\n      error: 'Invalid location ID filter provided.'\n    });\n  }\n  if (status) {\n    sql += \" AND Applicants.status = ?\";\n    params.push(status);\n  }\n  if (role === 'location_admin') {\n    if (currentUserLocationId) {\n      sql += \" AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)\"; // Location admin sees applicants for their location or unassigned\n      params.push(currentUserLocationId);\n    } else {\n      return res.status(403).json({\n        error: 'Access Denied: Location admin not assigned to a location.'\n      });\n    }\n  } else if (role === 'employee') {\n    sql += \" AND Applicants.user_id = ?\";\n    params.push(currentUserId);\n  } else {\n    return res.status(403).json({\n      error: 'Access Denied: Insufficient permissions to view applicants.'\n    });\n  }\n\n  // Apply job_posting_id filter if provided\n  if (job_posting_id) {\n    sql += \" AND Applicants.job_posting_id = ?\";\n    params.push(job_posting_id);\n  }\n  // Apply location filter from query params for super_admin\n  if (location_id && role === 'super_admin') {\n    sql += \" AND Applicants.location_id = ?\";\n    params.push(location_id);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching applicants:\", err);\n      return next(new Error('Database error fetching applicants.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\napp.put('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$body1 = req.body,\n    full_name = _req$body1.full_name,\n    email = _req$body1.email,\n    status = _req$body1.status,\n    resume_url = _req$body1.resume_url,\n    notes = _req$body1.notes,\n    location_id = _req$body1.location_id,\n    job_posting_id = _req$body1.job_posting_id,\n    phone_number = _req$body1.phone_number;\n  var _req$user17 = req.user,\n    companyId = _req$user17.companyId,\n    role = _req$user17.role,\n    currentUserLocationId = _req$user17.locationId;\n\n  // Input Validation for Applicant Update\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can update applicant records.'\n    });\n  }\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\n    return res.status(400).json({\n      error: \"Full name must be a non-empty string if provided.\"\n    });\n  }\n  if (email !== undefined && !isValidEmail(email)) {\n    return res.status(400).json({\n      error: \"A valid email address must be provided if changing email.\"\n    });\n  }\n  if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\n    return res.status(400).json({\n      error: \"Phone number must be a non-empty string if provided.\"\n    });\n  }\n  var allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\n  if (status !== undefined && !allowedStatuses.includes(status)) {\n    return res.status(400).json({\n      error: 'Invalid status provided.'\n    });\n  }\n  if (resume_url !== undefined && typeof resume_url !== 'string') {\n    // Assuming resume_url is a string URL\n    return res.status(400).json({\n      error: 'Resume URL must be a string if provided.'\n    });\n  }\n  if (notes !== undefined && typeof notes !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\n    return res.status(400).json({\n      error: 'Location ID must be a number or null if provided.'\n    });\n  }\n  if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\n    return res.status(400).json({\n      error: 'Job posting ID must be a number or null if provided.'\n    });\n  }\n  var updateSql = 'UPDATE Applicants SET ';\n  var updateParams = [];\n  var clauses = [];\n\n  // Fields that can be updated\n  if (full_name !== undefined) {\n    clauses.push('full_name = ?');\n    updateParams.push(full_name);\n  }\n  if (email !== undefined) {\n    clauses.push('email = ?');\n    updateParams.push(email);\n  }\n  if (phone_number !== undefined) {\n    clauses.push('phone_number = ?');\n    updateParams.push(phone_number);\n  }\n  if (status !== undefined) {\n    clauses.push('status = ?');\n    updateParams.push(status);\n  }\n  if (resume_url !== undefined) {\n    clauses.push('resume_url = ?');\n    updateParams.push(resume_url);\n  }\n  if (notes !== undefined) {\n    clauses.push('notes = ?');\n    updateParams.push(notes);\n  }\n\n  // Admins can update location_id or job_posting_id, with restrictions for location_admin\n  if (location_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    } else if (role === 'location_admin') {\n      if (location_id !== currentUserLocationId && location_id !== null) {\n        // location_id can be null (company-wide)\n        return res.status(403).json({\n          error: 'Access Denied: Location admin cannot assign applicants to another location.'\n        });\n      }\n      // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\n      clauses.push('location_id = ?');\n      updateParams.push(location_id);\n    }\n  }\n  if (job_posting_id !== undefined) {\n    if (role === 'super_admin') {\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    } else if (role === 'location_admin') {\n      // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\n      db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], function (err, job) {\n        if (err) {\n          console.error(\"DB error verifying job posting for update:\", err);\n          return next(new Error('Database error verifying job posting.'));\n        } // Pass error\n        if (!job) {\n          return res.status(400).json({\n            error: 'Job Posting not found or does not belong to your company.'\n          });\n        }\n        if (job.location_id !== null && job.location_id !== currentUserLocationId) {\n          return res.status(403).json({\n            error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.'\n          });\n        }\n      });\n      clauses.push('job_posting_id = ?');\n      updateParams.push(job_posting_id);\n    }\n  }\n  if (clauses.length === 0) {\n    return res.status(400).json({\n      error: 'No fields provided for update.'\n    });\n  }\n  updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\n  updateParams.push(id, companyId);\n\n  // For location_admin, ensure they can only update applicants within their assigned location\n  if (role === 'location_admin') {\n    updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\n    params.push(currentUserLocationId);\n  }\n  db.run(updateSql, updateParams, function (err) {\n    if (err) {\n      console.error(\"Database error updating applicant:\", err);\n      return next(new Error('Failed to update applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to update.'\n      });\n    }\n    res.status(200).json({\n      message: 'Applicant updated successfully!'\n    });\n  });\n});\n\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\napp[\"delete\"]('/api/applicants/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user18 = req.user,\n    companyId = _req$user18.companyId,\n    role = _req$user18.role,\n    currentUserLocationId = _req$user18.locationId;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid applicant ID provided.'\n    });\n  }\n  if (role !== 'super_admin' && role !== 'location_admin') {\n    return res.status(403).json({\n      error: 'Access Denied: Only admins can delete applicants.'\n    });\n  }\n  var sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Additional security for location_admin: ensure they only delete applicants in their own location\n  if (role === 'location_admin') {\n    sql += ' AND (location_id = ? OR location_id IS NULL)';\n    params.push(currentUserLocationId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting applicant:\", err);\n      return next(new Error('Failed to delete applicant.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Applicant not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// --- Document Management Routes ---\n\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\napp.post('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$body10 = req.body,\n    title = _req$body10.title,\n    file_name = _req$body10.file_name,\n    file_type = _req$body10.file_type,\n    file_url = _req$body10.file_url,\n    description = _req$body10.description;\n  var _req$user19 = req.user,\n    companyId = _req$user19.companyId,\n    userId = _req$user19.userId;\n  var upload_date = new Date().toISOString();\n\n  // Input Validation for Document Upload\n  if (!title || typeof title !== 'string' || title.trim() === '') {\n    return res.status(400).json({\n      error: 'Document title is required and must be a non-empty string.'\n    });\n  }\n  if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\n    return res.status(400).json({\n      error: 'File name is required and must be a non-empty string.'\n    });\n  }\n  if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\n    return res.status(400).json({\n      error: 'File type is required and must be a non-empty string.'\n    });\n  }\n  // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\n  var urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\n  if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\n    return res.status(400).json({\n      error: 'A valid file URL (starting with http or https) is required.'\n    });\n  }\n  if (description !== undefined && typeof description !== 'string') {\n    return res.status(400).json({\n      error: 'Notes must be a string if provided.'\n    });\n  }\n  db.run('INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [companyId, userId, title, file_name, file_type, file_url, description, upload_date], function (err) {\n    if (err) {\n      console.error(\"Database error uploading document:\", err);\n      return next(new Error('Failed to upload document metadata.')); // Pass error\n    }\n    res.status(201).json({\n      message: 'Document metadata saved successfully!',\n      documentId: this.lastID\n    });\n  });\n});\n\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\napp.get('/api/documents', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var _req$user20 = req.user,\n    companyId = _req$user20.companyId,\n    userId = _req$user20.userId,\n    role = _req$user20.role;\n  var sql = 'SELECT * FROM Documents WHERE company_id = ?';\n  var params = [companyId];\n\n  // Non-super-admins only see their own documents\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.all(sql, params, function (err, rows) {\n    if (err) {\n      console.error(\"Database error fetching documents:\", err);\n      return next(new Error('Database error fetching documents.'));\n    } // Pass error\n    res.json(rows);\n  });\n});\n\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\napp[\"delete\"]('/api/documents/:id', authenticateToken, function (req, res, next) {\n  // Added 'next'\n  var id = req.params.id;\n  var _req$user21 = req.user,\n    companyId = _req$user21.companyId,\n    userId = _req$user21.userId,\n    role = _req$user21.role;\n\n  // Validate ID parameter\n  if (!id || isNaN(parseInt(id))) {\n    return res.status(400).json({\n      error: 'Invalid document ID provided.'\n    });\n  }\n  var sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\n  var params = [id, companyId];\n\n  // Only super_admin or the original uploader can delete\n  if (role !== 'super_admin') {\n    sql += ' AND user_id = ?';\n    params.push(userId);\n  }\n  db.run(sql, params, function (err) {\n    if (err) {\n      console.error(\"Database error deleting document:\", err);\n      return next(new Error('Failed to delete document.'));\n    } // Pass error\n    if (this.changes === 0) {\n      return res.status(404).json({\n        error: 'Document not found or not authorized to delete.'\n      });\n    }\n    res.status(204).send();\n  });\n});\n\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\n// This should always be the LAST route in your Express app\napp.get(/'*'/, function (req, res) {\n  // Correctly serve the index.html from the parent directory\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// --- Global Error Handling Middleware ---\n// This should be the very last middleware in your Express app\napp.use(function (err, req, res, next) {\n  console.error(\"Unhandled Error: \".concat(err.stack)); // Log the full stack trace for debugging\n  // Respond with a generic error message for the client\n  res.status(500).json({\n    error: 'An unexpected server error occurred. Please try again later.'\n    // In development, you might send more details:\n    // message: err.message,\n    // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// --- Server Start ---\n// This conditional export allows the app to be imported for testing\n// without starting the server listener when the test runner requires it.\nif (require.main === module) {\n  // Only listen if this file is run directly (not required as a module)\n  app.listen(PORT, function () {\n    console.log(\"Server is running successfully on http://localhost:\".concat(PORT));\n  });\n} else {\n  // Export the app for testing purposes\n  module.exports = app;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","express","require","sqlite3","verbose","bcrypt","jwt","cors","path","csv","_require","Readable","rateLimit","morgan","process","env","NODE_ENV","config","stripeInstance","STRIPE_SECRET_KEY","app","allowedOrigins","CORS_ORIGIN","split","push","corsOptions","origin","callback","includes","msg","Error","indexOf","methods","credentials","optionsSuccessStatus","use","PORT","STRIPE_WEBHOOK_SECRET","authLimiter","windowMs","max","message","standardHeaders","legacyHeaders","post","raw","type","_ref","_callee","req","res","sig","event","session","userId","planId","subscriptionUpdated","subscriptionDeleted","invoiceSucceeded","invoiceFailed","_t","_t2","_context","headers","webhooks","constructEvent","body","console","error","concat","status","send","data","object","log","id","metadata","payment_status","db","run","customer","subscription","err","plan","json","received","_x","_x2","JWT_SECRET","join","__dirname","maxAge","immutable","Database","exit","get","serialize","authenticateToken","next","authHeader","token","verify","user","isValidEmail","email","test","_ref2","_callee2","_req$body","company_name","full_name","password","password_hash","_t3","_context2","trim","hash","newCompanyId","lastID","userInsertErr","_x3","_x4","_x5","_req$body2","_ref3","_callee3","isMatch","payload","_context3","compare","user_id","role","fullName","companyId","company_id","locationId","location_id","subscriptionStatus","subscription_status","plan_id","sign","expiresIn","_x6","_x7","_ref4","_callee4","_req$body3","_req$user","_t4","_context4","location","_x8","_x9","_x0","_ref5","_callee5","_req$body4","position","employee_id","_req$user2","currentUserLocationId","isLocationIdValid","locationVerification","_t5","_context5","isNaN","undefined","reject","_x1","_x10","_x11","_req$user3","put","_ref6","_callee7","_req$body5","currentPassword","newPassword","_context7","_ref7","_callee6","updateSql","updateParams","clauses","changesMade","existingUser","newPasswordHash","_t6","_context6","row","updateErr","changes","fetchErr","updatedUser","newPayload","newToken","_x15","_x16","_x12","_x13","_x14","_req$user4","sql","params","all","rows","_req$body6","location_name","location_address","_req$user5","_req$user6","parseInt","_req$user7","currentUserId","_req$query","query","filterRole","filterLocationId","allowedRoles","_req$user8","authenticatedUserId","_ref8","_callee8","_req$user9","allowedPlanIds","priceIdMap","stripePriceId","customerId","userRecord","_t7","_context8","STRIPE_PRICE_ID_PRO","STRIPE_PRICE_ID_ENT","stripe_customer_id","customers","checkout","sessions","mode","line_items","price","quantity","success_url","FRONTEND_URL","cancel_url","url","_x17","_x18","_x19","_req$body7","start_time","end_time","notes","_req$user0","Date","getTime","employee","insertErr","scheduleId","_req$query2","start_date","end_date","_req$user1","_req$user10","_req$body8","title","description","requirements","_req$user11","created_date","toISOString","jobPostingId","_req$query3","_req$user12","allowedStatuses","_req$body9","_req$user13","_req$user14","_req$body0","job_posting_id","phone_number","_req$user15","application_date","jobPosting","applicantId","_req$query4","_req$user16","_req$body1","resume_url","_req$user17","job","_req$user18","_req$body10","file_name","file_type","file_url","_req$user19","upload_date","urlRegex","documentId","_req$user20","_req$user21","sendFile","stack","main","module","listen","exports"],"sourceRoot":"C:\\Users\\xarcy\\OneDrive\\Desktop\\onboardflow\\backend\\","sources":["server.js"],"sourcesContent":["// --- Imports ---\r\nconst express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors'); // Import cors\r\nconst path = require('path');\r\nconst csv = require('csv-parser'); // For CSV parsing\r\nconst { Readable } = require('stream'); // For creating a readable stream from a string\r\nconst rateLimit = require('express-rate-limit'); // Import rate-limiting middleware\r\nconst morgan = require('morgan'); // Import morgan for request logging\r\n\r\n// Load environment variables from .env file in development\r\nif (process.env.NODE_ENV !== 'production') {\r\n    require('dotenv').config();\r\n}\r\n\r\n// Import the Stripe library and initialize it with your secret key\r\n// Use process.env.STRIPE_SECRET_KEY for production\r\nconst stripeInstance = require('stripe')(process.env.STRIPE_SECRET_KEY || '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');\r\n\r\n// --- App Initialization ---\r\nconst app = express();\r\n\r\n// Configure CORS for production environment\r\nconst allowedOrigins = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : ['http://localhost:8000']; // Default to localhost for development\r\n\r\n// Add 'null' to allowed origins if not in production and not explicitly set for local file access\r\nif (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN) {\r\n    allowedOrigins.push('null');\r\n}\r\n\r\nconst corsOptions = {\r\n    origin: function (origin, callback) {\r\n        // Allow requests with no origin (like mobile apps, curl, or local file access if 'null' is in allowedOrigins)\r\n        if (!origin) {\r\n            // Check if 'null' is explicitly allowed or if we're in dev and no CORS_ORIGIN is set\r\n            if (allowedOrigins.includes('null') || (process.env.NODE_ENV !== 'production' && !process.env.CORS_ORIGIN)) {\r\n                return callback(null, true);\r\n            }\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n\r\n        if (allowedOrigins.indexOf(origin) === -1) {\r\n            const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\r\n            return callback(new Error(msg), false);\r\n        }\r\n        return callback(null, true);\r\n    },\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Allow cookies to be sent\r\n    optionsSuccessStatus: 204 // Some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n\r\n// Use process.env.PORT for production, fallback to 3000 for local development\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Define a webhook secret for Stripe. This should also be an environment variable.\r\nconst STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || 'whsec_YOUR_WEBHOOK_SECRET';\r\n\r\n// --- Rate Limiting Configuration ---\r\nconst authLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 10, // Max 10 requests per 15 minutes per IP\r\n    message: 'Too many login/registration attempts from this IP, please try again after 15 minutes',\r\n    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\n// --- Middleware for Stripe Webhook (MUST be before express.json() for other routes) ---\r\n// This route needs the raw body for signature verification.\r\napp.post('/api/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {\r\n    const sig = req.headers['stripe-signature'];\r\n\r\n    let event;\r\n\r\n    try {\r\n        event = stripeInstance.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n    } catch (err) {\r\n        console.error(`Webhook Error: ${err.message}`);\r\n        return res.status(400).send(`Webhook Error: ${err.message}`);\r\n    }\r\n\r\n    // Handle the event\r\n    switch (event.type) {\r\n        case 'checkout.session.completed':\r\n            const session = event.data.object;\r\n            console.log('Checkout Session Completed:', session.id);\r\n            const userId = session.metadata.userId;\r\n            const planId = session.metadata.planId;\r\n            if (session.payment_status === 'paid' && userId && planId) {\r\n                db.run(\r\n                    'UPDATE Users SET stripe_customer_id = ?, stripe_subscription_id = ?, subscription_status = ?, plan_id = ? WHERE user_id = ?',\r\n                    [session.customer, session.subscription, 'active', planId, userId],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for checkout.session.completed:', err.message);\r\n                        else console.log(`User ${userId} subscription updated to ${planId} (active).`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.updated':\r\n            const subscriptionUpdated = event.data.object;\r\n            console.log('Subscription Updated:', subscriptionUpdated.id);\r\n            if (subscriptionUpdated.customer && subscriptionUpdated.status && subscriptionUpdated.plan && subscriptionUpdated.plan.id) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ? WHERE stripe_customer_id = ?',\r\n                    [subscriptionUpdated.status, subscriptionUpdated.plan.id, subscriptionUpdated.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.updated:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionUpdated.customer} status updated to ${subscriptionUpdated.status} and plan to ${subscriptionUpdated.plan.id}.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'customer.subscription.deleted':\r\n            const subscriptionDeleted = event.data.object;\r\n            console.log('Subscription Deleted:', subscriptionDeleted.id);\r\n            if (subscriptionDeleted.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ?, plan_id = ?, stripe_subscription_id = NULL WHERE stripe_customer_id = ?',\r\n                    ['cancelled', 'free', subscriptionDeleted.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for customer.subscription.deleted:', err.message);\r\n                        else console.log(`Subscription for customer ${subscriptionDeleted.customer} marked as cancelled and reverted to free.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_succeeded':\r\n            const invoiceSucceeded = event.data.object;\r\n            console.log('Invoice Payment Succeeded:', invoiceSucceeded.id);\r\n            if (invoiceSucceeded.subscription && invoiceSucceeded.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['active', invoiceSucceeded.subscription, invoiceSucceeded.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_succeeded:', err.message);\r\n                        else console.log(`Subscription ${invoiceSucceeded.subscription} status set to active.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        case 'invoice.payment_failed':\r\n            const invoiceFailed = event.data.object;\r\n            console.log('Invoice Payment Failed:', invoiceFailed.id);\r\n            if (invoiceFailed.subscription && invoiceFailed.customer) {\r\n                db.run(\r\n                    'UPDATE Users SET subscription_status = ? WHERE stripe_subscription_id = ? AND stripe_customer_id = ?',\r\n                    ['past_due', invoiceFailed.subscription, invoiceFailed.customer],\r\n                    function(err) {\r\n                        if (err) console.error('Database update error for invoice.payment_failed:', err.message);\r\n                        else console.log(`Subscription ${invoiceFailed.subscription} status set to past_due.`);\r\n                    }\r\n                );\r\n            }\r\n            break;\r\n        default:\r\n            console.log(`Unhandled event type ${event.type}`);\r\n    }\r\n    res.status(200).json({ received: true });\r\n});\r\n\r\n// IMPORTANT: express.json() for parsing JSON request bodies MUST come AFTER the webhook route\r\napp.use(express.json());\r\n\r\n// --- JWT Secret ---\r\n// Use process.env.JWT_SECRET for production\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-and-long-string-for-jwt';\r\n\r\n// --- Request Logging (using Morgan) ---\r\n// 'dev' format is good for development, 'combined' or 'tiny' for production logs\r\napp.use(morgan('dev'));\r\n\r\n// --- Serve Static Files (Frontend) with Caching ---\r\n// This middleware serves static files from the 'onboardflow' root directory\r\n// and sets Cache-Control headers for browser caching.\r\napp.use(express.static(path.join(__dirname, '..'), {\r\n    maxAge: '7d', // Cache static assets for 7 days (e.g., CSS, JS, images, favicon)\r\n    immutable: false // Set to true if asset filenames include content hashes (e.g., app.min.js?v=hash)\r\n}));\r\n\r\n// --- Database Setup ---\r\nconst db = new sqlite3.Database('./onboardflow.db', (err) => {\r\n    if (err) {\r\n        // Log database connection error and exit\r\n        console.error(\"Error opening database:\", err.message);\r\n        process.exit(1); // Exit process if database connection fails\r\n    } else {\r\n        console.log(\"Successfully connected to the database.\");\r\n        db.get(\"PRAGMA foreign_keys = ON\");\r\n        db.serialize(() => {\r\n            db.run(`CREATE TABLE IF NOT EXISTS Companies (company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Locations (location_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER, location_name TEXT NOT NULL, location_address TEXT NOT NULL, FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE)`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Users (\r\n                user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER,\r\n                location_id INTEGER,\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL UNIQUE,\r\n                password_hash TEXT NOT NULL,\r\n                position TEXT,\r\n                employee_id TEXT,\r\n                role TEXT NOT NULL,\r\n                stripe_customer_id TEXT,\r\n                stripe_subscription_id TEXT,\r\n                subscription_status TEXT,\r\n                plan_id TEXT,\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            db.run(`CREATE TABLE IF NOT EXISTS Schedules (\r\n                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                employee_id INTEGER NOT NULL,\r\n                location_id INTEGER NOT NULL,\r\n                start_time TEXT NOT NULL,\r\n                end_time TEXT NOT NULL,\r\n                notes TEXT,\r\n                FOREIGN KEY (employee_id) REFERENCES Users(user_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // NEW: Create JobPostings table\r\n            db.run(`CREATE TABLE IF NOT EXISTS JobPostings (\r\n                job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: link job posting to a specific location\r\n                title TEXT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                requirements TEXT, -- Optional: job requirements\r\n                status TEXT NOT NULL DEFAULT 'Open', -- e.g., 'Open', 'Closed', 'Filled'\r\n                created_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE\r\n            )`);\r\n            // Update Applicants table schema to link to JobPostings and add phone_number\r\n            db.run(`CREATE TABLE IF NOT EXISTS Applicants (\r\n                applicant_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                location_id INTEGER, -- Optional: applicant's preferred location or location applied for\r\n                job_posting_id INTEGER, -- NEW: Link to JobPostings table\r\n                full_name TEXT NOT NULL,\r\n                email TEXT NOT NULL,\r\n                phone_number TEXT, -- NEW: Phone number field\r\n                status TEXT NOT NULL DEFAULT 'Applied', -- e.g., 'Applied', 'Interviewing', 'Rejected', 'Hired'\r\n                resume_url TEXT, -- Optional: URL to a resume document (e.g., hosted on cloud storage)\r\n                notes TEXT,\r\n                application_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (job_posting_id) REFERENCES JobPostings(job_posting_id) ON DELETE SET NULL -- If job posting is deleted, set this to NULL\r\n            )`);\r\n            // NEW: Create Documents table for file/video uploads\r\n            db.run(`CREATE TABLE IF NOT EXISTS Documents (\r\n                document_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                company_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL, -- User who uploaded the document\r\n                title TEXT NOT NULL,\r\n                file_name TEXT NOT NULL,\r\n                file_type TEXT NOT NULL,\r\n                file_url TEXT NOT NULL, -- URL to the stored file (e.g., S3, GCS)\r\n                description TEXT,\r\n                upload_date TEXT NOT NULL, -- ISO 8601 format\r\n                FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE\r\n            )`);\r\n        });\r\n    }\r\n});\r\n\r\n// --- Authentication Middleware ---\r\nfunction authenticateToken(req, res, next) {\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1];\r\n    if (token == null) {\r\n        return res.status(401).json({ error: 'Unauthorized: No token provided.' });\r\n    }\r\n    jwt.verify(token, JWT_SECRET, (err, user) => {\r\n        if (err) {\r\n            // Log the specific JWT error for debugging\r\n            console.error(\"JWT Verification Error:\", err.message);\r\n            return res.status(403).json({ error: 'Forbidden: Invalid or expired token.' });\r\n        }\r\n        req.user = user;\r\n        next();\r\n    });\r\n}\r\n\r\n// --- Helper for Input Validation ---\r\nconst isValidEmail = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\n// --- API Routes (ALL API ROUTES SHOULD BE DEFINED HERE, BEFORE STATIC FILE SERVING) ---\r\n\r\n// Apply rate limiting to authentication routes\r\napp.post('/api/register', authLimiter, async (req, res, next) => { // Added 'next'\r\n    const { company_name, full_name, email, password } = req.body;\r\n\r\n    // Input Validation for Registration\r\n    if (!company_name || typeof company_name !== 'string' || company_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Company name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Password is required and must be at least 6 characters long.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.serialize(() => {\r\n            db.run('BEGIN TRANSACTION');\r\n            db.run('INSERT INTO Companies (company_name) VALUES (?)', [company_name], function(err) {\r\n                if (err) { \r\n                    db.run('ROLLBACK'); \r\n                    console.error(\"Database error creating company:\", err);\r\n                    return next(new Error(\"Could not create company.\")); // Pass error to error handling middleware\r\n                }\r\n                const newCompanyId = this.lastID;\r\n                db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'super_admin', 'active', 'free')`, [newCompanyId, null, full_name, email, password_hash], function(userInsertErr) {\r\n                    if (userInsertErr) { \r\n                        db.run('ROLLBACK'); \r\n                        console.error(\"Database error creating user:\", userInsertErr);\r\n                        if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { \r\n                            return res.status(409).json({ error: 'Email already registered.' }); \r\n                        }\r\n                        return next(new Error(\"Could not create user.\")); // Pass error\r\n                    }\r\n                    db.run('COMMIT');\r\n                    res.status(201).json({ message: \"Company and user registered successfully!\", userId: this.lastID });\r\n                });\r\n            });\r\n        });\r\n    } catch (error) { \r\n        console.error(\"Registration error:\", error);\r\n        next(error); // Pass error to error handling middleware\r\n    }\r\n});\r\n\r\napp.post('/api/login', authLimiter, (req, res, next) => { // Added 'next'\r\n    const { email, password } = req.body;\r\n\r\n    // Input Validation for Login\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length === 0) {\r\n        return res.status(400).json({ error: \"Password is required.\" });\r\n    }\r\n\r\n    db.get(\"SELECT * FROM Users WHERE email = ?\", [email], async (err, user) => {\r\n        if (err) {\r\n            console.error(\"Database error during login:\", err);\r\n            return next(new Error(\"A server error occurred during login.\")); // Pass error\r\n        }\r\n        if (!user) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const isMatch = await bcrypt.compare(password, user.password_hash);\r\n        if (!isMatch) { \r\n            return res.status(401).json({ error: \"Invalid credentials.\" }); \r\n        }\r\n        const payload = { userId: user.user_id, email: user.email, role: user.role, fullName: user.full_name, companyId: user.company_id, locationId: user.location_id, subscriptionStatus: user.subscription_status, planId: user.plan_id };\r\n        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });\r\n        res.status(200).json({ message: \"Login successful!\", token, role: user.role });\r\n    });\r\n});\r\n\r\napp.post('/api/invite-admin', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { full_name, email, password, location_id } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Invite Admin\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can invite other admins.' }); }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) { // Assuming location_id is an integer ID\r\n        return res.status(400).json({ error: \"A valid location ID is required.\" });\r\n    }\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n        db.get('SELECT * FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error checking location:\", err); return next(new Error('Database error when verifying location.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' }); }\r\n            db.run(`INSERT INTO Users (company_id, location_id, full_name, email, password_hash, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, 'location_admin', 'active', 'free')`, [companyId, location_id, full_name, email, password_hash], function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting admin:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite admin.')); // Pass error\r\n                }\r\n                res.status(201).json({ message: \"Location admin invited successfully!\", userId: this.lastID });\r\n            });\r\n        });\r\n    } catch (error) { console.error(\"Invite admin error:\", error); next(error); } // Pass error\r\n});\r\n\r\n// NEW: API endpoint for inviting employees\r\napp.post('/api/invite-employee', authenticateToken, async (req, res, next) => {\r\n    const { full_name, email, password, position, employee_id, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Authorization: Super admin can invite anyone, Location admin can only invite to their location or unassigned\r\n    if (!['super_admin', 'location_admin'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can invite employees.' });\r\n    }\r\n\r\n    // Input Validation for Invite Employee\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    if (!password || typeof password !== 'string' || password.length < 6) {\r\n        return res.status(400).json({ error: \"Temporary password is required and must be at least 6 characters long.\" });\r\n    }\r\n    \r\n    // Corrected location_id validation: Must be a number > 0.\r\n    // If location_id is null, it indicates an unassigned location, which is valid for a super admin.\r\n    // For location_admin, it must match their current location.\r\n    // This revised logic correctly checks for null OR a valid positive integer.\r\n    const isLocationIdValid = location_id === null || (typeof location_id === 'number' && !isNaN(location_id) && location_id > 0);\r\n    if (!isLocationIdValid) {\r\n        return res.status(400).json({ error: \"A valid location ID (positive number) is required for employee, or null for unassigned.\" });\r\n    }\r\n    \r\n    if (position !== undefined && typeof position !== 'string') {\r\n        return res.status(400).json({ error: 'Position must be a string if provided.' });\r\n    }\r\n    if (employee_id !== undefined && typeof employee_id !== 'string') {\r\n        return res.status(400).json({ error: 'Employee ID must be a string if provided.' });\r\n    }\r\n\r\n    // Location Admin specific check: ensure they are inviting to their assigned location or null\r\n    // If location_admin tries to set a location that is NOT their own, block it.\r\n    // Allow location_admin to set to null if their current location is null.\r\n    if (role === 'location_admin') {\r\n        // A location admin can ONLY assign an employee to their own location or to null (unassigned)\r\n        if (location_id !== currentUserLocationId) {\r\n            // If the target location_id is not the current user's location, check if both are null\r\n            if (!(location_id === null && currentUserLocationId === null)) {\r\n                return res.status(403).json({ error: 'Access Denied: Location admin can only invite employees to their assigned location.' });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    try {\r\n        const password_hash = await bcrypt.hash(password, 10);\r\n\r\n        // Verify the location_id belongs to the company and, if location_admin, matches their assigned location\r\n        // This check is crucial if location_id is NOT null\r\n        if (location_id !== null) {\r\n            const locationVerification = await new Promise((resolve, reject) => {\r\n                db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n                    if (err) reject(err);\r\n                    resolve(location);\r\n                });\r\n            });\r\n            if (!locationVerification) {\r\n                return res.status(400).json({ error: 'Selected location does not exist or does not belong to your company.' });\r\n            }\r\n        }\r\n\r\n        db.run(\r\n            `INSERT INTO Users (company_id, location_id, full_name, email, password_hash, position, employee_id, role, subscription_status, plan_id) VALUES (?, ?, ?, ?, ?, ?, ?, 'employee', 'active', 'free')`,\r\n            [companyId, location_id, full_name, email, password_hash, position, employee_id,], // Default new employees to 'employee' role\r\n            function(userInsertErr) {\r\n                if (userInsertErr) {\r\n                    console.error(\"Database error inviting employee:\", userInsertErr);\r\n                    if (userInsertErr.message.includes('UNIQUE constraint failed: Users.email')) { return res.status(409).json({ error: 'Email already registered.' }); }\r\n                    return next(new Error('Failed to invite employee.'));\r\n                }\r\n                res.status(201).json({ message: \"Employee invited successfully!\", userId: this.lastID });\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Invite employee error:\", error);\r\n        next(error);\r\n    }\r\n});\r\n\r\n\r\napp.get('/api/profile', authenticateToken, (req, res) => {\r\n    const { userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId } = req.user;\r\n    res.status(200).json({ userId, fullName, email, role, companyId, locationId, subscriptionStatus, planId });\r\n});\r\n\r\napp.put('/api/profile', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { fullName, email, currentPassword, newPassword } = req.body;\r\n    const { userId } = req.user;\r\n\r\n    // Input Validation for Profile Update\r\n    if (fullName === undefined && email === undefined && (!currentPassword || !newPassword)) {\r\n        return res.status(400).json({ error: 'No data provided for update.' });\r\n    }\r\n    if (fullName !== undefined && (typeof fullName !== 'string' || fullName.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (newPassword !== undefined && (typeof newPassword !== 'string' || newPassword.length < 6)) {\r\n        return res.status(400).json({ error: \"New password must be at least 6 characters long if changing password.\" });\r\n    }\r\n    if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {\r\n        return res.status(400).json({ error: 'Both current password and new password are required to change password.' });\r\n    }\r\n\r\n\r\n    db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], async (err, user) => {\r\n        if (err) { console.error(\"Database error fetching user for profile update:\", err); return next(new Error(\"Server error during profile update.\")); } // Pass error\r\n        if (!user) { return res.status(404).json({ error: \"User not found.\" }); }\r\n        let updateSql = 'UPDATE Users SET ';\r\n        const updateParams = [];\r\n        const clauses = [];\r\n        let changesMade = false;\r\n        if (fullName !== undefined && fullName !== user.full_name) {\r\n            clauses.push('full_name = ?');\r\n            updateParams.push(fullName);\r\n            changesMade = true;\r\n        }\r\n        if (email !== undefined && email !== user.email) {\r\n            try { // Added try-catch for async await in db.get\r\n                const existingUser = await new Promise((resolve, reject) => {\r\n                    db.get(\"SELECT user_id FROM Users WHERE email = ? AND user_id != ?\", [email, userId], (err, row) => {\r\n                        if (err) reject(err);\r\n                        resolve(row);\r\n                    });\r\n                });\r\n                if (existingUser) { return res.status(409).json({ error: 'Email already in use by another account.' }); }\r\n            } catch (dbErr) {\r\n                console.error(\"Database error checking existing email:\", dbErr);\r\n                return next(new Error(\"Server error verifying email availability.\"));\r\n            }\r\n            clauses.push('email = ?');\r\n            updateParams.push(email);\r\n            changesMade = true;\r\n        }\r\n        if (currentPassword && newPassword) {\r\n            const isMatch = await bcrypt.compare(currentPassword, user.password_hash);\r\n            if (!isMatch) { return res.status(401).json({ error: \"Current password incorrect.\" }); }\r\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\r\n            clauses.push('password_hash = ?');\r\n            updateParams.push(newPasswordHash);\r\n            changesMade = true;\r\n        }\r\n        if (!changesMade) { return res.status(200).json({ message: 'No changes detected. Profile remains the same.' }); }\r\n        updateSql += clauses.join(', ') + ' WHERE user_id = ?';\r\n        updateParams.push(userId);\r\n        db.run(updateSql, updateParams, function(updateErr) {\r\n            if (updateErr) { console.error(\"Database error updating profile:\", updateErr); return next(new Error('Failed to update profile.')); } // Pass error\r\n            if (this.changes > 0) {\r\n                db.get(\"SELECT * FROM Users WHERE user_id = ?\", [userId], (fetchErr, updatedUser) => {\r\n                    if (fetchErr || !updatedUser) { console.error(\"Error fetching updated user for new token:\", fetchErr); return res.status(200).json({ message: 'Profile updated successfully, but token could not be refreshed.' }); }\r\n                    const newPayload = { userId: updatedUser.user_id, email: updatedUser.email, role: updatedUser.role, fullName: updatedUser.full_name, companyId: updatedUser.company_id, locationId: updatedUser.location_id, subscriptionStatus: updatedUser.subscription_status, planId: user.plan_id };\r\n                    const newToken = jwt.sign(newPayload, JWT_SECRET, { expiresIn: '1h' });\r\n                    res.status(200).json({ message: 'Profile updated successfully!', token: newToken });\r\n                });\r\n            } else { res.status(200).json({ message: 'No changes applied as data was identical.' }); }\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role } = req.user;\r\n    let sql = 'SELECT location_id, location_name, location_address FROM Locations WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Allowing super_admin, location_admin, and employee to view all locations in their company for dropdowns/selection\r\n    if (!['super_admin', 'location_admin', 'employee'].includes(role)) {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view locations.' });\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching locations:\", err); return next(new Error('Database error fetching locations.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.post('/api/locations', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { location_name, location_address } = req.body;\r\n    const { companyId, role } = req.user;\r\n\r\n    // Input Validation for Create Location\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can create locations.' }); }\r\n    if (!location_name || typeof location_name !== 'string' || location_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Location name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!location_address || typeof location_address !== 'string' || location_address.trim() === '') {\r\n        return res.status(400).json({ error: \"Location address is required and must be a non-empty string.\" });\r\n    }\r\n\r\n    db.run('INSERT INTO Locations (company_id, location_name, location_address) VALUES (?, ?, ?)', [companyId, location_name, location_address], function(err) {\r\n        if (err) { console.error(\"Database error creating location:\", err); return next(new Error('Failed to create location.')); } // Pass error\r\n        res.status(201).json({ message: 'Location created!', locationId: this.lastID });\r\n    });\r\n});\r\n\r\napp.delete('/api/locations/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete locations.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Locations WHERE location_id = ? AND company_id = ?', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting location:\", err); return next(new Error('Failed to delete location.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Location not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.get('/api/users', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n    const { filterRole, filterLocationId } = req.query;\r\n\r\n    let sql = `SELECT Users.user_id, Users.full_name, Users.email, Users.role, Locations.location_name\r\n               FROM Users\r\n               LEFT JOIN Locations ON Users.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'super_admin') {\r\n        // Super admin can view all users in their company.\r\n    } else if (role === 'location_admin') {\r\n        // Location admin can view all users within their assigned location, plus unassigned users for their company.\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Users.location_id = ? OR Users.location_id IS NULL)`; // Admins might need to see unassigned users\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view users.' });\r\n    }\r\n\r\n    // Input validation for filterRole and filterLocationId\r\n    const allowedRoles = ['super_admin', 'location_admin', 'employee'];\r\n    if (filterRole && (!allowedRoles.includes(filterRole) || (role === 'location_admin' && filterRole === 'super_admin'))) {\r\n        return res.status(400).json({ error: 'Invalid filter role provided or insufficient permissions to filter by this role.' });\r\n    }\r\n    if (filterLocationId && isNaN(parseInt(filterLocationId))) {\r\n        return res.status(400).json({ error: 'Invalid filter location ID provided.' });\r\n    }\r\n\r\n\r\n    if (filterRole) {\r\n        if (role === 'super_admin' || (role === 'location_admin' && (filterRole === 'employee' || filterRole === 'location_admin')) || (role === 'employee' && filterRole === 'employee')) {\r\n            sql += ` AND Users.role = ?`;\r\n            params.push(filterRole);\r\n        } else {\r\n            // This case should ideally be caught by the earlier validation for allowedRoles, but for defense-in-depth:\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by role.' });\r\n        }\r\n    }\r\n    if (filterLocationId) {\r\n        // Ensure location_admin can only filter by their own location\r\n        if (role === 'super_admin' || (role === 'location_admin' && parseInt(filterLocationId) === currentUserLocationId)) {\r\n            sql += ` AND Users.location_id = ?`;\r\n            params.push(filterLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Insufficient permissions to filter by location.' });\r\n        }\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching users:\", err); return next(new Error('Database error fetching users.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/users/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: authenticatedUserId } = req.user;\r\n    if (role !== 'super_admin') { return res.status(403).json({ error: 'Access Denied: Only super admins can delete users.' }); }\r\n    if (parseInt(id) === authenticatedUserId) { return res.status(403).json({ error: 'Cannot delete your own super admin account via this interface.' }); }\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid user ID provided.' });\r\n    }\r\n\r\n    db.run('DELETE FROM Users WHERE user_id = ? AND company_id = ? AND role != \\'super_admin\\'', [id, companyId], function(err) {\r\n        if (err) { console.error(\"Database error deleting user:\", err); return next(new Error('Failed to delete user.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'User not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\napp.post('/api/create-checkout-session', authenticateToken, async (req, res, next) => { // Added 'next'\r\n    const { planId } = req.body;\r\n    const { userId, email, companyId } = req.user;\r\n\r\n    // Input Validation for planId\r\n    const allowedPlanIds = ['pro', 'enterprise'];\r\n    if (!planId || !allowedPlanIds.includes(planId)) {\r\n        return res.status(400).json({ error: 'Invalid plan ID provided.' });\r\n    }\r\n\r\n    const priceIdMap = {\r\n        'pro': process.env.STRIPE_PRICE_ID_PRO,       // Use environment variable\r\n        'enterprise': process.env.STRIPE_PRICE_ID_ENT // Use environment variable\r\n    };\r\n    const stripePriceId = priceIdMap[planId];\r\n    if (!stripePriceId) { return res.status(500).json({ error: 'Stripe price ID not configured for this plan.' }); } // Changed from 400 to 500 as this is a server-side config issue\r\n    try {\r\n        let customerId;\r\n        const userRecord = await new Promise((resolve, reject) => {\r\n            db.get('SELECT stripe_customer_id FROM Users WHERE user_id = ?', [userId], (err, row) => {\r\n                if (err) reject(err);\r\n                resolve(row);\r\n            });\r\n        });\r\n        if (userRecord && userRecord.stripe_customer_id) {\r\n            customerId = userRecord.stripe_customer_id;\r\n        } else {\r\n            const customer = await stripeInstance.customers.create({ email: email, metadata: { userId: userId, companyId: companyId, }, });\r\n            customerId = customer.id;\r\n            db.run('UPDATE Users SET stripe_customer_id = ? WHERE user_id = ?', [customerId, userId], (err) => {\r\n                if (err) console.error('Failed to save Stripe customer ID to DB:', err);\r\n            });\r\n        }\r\n        const session = await stripeInstance.checkout.sessions.create({\r\n            customer: customerId,\r\n            mode: 'subscription',\r\n            line_items: [{ price: stripePriceId, quantity: 1, }, ],\r\n            // Use environment variables for success/cancel URLs, or relative paths if handled client-side\r\n            success_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/suite-hub.html?payment=success&session_id={CHECKOUT_SESSION_ID}`,\r\n            cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:8000'}/pricing.html?payment=cancelled`,\r\n            metadata: { userId: userId, planId: planId, },\r\n        });\r\n        res.status(200).json({ url: session.url });\r\n    } catch (error) { console.error('Error creating Stripe Checkout Session:', error); next(error); } // Pass error\r\n});\r\n\r\napp.post('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_time, end_time, notes } = req.body;\r\n    const { companyId, role, userId: currentUserId } = req.user;\r\n\r\n    // Input Validation for Create Schedule\r\n    if (role !== 'super_admin' && role !== 'location_admin') { return res.status(403).json({ error: 'Access Denied: Only admins can create schedules.' }); }\r\n    if (typeof employee_id !== 'number' || employee_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid employee ID is required.' });\r\n    }\r\n    if (typeof location_id !== 'number' || location_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid location ID is required.' });\r\n    }\r\n    if (!start_time || !end_time || isNaN(new Date(start_time).getTime()) || isNaN(new Date(end_time).getTime())) {\r\n        return res.status(400).json({ error: 'Valid start and end times are required.' });\r\n    }\r\n    if (new Date(start_time) >= new Date(end_time)) {\r\n        return res.status(400).json({ error: 'Start time must be before end time.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.get('SELECT user_id FROM Users WHERE user_id = ? AND company_id = ?', [employee_id, companyId], (err, employee) => {\r\n        if (err) { console.error(\"Database error verifying employee:\", err); return next(new Error('Database error during employee verification.')); } // Pass error\r\n        if (!employee) { return res.status(400).json({ error: 'Employee not found in your company.' }); }\r\n        db.get('SELECT location_id FROM Locations WHERE location_id = ? AND company_id = ?', [location_id, companyId], (err, location) => {\r\n            if (err) { console.error(\"Database error verifying location:\", err); return next(new Error('Database error during location verification.')); } // Pass error\r\n            if (!location) { return res.status(400).json({ error: 'Location not found in your company.' }); }\r\n            db.run(\r\n                'INSERT INTO Schedules (employee_id, location_id, start_time, end_time, notes) VALUES (?, ?, ?, ?, ?)', [employee_id, location_id, start_time, end_time, notes],\r\n                function(insertErr) {\r\n                    if (insertErr) { console.error(\"Database error creating schedule:\", insertErr); return next(new Error('Failed to create schedule.')); } // Pass error\r\n                    res.status(201).json({ message: 'Schedule created successfully!', scheduleId: this.lastID });\r\n                }\r\n            );\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/api/schedules', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { employee_id, location_id, start_date, end_date } = req.query;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Schedules.*, Users.full_name AS employee_name, Users.email AS employee_email, Locations.location_name\r\n               FROM Schedules\r\n               JOIN Users ON Schedules.employee_id = Users.user_id\r\n               JOIN Locations ON Schedules.location_id = Locations.location_id\r\n               WHERE Users.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND Schedules.location_id = ?`;\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Users.user_id = ?`;\r\n        params.push(currentUserId);\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    if (employee_id && isNaN(parseInt(employee_id))) {\r\n        return res.status(400).json({ error: 'Invalid employee ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n    if (start_date && isNaN(new Date(start_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid start date filter provided.' });\r\n    }\r\n    if (end_date && isNaN(new Date(end_date).getTime())) {\r\n        return res.status(400).json({ error: 'Invalid end date filter provided.' });\r\n    }\r\n\r\n\r\n    if (employee_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(employee_id) === currentUserId) || (role === 'employee' && parseInt(employee_id) === currentUserId))) {\r\n        sql += ` AND Users.role = ?`;\r\n        params.push(filterRole); // This should be employee_id, not filterRole\r\n    }\r\n    if (location_id && (role === 'super_admin' || (role === 'location_admin' && parseInt(location_id) === currentUserLocationId))) {\r\n        sql += ` AND Schedules.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n    if (start_date) {\r\n        sql += ` AND Schedules.start_time >= ?`;\r\n        params.push(start_date);\r\n    }\r\n    if (end_date) {\r\n        sql += ` AND Schedules.end_time <= ?`;\r\n        params.push(end_date);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching schedules:\", err); return next(new Error('Database error fetching schedules.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\napp.delete('/api/schedules/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid schedule ID provided.' });\r\n    }\r\n\r\n    if (role === 'employee') {\r\n        return res.status(403).json({ error: 'Access Denied: Employees cannot delete schedules.' });\r\n    }\r\n\r\n    let sql = `DELETE FROM Schedules WHERE schedule_id = ?`;\r\n    const params = [id];\r\n\r\n    if (role === 'location_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE location_id = ? AND company_id = ?)`;\r\n        params.push(currentUserLocationId, companyId);\r\n    } else if (role === 'super_admin') {\r\n        sql += ` AND employee_id IN (SELECT user_id FROM Users WHERE company_id = ?)`;\r\n        params.push(companyId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting schedule:\", err); return next(new Error('Failed to delete schedule.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Schedule not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Hiring Routes ---\r\n\r\n/**\r\n * POST /api/job-postings\r\n * Creates a new job posting.\r\n * Requires super_admin or location_admin role.\r\n */\r\napp.post('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, description, requirements, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const created_date = new Date().toISOString(); // Current date/time for creation\r\n\r\n    // Input Validation for Create Job Posting\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can create job postings.' });\r\n    }\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: \"Job title is required and must be a non-empty string.\" });\r\n    }\r\n    if (!description || typeof description !== 'string' || description.trim() === '') {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) { // location_id can be null\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n    // If location_admin, ensure location_id matches their assigned location, or is null\r\n    // A location admin can only create job postings for their assigned location or company-wide if their location is null\r\n    if (role === 'location_admin' && location_id && location_id !== currentUserLocationId) {\r\n        return res.status(403).json({ error: 'Access Denied: Location admin can only post jobs for their assigned location.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO JobPostings (company_id, location_id, title, description, requirements, status, created_date) VALUES (?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, location_id, title, description, requirements, 'Open', created_date], // Default status to 'Open'\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error creating job posting:\", err);\r\n                return next(new Error('Failed to create job posting.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Job posting created successfully!', jobPostingId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/job-postings\r\n * Retrieves job postings.\r\n * Can filter by location_id and status.\r\n * Requires super_admin or location_admin.\r\n */\r\napp.get('/api/job-postings', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { status, location_id } = req.query;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = 'SELECT * FROM JobPostings WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Authorization: super_admin sees all, location_admin sees their location's postings\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ' AND (location_id = ? OR location_id IS NULL)'; // Location admin sees their location's postings or company-wide\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        // Employees generally shouldn't see job postings list via this admin API\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view job postings.' });\r\n    }\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled']; // Assuming these are your valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid job posting status filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n\r\n    if (status) {\r\n        sql += ' AND status = ?';\r\n        params.push(status);\r\n    }\r\n    // Only super admin can filter by any location_id beyond their own scope\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ' AND location_id = ?';\r\n        params.push(location_id);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching job postings:\", err); return next(new Error('Database error fetching job postings.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/job-postings/:id\r\n * Updates a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.put('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { title, description, requirements, status, location_id } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Job Posting Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update job postings.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n    if (title !== undefined && (typeof title !== 'string' || title.trim() === '')) {\r\n        return res.status(400).json({ error: 'Job title must be a non-empty string if provided.' });\r\n    }\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) {\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    const allowedStatuses = ['Open', 'Closed', 'Filled'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE JobPostings SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    if (title !== undefined) { clauses.push('title = ?'); updateParams.push(title); }\r\n    // Fix: Missing closing parenthesis for this condition\r\n    if (description !== undefined && (typeof description !== 'string' || description.trim() === '')) { // Line 1009\r\n        return res.status(400).json({ error: 'Description must be a non-empty string if provided.' });\r\n    }\r\n    if (requirements !== undefined && typeof requirements !== 'string') {\r\n        return res.status(400).json({ error: 'Requirements must be a string if provided.' });\r\n    }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    \r\n    // super_admin can change location_id. location_admin cannot change location_id or change to different location\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot change job posting location to another location.' });\r\n            }\r\n            // If location admin updates job posting, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE job_posting_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // Additional security for location_admin: ensure they only update their own location's postings\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned jobs too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating job posting:\", err); return next(new Error('Failed to update job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Job posting updated successfully!' });\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/job-postings/:id\r\n * Deletes a job posting.\r\n * Requires super_admin or location_admin (for their location's postings).\r\n */\r\napp.delete('/api/job-postings/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete job postings.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM JobPostings WHERE job_posting_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete their own location's postings\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting job posting:\", err); return next(new Error('Failed to delete job posting.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Job posting not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n\r\n// Update Applicant API endpoints to use job_posting_id\r\napp.post('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, full_name, email, notes, location_id, phone_number } = req.body; // Added phone_number\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n    const application_date = new Date().toISOString(); // Current date/time for application\r\n\r\n    // Input Validation for Adding Applicant\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can add applicants.' });\r\n    }\r\n    if (typeof job_posting_id !== 'number' || job_posting_id <= 0) {\r\n        return res.status(400).json({ error: 'A valid job posting ID is required.' });\r\n    }\r\n    if (!full_name || typeof full_name !== 'string' || full_name.trim() === '') {\r\n        return res.status(400).json({ error: \"Full name is required and must be a non-empty string.\" });\r\n    }\r\n    if (!email || !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address is required.\" });\r\n    }\r\n    // Basic phone number validation (simple check for non-empty string, could be more complex with regex)\r\n    if (!phone_number || typeof phone_number !== 'string' || phone_number.trim() === '') {\r\n        return res.status(400).json({ error: \"Phone number is required.\" });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    // Verify job_posting_id belongs to the company, and for location_admin, to their location\r\n    db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, jobPosting) => {\r\n        if (err) { console.error(\"Database error verifying job posting:\", err); return next(new Error('Database error when verifying job posting.')); } // Pass error\r\n        if (!jobPosting) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n        \r\n        // Location admin can only add applicants to jobs in their assigned location or unassigned jobs\r\n        if (role === 'location_admin' && jobPosting.location_id !== currentUserLocationId && jobPosting.location_id !== null) {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin cannot add applicants to jobs outside their assigned location.' });\r\n        }\r\n\r\n        db.run(\r\n            'INSERT INTO Applicants (company_id, location_id, job_posting_id, full_name, email, phone_number, notes, application_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n            [companyId, location_id || jobPosting.location_id, job_posting_id, full_name, email, phone_number, notes, application_date], // Use location_id from payload or job posting\r\n            function(insertErr) {\r\n                if (insertErr) { console.error(\"Database error creating applicant:\", insertErr); return next(new Error('Failed to create applicant.')); } // Pass error\r\n                res.status(201).json({ message: 'Applicant added successfully!', applicantId: this.lastID });\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\napp.get('/api/applicants', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { job_posting_id, status, location_id } = req.query; // Added job_posting_id, status, location_id filters\r\n    const { companyId, role, userId: currentUserId, locationId: currentUserLocationId } = req.user;\r\n\r\n    let sql = `SELECT Applicants.*, JobPostings.title AS job_title_name\r\n               FROM Applicants\r\n               LEFT JOIN JobPostings ON Applicants.job_posting_id = JobPostings.job_posting_id\r\n               WHERE Applicants.company_id = ?`;\r\n    const params = [companyId];\r\n\r\n    // Input validation for query parameters\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired']; // Define valid statuses\r\n    if (status && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid applicant status filter provided.' });\r\n    }\r\n    if (job_posting_id && isNaN(parseInt(job_posting_id))) {\r\n        return res.status(400).json({ error: 'Invalid job posting ID filter provided.' });\r\n    }\r\n    if (location_id && isNaN(parseInt(location_id))) {\r\n        return res.status(400).json({ error: 'Invalid location ID filter provided.' });\r\n    }\r\n\r\n    if (status) {\r\n        sql += ` AND Applicants.status = ?`;\r\n        params.push(status);\r\n    }\r\n\r\n    if (role === 'location_admin') {\r\n        if (currentUserLocationId) {\r\n            sql += ` AND (Applicants.location_id = ? OR Applicants.location_id IS NULL)`; // Location admin sees applicants for their location or unassigned\r\n            params.push(currentUserLocationId);\r\n        } else {\r\n            return res.status(403).json({ error: 'Access Denied: Location admin not assigned to a location.' });\r\n        }\r\n    } else if (role === 'employee') {\r\n        sql += ` AND Applicants.user_id = ?`;\r\n        params.push(currentUserId);\r\n    } else {\r\n        return res.status(403).json({ error: 'Access Denied: Insufficient permissions to view applicants.' });\r\n    }\r\n\r\n    // Apply job_posting_id filter if provided\r\n    if (job_posting_id) {\r\n        sql += ` AND Applicants.job_posting_id = ?`;\r\n        params.push(job_posting_id);\r\n    }\r\n    // Apply location filter from query params for super_admin\r\n    if (location_id && role === 'super_admin') {\r\n        sql += ` AND Applicants.location_id = ?`;\r\n        params.push(location_id);\r\n    }\r\n\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching applicants:\", err); return next(new Error('Database error fetching applicants.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * PUT /api/applicants/:id\r\n * Updates an applicant's details (e.g., status, notes).\r\n */\r\napp.put('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { full_name, email, status, resume_url, notes, location_id, job_posting_id, phone_number } = req.body;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Input Validation for Applicant Update\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can update applicant records.' });\r\n    }\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n    if (full_name !== undefined && (typeof full_name !== 'string' || full_name.trim() === '')) {\r\n        return res.status(400).json({ error: \"Full name must be a non-empty string if provided.\" });\r\n    }\r\n    if (email !== undefined && !isValidEmail(email)) {\r\n        return res.status(400).json({ error: \"A valid email address must be provided if changing email.\" });\r\n    }\r\n    if (phone_number !== undefined && (typeof phone_number !== 'string' || phone_number.trim() === '')) {\r\n        return res.status(400).json({ error: \"Phone number must be a non-empty string if provided.\" });\r\n    }\r\n    const allowedStatuses = ['Applied', 'Interviewing', 'Rejected', 'Hired'];\r\n    if (status !== undefined && !allowedStatuses.includes(status)) {\r\n        return res.status(400).json({ error: 'Invalid status provided.' });\r\n    }\r\n    if (resume_url !== undefined && typeof resume_url !== 'string') { // Assuming resume_url is a string URL\r\n        return res.status(400).json({ error: 'Resume URL must be a string if provided.' });\r\n    }\r\n    if (notes !== undefined && typeof notes !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n    if (location_id !== undefined && typeof location_id !== 'number' && location_id !== null) {\r\n        return res.status(400).json({ error: 'Location ID must be a number or null if provided.' });\r\n    }\r\n    if (job_posting_id !== undefined && typeof job_posting_id !== 'number' && job_posting_id !== null) {\r\n        return res.status(400).json({ error: 'Job posting ID must be a number or null if provided.' });\r\n    }\r\n\r\n\r\n    let updateSql = 'UPDATE Applicants SET ';\r\n    const updateParams = [];\r\n    const clauses = [];\r\n\r\n    // Fields that can be updated\r\n    if (full_name !== undefined) { clauses.push('full_name = ?'); updateParams.push(full_name); }\r\n    if (email !== undefined) { clauses.push('email = ?'); updateParams.push(email); }\r\n    if (phone_number !== undefined) { clauses.push('phone_number = ?'); updateParams.push(phone_number); }\r\n    if (status !== undefined) { clauses.push('status = ?'); updateParams.push(status); }\r\n    if (resume_url !== undefined) { clauses.push('resume_url = ?'); updateParams.push(resume_url); }\r\n    if (notes !== undefined) { clauses.push('notes = ?'); updateParams.push(notes); }\r\n    \r\n    // Admins can update location_id or job_posting_id, with restrictions for location_admin\r\n    if (location_id !== undefined) {\r\n        if (role === 'super_admin') {\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        } else if (role === 'location_admin') {\r\n            if (location_id !== currentUserLocationId && location_id !== null) { // location_id can be null (company-wide)\r\n                return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to another location.' });\r\n            }\r\n            // If location admin updates applicant location, and it's their location, or setting to null, it's allowed\r\n            clauses.push('location_id = ?'); updateParams.push(location_id);\r\n        }\r\n    }\r\n    if (job_posting_id !== undefined) {\r\n         if (role === 'super_admin') {\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        } else if (role === 'location_admin') {\r\n            // Verify new job_posting_id belongs to the location admin's assigned location or is company-wide\r\n            db.get('SELECT job_posting_id, location_id FROM JobPostings WHERE job_posting_id = ? AND company_id = ?', [job_posting_id, companyId], (err, job) => {\r\n                if (err) { console.error(\"DB error verifying job posting for update:\", err); return next(new Error('Database error verifying job posting.')); } // Pass error\r\n                if (!job) { return res.status(400).json({ error: 'Job Posting not found or does not belong to your company.' }); }\r\n                if (job.location_id !== null && job.location_id !== currentUserLocationId) {\r\n                    return res.status(403).json({ error: 'Access Denied: Location admin cannot assign applicants to jobs outside their assigned location.' });\r\n                }\r\n            });\r\n            clauses.push('job_posting_id = ?'); updateParams.push(job_posting_id);\r\n        }\r\n    }\r\n\r\n\r\n    if (clauses.length === 0) { return res.status(400).json({ error: 'No fields provided for update.' }); }\r\n\r\n    updateSql += clauses.join(', ') + ' WHERE applicant_id = ? AND company_id = ?';\r\n    updateParams.push(id, companyId);\r\n\r\n    // For location_admin, ensure they can only update applicants within their assigned location\r\n    if (role === 'location_admin') {\r\n        updateSql += ' AND (location_id = ? OR location_id IS NULL)'; // Allow updating unassigned applicants too\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(updateSql, updateParams, function(err) {\r\n        if (err) { console.error(\"Database error updating applicant:\", err); return next(new Error('Failed to update applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to update.' }); }\r\n        res.status(200).json({ message: 'Applicant updated successfully!' });\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * DELETE /api/applicants/:id\r\n * Deletes an applicant.\r\n * Requires super_admin or location_admin (for their location's applicants).\r\n */\r\napp.delete('/api/applicants/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, role, locationId: currentUserLocationId } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid applicant ID provided.' });\r\n    }\r\n\r\n    if (role !== 'super_admin' && role !== 'location_admin') {\r\n        return res.status(403).json({ error: 'Access Denied: Only admins can delete applicants.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Applicants WHERE applicant_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Additional security for location_admin: ensure they only delete applicants in their own location\r\n    if (role === 'location_admin') {\r\n        sql += ' AND (location_id = ? OR location_id IS NULL)';\r\n        params.push(currentUserLocationId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting applicant:\", err); return next(new Error('Failed to delete applicant.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Applicant not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// --- Document Management Routes ---\r\n\r\n/**\r\n * POST /api/documents\r\n * Uploads (saves metadata for) a new document.\r\n * Requires authenticated user.\r\n * Note: Actual file storage is assumed to be handled by a separate service (e.g., S3).\r\n * This endpoint only stores the metadata and a URL.\r\n */\r\napp.post('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { title, file_name, file_type, file_url, description } = req.body;\r\n    const { companyId, userId } = req.user;\r\n    const upload_date = new Date().toISOString();\r\n\r\n    // Input Validation for Document Upload\r\n    if (!title || typeof title !== 'string' || title.trim() === '') {\r\n        return res.status(400).json({ error: 'Document title is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_name || typeof file_name !== 'string' || file_name.trim() === '') {\r\n        return res.status(400).json({ error: 'File name is required and must be a non-empty string.' });\r\n    }\r\n    if (!file_type || typeof file_type !== 'string' || file_type.trim() === '') {\r\n        return res.status(400).json({ error: 'File type is required and must be a non-empty string.' });\r\n    }\r\n    // Basic URL validation: checks for http(s) protocol and some content. Can be more robust.\r\n    const urlRegex = /^https?:\\/\\/[^\\s$.?#].[^\\s]*$/i;\r\n    if (!file_url || typeof file_url !== 'string' || !urlRegex.test(file_url)) {\r\n        return res.status(400).json({ error: 'A valid file URL (starting with http or https) is required.' });\r\n    }\r\n    if (description !== undefined && typeof description !== 'string') {\r\n        return res.status(400).json({ error: 'Notes must be a string if provided.' });\r\n    }\r\n\r\n    db.run(\r\n        'INSERT INTO Documents (company_id, user_id, title, file_name, file_type, file_url, description, upload_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\r\n        [companyId, userId, title, file_name, file_type, file_url, description, upload_date],\r\n        function(err) {\r\n            if (err) {\r\n                console.error(\"Database error uploading document:\", err);\r\n                return next(new Error('Failed to upload document metadata.')); // Pass error\r\n            }\r\n            res.status(201).json({ message: 'Document metadata saved successfully!', documentId: this.lastID });\r\n        }\r\n    );\r\n});\r\n\r\n/**\r\n * GET /api/documents\r\n * Retrieves a list of documents for the company.\r\n * Filters can be added (e.g., by uploader, by type).\r\n * Requires authenticated user. Super admins can see all, others can see own documents.\r\n */\r\napp.get('/api/documents', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { companyId, userId, role } = req.user;\r\n    \r\n    let sql = 'SELECT * FROM Documents WHERE company_id = ?';\r\n    const params = [companyId];\r\n\r\n    // Non-super-admins only see their own documents\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.all(sql, params, (err, rows) => {\r\n        if (err) { console.error(\"Database error fetching documents:\", err); return next(new Error('Database error fetching documents.')); } // Pass error\r\n        res.json(rows);\r\n    });\r\n});\r\n\r\n/**\r\n * DELETE /api/documents/:id\r\n * Deletes a document record.\r\n * Requires super_admin or the user who uploaded it.\r\n */\r\napp.delete('/api/documents/:id', authenticateToken, (req, res, next) => { // Added 'next'\r\n    const { id } = req.params;\r\n    const { companyId, userId, role } = req.user;\r\n\r\n    // Validate ID parameter\r\n    if (!id || isNaN(parseInt(id))) {\r\n        return res.status(400).json({ error: 'Invalid document ID provided.' });\r\n    }\r\n\r\n    let sql = 'DELETE FROM Documents WHERE document_id = ? AND company_id = ?';\r\n    const params = [id, companyId];\r\n\r\n    // Only super_admin or the original uploader can delete\r\n    if (role !== 'super_admin') {\r\n        sql += ' AND user_id = ?';\r\n        params.push(userId);\r\n    }\r\n\r\n    db.run(sql, params, function(err) {\r\n        if (err) { console.error(\"Database error deleting document:\", err); return next(new Error('Failed to delete document.')); } // Pass error\r\n        if (this.changes === 0) { return res.status(404).json({ error: 'Document not found or not authorized to delete.' }); }\r\n        res.status(204).send();\r\n    });\r\n});\r\n\r\n// Fallback for any other GET request not handled by an API route (serves index.html for SPA behavior)\r\n// This should always be the LAST route in your Express app\r\napp.get(/'*'/, (req, res) => {\r\n    // Correctly serve the index.html from the parent directory\r\n    res.sendFile(path.join(__dirname, '..', 'index.html'));\r\n});\r\n\r\n// --- Global Error Handling Middleware ---\r\n// This should be the very last middleware in your Express app\r\napp.use((err, req, res, next) => {\r\n    console.error(`Unhandled Error: ${err.stack}`); // Log the full stack trace for debugging\r\n    // Respond with a generic error message for the client\r\n    res.status(500).json({\r\n        error: 'An unexpected server error occurred. Please try again later.',\r\n        // In development, you might send more details:\r\n        // message: err.message,\r\n        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n});\r\n\r\n// --- Server Start ---\r\n// This conditional export allows the app to be imported for testing\r\n// without starting the server listener when the test runner requires it.\r\nif (require.main === module) {\r\n    // Only listen if this file is run directly (not required as a module)\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is running successfully on http://localhost:${PORT}`);\r\n    });\r\n} else {\r\n    // Export the app for testing purposes\r\n    module.exports = app;\r\n}\r\n"],"mappings":";;0BACA,uKAAAA,CAAA,EAAAC,CAAA,EAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,WAAA,8BAAAC,EAAAN,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAE,CAAA,QAAAC,CAAA,GAAAL,CAAA,IAAAA,CAAA,CAAAM,SAAA,YAAAC,SAAA,GAAAP,CAAA,GAAAO,SAAA,EAAAC,CAAA,GAAAC,MAAA,CAAAC,MAAA,CAAAL,CAAA,CAAAC,SAAA,UAAAK,mBAAA,CAAAH,CAAA,uBAAAV,CAAA,EAAAE,CAAA,EAAAE,CAAA,QAAAE,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAI,CAAA,MAAAC,CAAA,GAAAX,CAAA,QAAAY,CAAA,OAAAC,CAAA,KAAAF,CAAA,KAAAb,CAAA,KAAAgB,CAAA,EAAApB,CAAA,EAAAqB,CAAA,EAAAC,CAAA,EAAAN,CAAA,EAAAM,CAAA,CAAAC,IAAA,CAAAvB,CAAA,MAAAsB,CAAA,WAAAA,EAAArB,CAAA,EAAAC,CAAA,WAAAM,CAAA,GAAAP,CAAA,EAAAQ,CAAA,MAAAG,CAAA,GAAAZ,CAAA,EAAAmB,CAAA,CAAAf,CAAA,GAAAF,CAAA,EAAAmB,CAAA,gBAAAC,EAAApB,CAAA,EAAAE,CAAA,SAAAK,CAAA,GAAAP,CAAA,EAAAU,CAAA,GAAAR,CAAA,EAAAH,CAAA,OAAAiB,CAAA,IAAAF,CAAA,KAAAV,CAAA,IAAAL,CAAA,GAAAgB,CAAA,CAAAO,MAAA,EAAAvB,CAAA,UAAAK,CAAA,EAAAE,CAAA,GAAAS,CAAA,CAAAhB,CAAA,GAAAqB,CAAA,GAAAH,CAAA,CAAAF,CAAA,EAAAQ,CAAA,GAAAjB,CAAA,KAAAN,CAAA,QAAAI,CAAA,GAAAmB,CAAA,KAAArB,CAAA,MAAAQ,CAAA,GAAAJ,CAAA,EAAAC,CAAA,GAAAD,CAAA,YAAAC,CAAA,WAAAD,CAAA,MAAAA,CAAA,MAAAR,CAAA,IAAAQ,CAAA,OAAAc,CAAA,MAAAhB,CAAA,GAAAJ,CAAA,QAAAoB,CAAA,GAAAd,CAAA,QAAAC,CAAA,MAAAU,CAAA,CAAAC,CAAA,GAAAhB,CAAA,EAAAe,CAAA,CAAAf,CAAA,GAAAI,CAAA,OAAAc,CAAA,GAAAG,CAAA,KAAAnB,CAAA,GAAAJ,CAAA,QAAAM,CAAA,MAAAJ,CAAA,IAAAA,CAAA,GAAAqB,CAAA,MAAAjB,CAAA,MAAAN,CAAA,EAAAM,CAAA,MAAAJ,CAAA,EAAAe,CAAA,CAAAf,CAAA,GAAAqB,CAAA,EAAAhB,CAAA,cAAAH,CAAA,IAAAJ,CAAA,aAAAmB,CAAA,QAAAH,CAAA,OAAAd,CAAA,qBAAAE,CAAA,EAAAW,CAAA,EAAAQ,CAAA,QAAAT,CAAA,YAAAU,SAAA,uCAAAR,CAAA,UAAAD,CAAA,IAAAK,CAAA,CAAAL,CAAA,EAAAQ,CAAA,GAAAhB,CAAA,GAAAQ,CAAA,EAAAL,CAAA,GAAAa,CAAA,GAAAxB,CAAA,GAAAQ,CAAA,OAAAT,CAAA,GAAAY,CAAA,MAAAM,CAAA,KAAAV,CAAA,KAAAC,CAAA,GAAAA,CAAA,QAAAA,CAAA,SAAAU,CAAA,CAAAf,CAAA,QAAAkB,CAAA,CAAAb,CAAA,EAAAG,CAAA,KAAAO,CAAA,CAAAf,CAAA,GAAAQ,CAAA,GAAAO,CAAA,CAAAC,CAAA,GAAAR,CAAA,aAAAI,CAAA,MAAAR,CAAA,QAAAC,CAAA,KAAAH,CAAA,YAAAL,CAAA,GAAAO,CAAA,CAAAF,CAAA,WAAAL,CAAA,GAAAA,CAAA,CAAA0B,IAAA,CAAAnB,CAAA,EAAAI,CAAA,UAAAc,SAAA,2CAAAzB,CAAA,CAAA2B,IAAA,SAAA3B,CAAA,EAAAW,CAAA,GAAAX,CAAA,CAAA4B,KAAA,EAAApB,CAAA,SAAAA,CAAA,oBAAAA,CAAA,KAAAR,CAAA,GAAAO,CAAA,eAAAP,CAAA,CAAA0B,IAAA,CAAAnB,CAAA,GAAAC,CAAA,SAAAG,CAAA,GAAAc,SAAA,uCAAApB,CAAA,gBAAAG,CAAA,OAAAD,CAAA,GAAAR,CAAA,cAAAC,CAAA,IAAAiB,CAAA,GAAAC,CAAA,CAAAf,CAAA,QAAAQ,CAAA,GAAAV,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,EAAAe,CAAA,OAAAE,CAAA,kBAAApB,CAAA,IAAAO,CAAA,GAAAR,CAAA,EAAAS,CAAA,MAAAG,CAAA,GAAAX,CAAA,cAAAe,CAAA,mBAAAa,KAAA,EAAA5B,CAAA,EAAA2B,IAAA,EAAAV,CAAA,SAAAhB,CAAA,EAAAI,CAAA,EAAAE,CAAA,QAAAI,CAAA,QAAAS,CAAA,gBAAAV,UAAA,cAAAmB,kBAAA,cAAAC,2BAAA,KAAA9B,CAAA,GAAAY,MAAA,CAAAmB,cAAA,MAAAvB,CAAA,MAAAL,CAAA,IAAAH,CAAA,CAAAA,CAAA,IAAAG,CAAA,SAAAW,mBAAA,CAAAd,CAAA,OAAAG,CAAA,iCAAAH,CAAA,GAAAW,CAAA,GAAAmB,0BAAA,CAAArB,SAAA,GAAAC,SAAA,CAAAD,SAAA,GAAAG,MAAA,CAAAC,MAAA,CAAAL,CAAA,YAAAO,EAAAhB,CAAA,WAAAa,MAAA,CAAAoB,cAAA,GAAApB,MAAA,CAAAoB,cAAA,CAAAjC,CAAA,EAAA+B,0BAAA,KAAA/B,CAAA,CAAAkC,SAAA,GAAAH,0BAAA,EAAAhB,mBAAA,CAAAf,CAAA,EAAAM,CAAA,yBAAAN,CAAA,CAAAU,SAAA,GAAAG,MAAA,CAAAC,MAAA,CAAAF,CAAA,GAAAZ,CAAA,WAAA8B,iBAAA,CAAApB,SAAA,GAAAqB,0BAAA,EAAAhB,mBAAA,CAAAH,CAAA,iBAAAmB,0BAAA,GAAAhB,mBAAA,CAAAgB,0BAAA,iBAAAD,iBAAA,GAAAA,iBAAA,CAAAK,WAAA,wBAAApB,mBAAA,CAAAgB,0BAAA,EAAAzB,CAAA,wBAAAS,mBAAA,CAAAH,CAAA,GAAAG,mBAAA,CAAAH,CAAA,EAAAN,CAAA,gBAAAS,mBAAA,CAAAH,CAAA,EAAAR,CAAA,iCAAAW,mBAAA,CAAAH,CAAA,8DAAAwB,YAAA,YAAAA,aAAA,aAAAC,CAAA,EAAA7B,CAAA,EAAA8B,CAAA,EAAAtB,CAAA;AAAA,SAAAD,oBAAAf,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA,QAAAO,CAAA,GAAAK,MAAA,CAAA0B,cAAA,QAAA/B,CAAA,uBAAAR,CAAA,IAAAQ,CAAA,QAAAO,mBAAA,YAAAyB,mBAAAxC,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA,QAAAC,CAAA,EAAAM,CAAA,GAAAA,CAAA,CAAAR,CAAA,EAAAE,CAAA,IAAA2B,KAAA,EAAAzB,CAAA,EAAAqC,UAAA,GAAAxC,CAAA,EAAAyC,YAAA,GAAAzC,CAAA,EAAA0C,QAAA,GAAA1C,CAAA,MAAAD,CAAA,CAAAE,CAAA,IAAAE,CAAA,YAAAE,CAAA,YAAAA,EAAAJ,CAAA,EAAAE,CAAA,IAAAW,mBAAA,CAAAf,CAAA,EAAAE,CAAA,YAAAF,CAAA,gBAAA4C,OAAA,CAAA1C,CAAA,EAAAE,CAAA,EAAAJ,CAAA,UAAAM,CAAA,aAAAA,CAAA,cAAAA,CAAA,oBAAAS,mBAAA,CAAAf,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA;AAAA,SAAA4C,mBAAAzC,CAAA,EAAAH,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAI,CAAA,EAAAe,CAAA,EAAAZ,CAAA,cAAAD,CAAA,GAAAJ,CAAA,CAAAiB,CAAA,EAAAZ,CAAA,GAAAG,CAAA,GAAAJ,CAAA,CAAAqB,KAAA,WAAAzB,CAAA,gBAAAJ,CAAA,CAAAI,CAAA,KAAAI,CAAA,CAAAoB,IAAA,GAAA3B,CAAA,CAAAW,CAAA,IAAAkC,OAAA,CAAAC,OAAA,CAAAnC,CAAA,EAAAoC,IAAA,CAAA9C,CAAA,EAAAI,CAAA;AAAA,SAAA2C,kBAAA7C,CAAA,6BAAAH,CAAA,SAAAD,CAAA,GAAAkD,SAAA,aAAAJ,OAAA,WAAA5C,CAAA,EAAAI,CAAA,QAAAe,CAAA,GAAAjB,CAAA,CAAA+C,KAAA,CAAAlD,CAAA,EAAAD,CAAA,YAAAoD,MAAAhD,CAAA,IAAAyC,kBAAA,CAAAxB,CAAA,EAAAnB,CAAA,EAAAI,CAAA,EAAA8C,KAAA,EAAAC,MAAA,UAAAjD,CAAA,cAAAiD,OAAAjD,CAAA,IAAAyC,kBAAA,CAAAxB,CAAA,EAAAnB,CAAA,EAAAI,CAAA,EAAA8C,KAAA,EAAAC,MAAA,WAAAjD,CAAA,KAAAgD,KAAA;AADA;AACA,IAAME,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACE,OAAO,CAAC,CAAC;AAC5C,IAAMC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,IAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACnC,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B,IAAMM,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAMO,GAAG,GAAGP,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;AACnC,IAAAQ,QAAA,GAAqBR,OAAO,CAAC,QAAQ,CAAC;EAA9BS,QAAQ,GAAAD,QAAA,CAARC,QAAQ,CAAuB,CAAC;AACxC,IAAMC,SAAS,GAAGV,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;AACjD,IAAMW,MAAM,GAAGX,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAElC;AACA,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACvCd,OAAO,CAAC,QAAQ,CAAC,CAACe,MAAM,CAAC,CAAC;AAC9B;;AAEA;AACA;AACA,IAAMC,cAAc,GAAGhB,OAAO,CAAC,QAAQ,CAAC,CAACY,OAAO,CAACC,GAAG,CAACI,iBAAiB,IAAI,6GAA6G,CAAC;;AAExL;AACA,IAAMC,GAAG,GAAGnB,OAAO,CAAC,CAAC;;AAErB;AACA,IAAMoB,cAAc,GAAGP,OAAO,CAACC,GAAG,CAACO,WAAW,GAAGR,OAAO,CAACC,GAAG,CAACO,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAEjH;AACA,IAAIT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACF,OAAO,CAACC,GAAG,CAACO,WAAW,EAAE;EACnED,cAAc,CAACG,IAAI,CAAC,MAAM,CAAC;AAC/B;AAEA,IAAMC,WAAW,GAAG;EAChBC,MAAM,EAAE,SAARA,MAAMA,CAAYA,OAAM,EAAEC,QAAQ,EAAE;IAChC;IACA,IAAI,CAACD,OAAM,EAAE;MACT;MACA,IAAIL,cAAc,CAACO,QAAQ,CAAC,MAAM,CAAC,IAAKd,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACF,OAAO,CAACC,GAAG,CAACO,WAAY,EAAE;QACxG,OAAOK,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;MAC/B;MACA,IAAME,GAAG,GAAG,gFAAgF;MAC5F,OAAOF,QAAQ,CAAC,IAAIG,KAAK,CAACD,GAAG,CAAC,EAAE,KAAK,CAAC;IAC1C;IAEA,IAAIR,cAAc,CAACU,OAAO,CAACL,OAAM,CAAC,KAAK,CAAC,CAAC,EAAE;MACvC,IAAMG,IAAG,GAAG,gFAAgF;MAC5F,OAAOF,QAAQ,CAAC,IAAIG,KAAK,CAACD,IAAG,CAAC,EAAE,KAAK,CAAC;IAC1C;IACA,OAAOF,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;EAC/B,CAAC;EACDK,OAAO,EAAE,gCAAgC;EACzCC,WAAW,EAAE,IAAI;EAAE;EACnBC,oBAAoB,EAAE,GAAG,CAAC;AAC9B,CAAC;AACDd,GAAG,CAACe,GAAG,CAAC5B,IAAI,CAACkB,WAAW,CAAC,CAAC;;AAG1B;AACA,IAAMW,IAAI,GAAGtB,OAAO,CAACC,GAAG,CAACqB,IAAI,IAAI,IAAI;;AAErC;AACA,IAAMC,qBAAqB,GAAGvB,OAAO,CAACC,GAAG,CAACsB,qBAAqB,IAAI,2BAA2B;;AAE9F;AACA,IAAMC,WAAW,GAAG1B,SAAS,CAAC;EAC1B2B,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EAAE;EAC1BC,GAAG,EAAE,EAAE;EAAE;EACTC,OAAO,EAAE,sFAAsF;EAC/FC,eAAe,EAAE,IAAI;EAAE;EACvBC,aAAa,EAAE,KAAK,CAAE;AAC1B,CAAC,CAAC;;AAEF;AACA;AACAvB,GAAG,CAACwB,IAAI,CAAC,qBAAqB,EAAE3C,OAAO,CAAC4C,GAAG,CAAC;EAACC,IAAI,EAAE;AAAkB,CAAC,CAAC;EAAA,IAAAC,IAAA,GAAAnD,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA+D,QAAOC,GAAG,EAAEC,GAAG;IAAA,IAAAC,GAAA,EAAAC,KAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,EAAA,EAAAC,GAAA;IAAA,OAAA9E,YAAA,GAAAC,CAAA,WAAA8E,QAAA;MAAA,kBAAAA,QAAA,CAAA/G,CAAA;QAAA;UAC9EoG,GAAG,GAAGF,GAAG,CAACc,OAAO,CAAC,kBAAkB,CAAC;UAAAD,QAAA,CAAAlG,CAAA;UAKvCwF,KAAK,GAAGlC,cAAc,CAAC8C,QAAQ,CAACC,cAAc,CAAChB,GAAG,CAACiB,IAAI,EAAEf,GAAG,EAAEd,qBAAqB,CAAC;UAACyB,QAAA,CAAA/G,CAAA;UAAA;QAAA;UAAA+G,QAAA,CAAAlG,CAAA;UAAAgG,EAAA,GAAAE,QAAA,CAAA/F,CAAA;UAErFoG,OAAO,CAACC,KAAK,mBAAAC,MAAA,CAAmBT,EAAA,CAAInB,OAAO,CAAE,CAAC;UAAC,OAAAqB,QAAA,CAAA9F,CAAA,IACxCkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,mBAAAF,MAAA,CAAmBT,EAAA,CAAInB,OAAO,CAAE,CAAC;QAAA;UAAAoB,GAAA,GAIxDT,KAAK,CAACN,IAAI;UAAAgB,QAAA,CAAA/G,CAAA,GAAA8G,GAAA,KACT,4BAA4B,OAAAA,GAAA,KAgB5B,+BAA+B,OAAAA,GAAA,KAc/B,+BAA+B,OAAAA,GAAA,KAc/B,2BAA2B,OAAAA,GAAA,KAc3B,wBAAwB;UAAA;QAAA;UAzDnBR,OAAO,GAAGD,KAAK,CAACoB,IAAI,CAACC,MAAM;UACjCN,OAAO,CAACO,GAAG,CAAC,6BAA6B,EAAErB,OAAO,CAACsB,EAAE,CAAC;UAChDrB,MAAM,GAAGD,OAAO,CAACuB,QAAQ,CAACtB,MAAM;UAChCC,MAAM,GAAGF,OAAO,CAACuB,QAAQ,CAACrB,MAAM;UACtC,IAAIF,OAAO,CAACwB,cAAc,KAAK,MAAM,IAAIvB,MAAM,IAAIC,MAAM,EAAE;YACvDuB,EAAE,CAACC,GAAG,CACF,6HAA6H,EAC7H,CAAC1B,OAAO,CAAC2B,QAAQ,EAAE3B,OAAO,CAAC4B,YAAY,EAAE,QAAQ,EAAE1B,MAAM,EAAED,MAAM,CAAC,EAClE,UAAS4B,GAAG,EAAE;cACV,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,uDAAuD,EAAEc,GAAG,CAACzC,OAAO,CAAC,CAAC,KACxF0B,OAAO,CAACO,GAAG,SAAAL,MAAA,CAASf,MAAM,+BAAAe,MAAA,CAA4Bd,MAAM,eAAY,CAAC;YAClF,CACJ,CAAC;UACL;UAAC,OAAAO,QAAA,CAAA9F,CAAA;QAAA;UAGKwF,mBAAmB,GAAGJ,KAAK,CAACoB,IAAI,CAACC,MAAM;UAC7CN,OAAO,CAACO,GAAG,CAAC,uBAAuB,EAAElB,mBAAmB,CAACmB,EAAE,CAAC;UAC5D,IAAInB,mBAAmB,CAACwB,QAAQ,IAAIxB,mBAAmB,CAACc,MAAM,IAAId,mBAAmB,CAAC2B,IAAI,IAAI3B,mBAAmB,CAAC2B,IAAI,CAACR,EAAE,EAAE;YACvHG,EAAE,CAACC,GAAG,CACF,oFAAoF,EACpF,CAACvB,mBAAmB,CAACc,MAAM,EAAEd,mBAAmB,CAAC2B,IAAI,CAACR,EAAE,EAAEnB,mBAAmB,CAACwB,QAAQ,CAAC,EACvF,UAASE,GAAG,EAAE;cACV,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,0DAA0D,EAAEc,GAAG,CAACzC,OAAO,CAAC,CAAC,KAC3F0B,OAAO,CAACO,GAAG,8BAAAL,MAAA,CAA8Bb,mBAAmB,CAACwB,QAAQ,yBAAAX,MAAA,CAAsBb,mBAAmB,CAACc,MAAM,mBAAAD,MAAA,CAAgBb,mBAAmB,CAAC2B,IAAI,CAACR,EAAE,MAAG,CAAC;YAC7K,CACJ,CAAC;UACL;UAAC,OAAAb,QAAA,CAAA9F,CAAA;QAAA;UAGKyF,mBAAmB,GAAGL,KAAK,CAACoB,IAAI,CAACC,MAAM;UAC7CN,OAAO,CAACO,GAAG,CAAC,uBAAuB,EAAEjB,mBAAmB,CAACkB,EAAE,CAAC;UAC5D,IAAIlB,mBAAmB,CAACuB,QAAQ,EAAE;YAC9BF,EAAE,CAACC,GAAG,CACF,mHAAmH,EACnH,CAAC,WAAW,EAAE,MAAM,EAAEtB,mBAAmB,CAACuB,QAAQ,CAAC,EACnD,UAASE,GAAG,EAAE;cACV,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,0DAA0D,EAAEc,GAAG,CAACzC,OAAO,CAAC,CAAC,KAC3F0B,OAAO,CAACO,GAAG,8BAAAL,MAAA,CAA8BZ,mBAAmB,CAACuB,QAAQ,+CAA4C,CAAC;YAC3H,CACJ,CAAC;UACL;UAAC,OAAAlB,QAAA,CAAA9F,CAAA;QAAA;UAGK0F,gBAAgB,GAAGN,KAAK,CAACoB,IAAI,CAACC,MAAM;UAC1CN,OAAO,CAACO,GAAG,CAAC,4BAA4B,EAAEhB,gBAAgB,CAACiB,EAAE,CAAC;UAC9D,IAAIjB,gBAAgB,CAACuB,YAAY,IAAIvB,gBAAgB,CAACsB,QAAQ,EAAE;YAC5DF,EAAE,CAACC,GAAG,CACF,sGAAsG,EACtG,CAAC,QAAQ,EAAErB,gBAAgB,CAACuB,YAAY,EAAEvB,gBAAgB,CAACsB,QAAQ,CAAC,EACpE,UAASE,GAAG,EAAE;cACV,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,sDAAsD,EAAEc,GAAG,CAACzC,OAAO,CAAC,CAAC,KACvF0B,OAAO,CAACO,GAAG,iBAAAL,MAAA,CAAiBX,gBAAgB,CAACuB,YAAY,2BAAwB,CAAC;YAC3F,CACJ,CAAC;UACL;UAAC,OAAAnB,QAAA,CAAA9F,CAAA;QAAA;UAGK2F,aAAa,GAAGP,KAAK,CAACoB,IAAI,CAACC,MAAM;UACvCN,OAAO,CAACO,GAAG,CAAC,yBAAyB,EAAEf,aAAa,CAACgB,EAAE,CAAC;UACxD,IAAIhB,aAAa,CAACsB,YAAY,IAAItB,aAAa,CAACqB,QAAQ,EAAE;YACtDF,EAAE,CAACC,GAAG,CACF,sGAAsG,EACtG,CAAC,UAAU,EAAEpB,aAAa,CAACsB,YAAY,EAAEtB,aAAa,CAACqB,QAAQ,CAAC,EAChE,UAASE,GAAG,EAAE;cACV,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEc,GAAG,CAACzC,OAAO,CAAC,CAAC,KACpF0B,OAAO,CAACO,GAAG,iBAAAL,MAAA,CAAiBV,aAAa,CAACsB,YAAY,6BAA0B,CAAC;YAC1F,CACJ,CAAC;UACL;UAAC,OAAAnB,QAAA,CAAA9F,CAAA;QAAA;UAGDmG,OAAO,CAACO,GAAG,yBAAAL,MAAA,CAAyBjB,KAAK,CAACN,IAAI,CAAE,CAAC;QAAC;UAE1DI,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEC,QAAQ,EAAE;UAAK,CAAC,CAAC;QAAC;UAAA,OAAAvB,QAAA,CAAA9F,CAAA;MAAA;IAAA,GAAAgF,OAAA;EAAA,CAC5C;EAAA,iBAAAsC,EAAA,EAAAC,GAAA;IAAA,OAAAxC,IAAA,CAAAjD,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;;AAEF;AACAuB,GAAG,CAACe,GAAG,CAAClC,OAAO,CAACmF,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA;AACA,IAAMI,UAAU,GAAG1E,OAAO,CAACC,GAAG,CAACyE,UAAU,IAAI,2CAA2C;;AAExF;AACA;AACApE,GAAG,CAACe,GAAG,CAACtB,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEtB;AACA;AACA;AACAO,GAAG,CAACe,GAAG,CAAClC,OAAO,UAAO,CAACO,IAAI,CAACiF,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC,EAAE;EAC/CC,MAAM,EAAE,IAAI;EAAE;EACdC,SAAS,EAAE,KAAK,CAAC;AACrB,CAAC,CAAC,CAAC;;AAEH;AACA,IAAMd,EAAE,GAAG,IAAI3E,OAAO,CAAC0F,QAAQ,CAAC,kBAAkB,EAAE,UAACX,GAAG,EAAK;EACzD,IAAIA,GAAG,EAAE;IACL;IACAf,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEc,GAAG,CAACzC,OAAO,CAAC;IACrD3B,OAAO,CAACgF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,MAAM;IACH3B,OAAO,CAACO,GAAG,CAAC,yCAAyC,CAAC;IACtDI,EAAE,CAACiB,GAAG,CAAC,0BAA0B,CAAC;IAClCjB,EAAE,CAACkB,SAAS,CAAC,YAAM;MACflB,EAAE,CAACC,GAAG,yHAAyH,CAAC;MAChID,EAAE,CAACC,GAAG,qPAAqP,CAAC;MAC5PD,EAAE,CAACC,GAAG,uwBAgBJ,CAAC;MACHD,EAAE,CAACC,GAAG,8fASJ,CAAC;MACH;MACAD,EAAE,CAACC,GAAG,ivBAWJ,CAAC;MACH;MACAD,EAAE,CAACC,GAAG,2nCAeJ,CAAC;MACH;MACAD,EAAE,CAACC,GAAG,mtBAYJ,CAAC;IACP,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;;AAEF;AACA,SAASkB,iBAAiBA,CAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAE;EACvC,IAAMC,UAAU,GAAGlD,GAAG,CAACc,OAAO,CAAC,eAAe,CAAC;EAC/C,IAAMqC,KAAK,GAAGD,UAAU,IAAIA,UAAU,CAAC5E,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpD,IAAI6E,KAAK,IAAI,IAAI,EAAE;IACf,OAAOlD,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EACA9D,GAAG,CAAC+F,MAAM,CAACD,KAAK,EAAEZ,UAAU,EAAE,UAACN,GAAG,EAAEoB,IAAI,EAAK;IACzC,IAAIpB,GAAG,EAAE;MACL;MACAf,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEc,GAAG,CAACzC,OAAO,CAAC;MACrD,OAAOS,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAuC,CAAC,CAAC;IAClF;IACAnB,GAAG,CAACqD,IAAI,GAAGA,IAAI;IACfJ,IAAI,CAAC,CAAC;EACV,CAAC,CAAC;AACN;;AAEA;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAK;EAC5B,OAAO,4BAA4B,CAACC,IAAI,CAACD,KAAK,CAAC;AACnD,CAAC;;AAED;;AAEA;AACApF,GAAG,CAACwB,IAAI,CAAC,eAAe,EAAEN,WAAW;EAAA,IAAAoE,KAAA,GAAA9G,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA0H,SAAO1D,GAAG,EAAEC,GAAG,EAAEgD,IAAI;IAAA,IAAAU,SAAA,EAAAC,YAAA,EAAAC,SAAA,EAAAN,KAAA,EAAAO,QAAA,EAAAC,aAAA,EAAAC,GAAA;IAAA,OAAAlI,YAAA,GAAAC,CAAA,WAAAkI,SAAA;MAAA,kBAAAA,SAAA,CAAAnK,CAAA;QAAA;UAAO;UAAA6J,SAAA,GACV3D,GAAG,CAACiB,IAAI,EAArD2C,YAAY,GAAAD,SAAA,CAAZC,YAAY,EAAEC,SAAS,GAAAF,SAAA,CAATE,SAAS,EAAEN,KAAK,GAAAI,SAAA,CAALJ,KAAK,EAAEO,QAAQ,GAAAH,SAAA,CAARG,QAAQ,EAEhD;UAAA,MACI,CAACF,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAIA,YAAY,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE;YAAAD,SAAA,CAAAnK,CAAA;YAAA;UAAA;UAAA,OAAAmK,SAAA,CAAAlJ,CAAA,IACxEkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA2D,CAAC,CAAC;QAAA;UAAA,MAElG,CAAC0C,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE;YAAAD,SAAA,CAAAnK,CAAA;YAAA;UAAA;UAAA,OAAAmK,SAAA,CAAAlJ,CAAA,IAC/DkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAwD,CAAC,CAAC;QAAA;UAAA,MAE/F,CAACoC,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC;YAAAU,SAAA,CAAAnK,CAAA;YAAA;UAAA;UAAA,OAAAmK,SAAA,CAAAlJ,CAAA,IACvBkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAqC,CAAC,CAAC;QAAA;UAAA,MAE5E,CAAC2C,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAAC5I,MAAM,GAAG,CAAC;YAAA+I,SAAA,CAAAnK,CAAA;YAAA;UAAA;UAAA,OAAAmK,SAAA,CAAAlJ,CAAA,IACzDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA+D,CAAC,CAAC;QAAA;UAAA8C,SAAA,CAAAtJ,CAAA;UAAAsJ,SAAA,CAAAnK,CAAA;UAAA,OAI1EsD,MAAM,CAAC+G,IAAI,CAACL,QAAQ,EAAE,EAAE,CAAC;QAAA;UAA/CC,aAAa,GAAAE,SAAA,CAAAnJ,CAAA;UACnB+G,EAAE,CAACkB,SAAS,CAAC,YAAM;YACflB,EAAE,CAACC,GAAG,CAAC,mBAAmB,CAAC;YAC3BD,EAAE,CAACC,GAAG,CAAC,iDAAiD,EAAE,CAAC8B,YAAY,CAAC,EAAE,UAAS3B,GAAG,EAAE;cACpF,IAAIA,GAAG,EAAE;gBACLJ,EAAE,CAACC,GAAG,CAAC,UAAU,CAAC;gBAClBZ,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEc,GAAG,CAAC;gBACtD,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;cACzD;cACA,IAAMuF,YAAY,GAAG,IAAI,CAACC,MAAM;cAChCxC,EAAE,CAACC,GAAG,6KAA6K,CAACsC,YAAY,EAAE,IAAI,EAAEP,SAAS,EAAEN,KAAK,EAAEQ,aAAa,CAAC,EAAE,UAASO,aAAa,EAAE;gBAC9P,IAAIA,aAAa,EAAE;kBACfzC,EAAE,CAACC,GAAG,CAAC,UAAU,CAAC;kBAClBZ,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEmD,aAAa,CAAC;kBAC7D,IAAIA,aAAa,CAAC9E,OAAO,CAACb,QAAQ,CAAC,uCAAuC,CAAC,EAAE;oBACzE,OAAOsB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;sBAAEhB,KAAK,EAAE;oBAA4B,CAAC,CAAC;kBACvE;kBACA,OAAO8B,IAAI,CAAC,IAAIpE,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;gBACtD;gBACAgD,EAAE,CAACC,GAAG,CAAC,QAAQ,CAAC;gBAChB7B,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;kBAAE3C,OAAO,EAAE,2CAA2C;kBAAEa,MAAM,EAAE,IAAI,CAACgE;gBAAO,CAAC,CAAC;cACvG,CAAC,CAAC;YACN,CAAC,CAAC;UACN,CAAC,CAAC;UAACJ,SAAA,CAAAnK,CAAA;UAAA;QAAA;UAAAmK,SAAA,CAAAtJ,CAAA;UAAAqJ,GAAA,GAAAC,SAAA,CAAAnJ,CAAA;UAEHoG,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAA6C,GAAO,CAAC;UAC3Cf,IAAI,CAAAe,GAAM,CAAC,CAAC,CAAC;QAAA;UAAA,OAAAC,SAAA,CAAAlJ,CAAA;MAAA;IAAA,GAAA2I,QAAA;EAAA,CAEpB;EAAA,iBAAAa,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAhB,KAAA,CAAA5G,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFuB,GAAG,CAACwB,IAAI,CAAC,YAAY,EAAEN,WAAW,EAAE,UAACW,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACtD,IAAAyB,UAAA,GAA4B1E,GAAG,CAACiB,IAAI;IAA5BsC,KAAK,GAAAmB,UAAA,CAALnB,KAAK;IAAEO,QAAQ,GAAAY,UAAA,CAARZ,QAAQ;;EAEvB;EACA,IAAI,CAACP,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IAChC,OAAOtD,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAqC,CAAC,CAAC;EAChF;EACA,IAAI,CAAC2C,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAAC5I,MAAM,KAAK,CAAC,EAAE;IACpE,OAAO+E,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAwB,CAAC,CAAC;EACnE;EAEAU,EAAE,CAACiB,GAAG,CAAC,qCAAqC,EAAE,CAACS,KAAK,CAAC;IAAA,IAAAoB,KAAA,GAAAhI,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA4I,SAAO3C,GAAG,EAAEoB,IAAI;MAAA,IAAAwB,OAAA,EAAAC,OAAA,EAAA3B,KAAA;MAAA,OAAArH,YAAA,GAAAC,CAAA,WAAAgJ,SAAA;QAAA,kBAAAA,SAAA,CAAAjL,CAAA;UAAA;YAAA,KAC/DmI,GAAG;cAAA8C,SAAA,CAAAjL,CAAA;cAAA;YAAA;YACHoH,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEc,GAAG,CAAC;YAAC,OAAA8C,SAAA,CAAAhK,CAAA,IAC5CkI,IAAI,CAAC,IAAIpE,KAAK,CAAC,uCAAuC,CAAC,CAAC;UAAA;YAAA,IAE9DwE,IAAI;cAAA0B,SAAA,CAAAjL,CAAA;cAAA;YAAA;YAAA,OAAAiL,SAAA,CAAAhK,CAAA,IACEkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;cAAEhB,KAAK,EAAE;YAAuB,CAAC,CAAC;UAAA;YAAA4D,SAAA,CAAAjL,CAAA;YAAA,OAE5CsD,MAAM,CAAC4H,OAAO,CAAClB,QAAQ,EAAET,IAAI,CAACU,aAAa,CAAC;UAAA;YAA5Dc,OAAO,GAAAE,SAAA,CAAAjK,CAAA;YAAA,IACR+J,OAAO;cAAAE,SAAA,CAAAjL,CAAA;cAAA;YAAA;YAAA,OAAAiL,SAAA,CAAAhK,CAAA,IACDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;cAAEhB,KAAK,EAAE;YAAuB,CAAC,CAAC;UAAA;YAE5D2D,OAAO,GAAG;cAAEzE,MAAM,EAAEgD,IAAI,CAAC4B,OAAO;cAAE1B,KAAK,EAAEF,IAAI,CAACE,KAAK;cAAE2B,IAAI,EAAE7B,IAAI,CAAC6B,IAAI;cAAEC,QAAQ,EAAE9B,IAAI,CAACQ,SAAS;cAAEuB,SAAS,EAAE/B,IAAI,CAACgC,UAAU;cAAEC,UAAU,EAAEjC,IAAI,CAACkC,WAAW;cAAEC,kBAAkB,EAAEnC,IAAI,CAACoC,mBAAmB;cAAEnF,MAAM,EAAE+C,IAAI,CAACqC;YAAQ,CAAC;YAC9NvC,KAAK,GAAG9F,GAAG,CAACsI,IAAI,CAACb,OAAO,EAAEvC,UAAU,EAAE;cAAEqD,SAAS,EAAE;YAAK,CAAC,CAAC;YAChE3F,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;cAAE3C,OAAO,EAAE,mBAAmB;cAAE2D,KAAK,EAALA,KAAK;cAAE+B,IAAI,EAAE7B,IAAI,CAAC6B;YAAK,CAAC,CAAC;UAAC;YAAA,OAAAH,SAAA,CAAAhK,CAAA;QAAA;MAAA,GAAA6J,QAAA;IAAA,CAClF;IAAA,iBAAAiB,GAAA,EAAAC,GAAA;MAAA,OAAAnB,KAAA,CAAA9H,KAAA,OAAAD,SAAA;IAAA;EAAA,IAAC;AACN,CAAC,CAAC;AAEFuB,GAAG,CAACwB,IAAI,CAAC,mBAAmB,EAAEqD,iBAAiB;EAAA,IAAA+C,KAAA,GAAApJ,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAAgK,SAAOhG,GAAG,EAAEC,GAAG,EAAEgD,IAAI;IAAA,IAAAgD,UAAA,EAAApC,SAAA,EAAAN,KAAA,EAAAO,QAAA,EAAAyB,WAAA,EAAAW,SAAA,EAAAd,SAAA,EAAAF,IAAA,EAAAnB,aAAA,EAAAoC,GAAA;IAAA,OAAArK,YAAA,GAAAC,CAAA,WAAAqK,SAAA;MAAA,kBAAAA,SAAA,CAAAtM,CAAA;QAAA;UAAO;UAAAmM,UAAA,GACrBjG,GAAG,CAACiB,IAAI,EAApD4C,SAAS,GAAAoC,UAAA,CAATpC,SAAS,EAAEN,KAAK,GAAA0C,UAAA,CAAL1C,KAAK,EAAEO,QAAQ,GAAAmC,UAAA,CAARnC,QAAQ,EAAEyB,WAAW,GAAAU,UAAA,CAAXV,WAAW;UAAAW,SAAA,GACnBlG,GAAG,CAACqD,IAAI,EAA5B+B,SAAS,GAAAc,SAAA,CAATd,SAAS,EAAEF,IAAI,GAAAgB,SAAA,CAAJhB,IAAI,EAEvB;UAAA,MACIA,IAAI,KAAK,aAAa;YAAAkB,SAAA,CAAAtM,CAAA;YAAA;UAAA;UAAA,OAAAsM,SAAA,CAAArL,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA4D,CAAC,CAAC;QAAA;UAAA,MAC7H,CAAC0C,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE;YAAAkC,SAAA,CAAAtM,CAAA;YAAA;UAAA;UAAA,OAAAsM,SAAA,CAAArL,CAAA,IAC/DkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAwD,CAAC,CAAC;QAAA;UAAA,MAE/F,CAACoC,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC;YAAA6C,SAAA,CAAAtM,CAAA;YAAA;UAAA;UAAA,OAAAsM,SAAA,CAAArL,CAAA,IACvBkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAqC,CAAC,CAAC;QAAA;UAAA,MAE5E,CAAC2C,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAAC5I,MAAM,GAAG,CAAC;YAAAkL,SAAA,CAAAtM,CAAA;YAAA;UAAA;UAAA,OAAAsM,SAAA,CAAArL,CAAA,IACzDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAyE,CAAC,CAAC;QAAA;UAAA,MAEhH,OAAOoE,WAAW,KAAK,QAAQ,IAAIA,WAAW,IAAI,CAAC;YAAAa,SAAA,CAAAtM,CAAA;YAAA;UAAA;UAAA,OAAAsM,SAAA,CAAArL,CAAA,IAC5CkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAmC,CAAC,CAAC;QAAA;UAAAiF,SAAA,CAAAzL,CAAA;UAAAyL,SAAA,CAAAtM,CAAA;UAAA,OAI9CsD,MAAM,CAAC+G,IAAI,CAACL,QAAQ,EAAE,EAAE,CAAC;QAAA;UAA/CC,aAAa,GAAAqC,SAAA,CAAAtL,CAAA;UACnB+G,EAAE,CAACiB,GAAG,CAAC,kEAAkE,EAAE,CAACyC,WAAW,EAAEH,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAEoE,QAAQ,EAAK;YACpH,IAAIpE,GAAG,EAAE;cAAEf,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEc,GAAG,CAAC;cAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAAE,CAAC,CAAC;YACzI,IAAI,CAACwH,QAAQ,EAAE;cAAE,OAAOpG,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;gBAAEhB,KAAK,EAAE;cAAuE,CAAC,CAAC;YAAE;YACjIU,EAAE,CAACC,GAAG,gLAAgL,CAACsD,SAAS,EAAEG,WAAW,EAAE1B,SAAS,EAAEN,KAAK,EAAEQ,aAAa,CAAC,EAAE,UAASO,aAAa,EAAE;cACrQ,IAAIA,aAAa,EAAE;gBACfpD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEmD,aAAa,CAAC;gBAC9D,IAAIA,aAAa,CAAC9E,OAAO,CAACb,QAAQ,CAAC,uCAAuC,CAAC,EAAE;kBAAE,OAAOsB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;oBAAEhB,KAAK,EAAE;kBAA4B,CAAC,CAAC;gBAAE;gBACpJ,OAAO8B,IAAI,CAAC,IAAIpE,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;cACvD;cACAoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;gBAAE3C,OAAO,EAAE,sCAAsC;gBAAEa,MAAM,EAAE,IAAI,CAACgE;cAAO,CAAC,CAAC;YAClG,CAAC,CAAC;UACN,CAAC,CAAC;UAAC+B,SAAA,CAAAtM,CAAA;UAAA;QAAA;UAAAsM,SAAA,CAAAzL,CAAA;UAAAwL,GAAA,GAAAC,SAAA,CAAAtL,CAAA;UACWoG,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAAgF,GAAO,CAAC;UAAElD,IAAI,CAAAkD,GAAM,CAAC;QAAC;UAAA,OAAAC,SAAA,CAAArL,CAAA;MAAA;IAAA,GAAAiL,QAAA;EAAA,CAC9E;EAAA,iBAAAM,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAT,KAAA,CAAAlJ,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;;AAEF;AACAuB,GAAG,CAACwB,IAAI,CAAC,sBAAsB,EAAEqD,iBAAiB;EAAA,IAAAyD,KAAA,GAAA9J,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA0K,SAAO1G,GAAG,EAAEC,GAAG,EAAEgD,IAAI;IAAA,IAAA0D,UAAA,EAAA9C,SAAA,EAAAN,KAAA,EAAAO,QAAA,EAAA8C,QAAA,EAAAC,WAAA,EAAAtB,WAAA,EAAAuB,UAAA,EAAA1B,SAAA,EAAAF,IAAA,EAAA6B,qBAAA,EAAAC,iBAAA,EAAAjD,aAAA,EAAAkD,oBAAA,EAAAC,GAAA;IAAA,OAAApL,YAAA,GAAAC,CAAA,WAAAoL,SAAA;MAAA,kBAAAA,SAAA,CAAArN,CAAA;QAAA;UAAA6M,UAAA,GACM3G,GAAG,CAACiB,IAAI,EAA3E4C,SAAS,GAAA8C,UAAA,CAAT9C,SAAS,EAAEN,KAAK,GAAAoD,UAAA,CAALpD,KAAK,EAAEO,QAAQ,GAAA6C,UAAA,CAAR7C,QAAQ,EAAE8C,QAAQ,GAAAD,UAAA,CAARC,QAAQ,EAAEC,WAAW,GAAAF,UAAA,CAAXE,WAAW,EAAEtB,WAAW,GAAAoB,UAAA,CAAXpB,WAAW;UAAAuB,UAAA,GACP9G,GAAG,CAACqD,IAAI,EAA/D+B,SAAS,GAAA0B,UAAA,CAAT1B,SAAS,EAAEF,IAAI,GAAA4B,UAAA,CAAJ5B,IAAI,EAAc6B,qBAAqB,GAAAD,UAAA,CAAjCxB,UAAU,EAEnC;UAAA,IACK,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC3G,QAAQ,CAACuG,IAAI,CAAC;YAAAiC,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IAC1CkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAmD,CAAC,CAAC;QAAA;UAAA,MAI1F,CAAC0C,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE;YAAAiD,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IAC/DkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAwD,CAAC,CAAC;QAAA;UAAA,MAE/F,CAACoC,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC;YAAA4D,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACvBkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAqC,CAAC,CAAC;QAAA;UAAA,MAE5E,CAAC2C,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAAC5I,MAAM,GAAG,CAAC;YAAAiM,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACzDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAyE,CAAC,CAAC;QAAA;UAGpH;UACA;UACA;UACA;UACM6F,iBAAiB,GAAGzB,WAAW,KAAK,IAAI,IAAK,OAAOA,WAAW,KAAK,QAAQ,IAAI,CAAC6B,KAAK,CAAC7B,WAAW,CAAC,IAAIA,WAAW,GAAG,CAAE;UAAA,IACxHyB,iBAAiB;YAAAG,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACXkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA0F,CAAC,CAAC;QAAA;UAAA,MAGjIyF,QAAQ,KAAKS,SAAS,IAAI,OAAOT,QAAQ,KAAK,QAAQ;YAAAO,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IAC/CkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAyC,CAAC,CAAC;QAAA;UAAA,MAEhF0F,WAAW,KAAKQ,SAAS,IAAI,OAAOR,WAAW,KAAK,QAAQ;YAAAM,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACrDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA4C,CAAC,CAAC;QAAA;UAAA,MAMnF+D,IAAI,KAAK,gBAAgB;YAAAiC,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,MAErByL,WAAW,KAAKwB,qBAAqB;YAAAI,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,IAE/ByL,WAAW,KAAK,IAAI,IAAIwB,qBAAqB,KAAK,IAAI;YAAAI,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACjDkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAsF,CAAC,CAAC;QAAA;UAAAgG,SAAA,CAAAxM,CAAA;UAAAwM,SAAA,CAAArN,CAAA;UAAA,OAOzGsD,MAAM,CAAC+G,IAAI,CAACL,QAAQ,EAAE,EAAE,CAAC;QAAA;UAA/CC,aAAa,GAAAoD,SAAA,CAAArM,CAAA;UAAA,MAIfyK,WAAW,KAAK,IAAI;YAAA4B,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAAqN,SAAA,CAAArN,CAAA;UAAA,OACe,IAAI0C,OAAO,CAAC,UAACC,OAAO,EAAE6K,MAAM,EAAK;YAChEzF,EAAE,CAACiB,GAAG,CAAC,4EAA4E,EAAE,CAACyC,WAAW,EAAEH,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAEoE,QAAQ,EAAK;cAC9H,IAAIpE,GAAG,EAAEqF,MAAM,CAACrF,GAAG,CAAC;cACpBxF,OAAO,CAAC4J,QAAQ,CAAC;YACrB,CAAC,CAAC;UACN,CAAC,CAAC;QAAA;UALIY,oBAAoB,GAAAE,SAAA,CAAArM,CAAA;UAAA,IAMrBmM,oBAAoB;YAAAE,SAAA,CAAArN,CAAA;YAAA;UAAA;UAAA,OAAAqN,SAAA,CAAApM,CAAA,IACdkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAuE,CAAC,CAAC;QAAA;UAItHU,EAAE,CAACC,GAAG,uMAEF,CAACsD,SAAS,EAAEG,WAAW,EAAE1B,SAAS,EAAEN,KAAK,EAAEQ,aAAa,EAAE6C,QAAQ,EAAEC,WAAW,CAAE;UAAE;UACnF,UAASvC,aAAa,EAAE;YACpB,IAAIA,aAAa,EAAE;cACfpD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEmD,aAAa,CAAC;cACjE,IAAIA,aAAa,CAAC9E,OAAO,CAACb,QAAQ,CAAC,uCAAuC,CAAC,EAAE;gBAAE,OAAOsB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;kBAAEhB,KAAK,EAAE;gBAA4B,CAAC,CAAC;cAAE;cACpJ,OAAO8B,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACxD;YACAoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;cAAE3C,OAAO,EAAE,gCAAgC;cAAEa,MAAM,EAAE,IAAI,CAACgE;YAAO,CAAC,CAAC;UAC5F,CACJ,CAAC;UAAC8C,SAAA,CAAArN,CAAA;UAAA;QAAA;UAAAqN,SAAA,CAAAxM,CAAA;UAAAuM,GAAA,GAAAC,SAAA,CAAArM,CAAA;UAEFoG,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAA+F,GAAO,CAAC;UAC9CjE,IAAI,CAAAiE,GAAM,CAAC;QAAC;UAAA,OAAAC,SAAA,CAAApM,CAAA;MAAA;IAAA,GAAA2L,QAAA;EAAA,CAEnB;EAAA,iBAAAa,GAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAhB,KAAA,CAAA5J,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAGFuB,GAAG,CAAC2E,GAAG,CAAC,cAAc,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAK;EACrD,IAAAyH,UAAA,GAA6F1H,GAAG,CAACqD,IAAI;IAA7FhD,MAAM,GAAAqH,UAAA,CAANrH,MAAM;IAAE8E,QAAQ,GAAAuC,UAAA,CAARvC,QAAQ;IAAE5B,KAAK,GAAAmE,UAAA,CAALnE,KAAK;IAAE2B,IAAI,GAAAwC,UAAA,CAAJxC,IAAI;IAAEE,SAAS,GAAAsC,UAAA,CAATtC,SAAS;IAAEE,UAAU,GAAAoC,UAAA,CAAVpC,UAAU;IAAEE,kBAAkB,GAAAkC,UAAA,CAAlBlC,kBAAkB;IAAElF,MAAM,GAAAoH,UAAA,CAANpH,MAAM;EACxFL,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;IAAE9B,MAAM,EAANA,MAAM;IAAE8E,QAAQ,EAARA,QAAQ;IAAE5B,KAAK,EAALA,KAAK;IAAE2B,IAAI,EAAJA,IAAI;IAAEE,SAAS,EAATA,SAAS;IAAEE,UAAU,EAAVA,UAAU;IAAEE,kBAAkB,EAAlBA,kBAAkB;IAAElF,MAAM,EAANA;EAAO,CAAC,CAAC;AAC9G,CAAC,CAAC;AAEFnC,GAAG,CAACwJ,GAAG,CAAC,cAAc,EAAE3E,iBAAiB;EAAA,IAAA4E,KAAA,GAAAjL,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA6L,SAAO7H,GAAG,EAAEC,GAAG,EAAEgD,IAAI;IAAA,IAAA6E,UAAA,EAAA3C,QAAA,EAAA5B,KAAA,EAAAwE,eAAA,EAAAC,WAAA,EAAA3H,MAAA;IAAA,OAAAvE,YAAA,GAAAC,CAAA,WAAAkM,SAAA;MAAA,kBAAAA,SAAA,CAAAnO,CAAA;QAAA;UAAO;UAAAgO,UAAA,GACT9H,GAAG,CAACiB,IAAI,EAA1DkE,QAAQ,GAAA2C,UAAA,CAAR3C,QAAQ,EAAE5B,KAAK,GAAAuE,UAAA,CAALvE,KAAK,EAAEwE,eAAe,GAAAD,UAAA,CAAfC,eAAe,EAAEC,WAAW,GAAAF,UAAA,CAAXE,WAAW;UAC7C3H,MAAM,GAAKL,GAAG,CAACqD,IAAI,CAAnBhD,MAAM,EAEd;UAAA,MACI8E,QAAQ,KAAKkC,SAAS,IAAI9D,KAAK,KAAK8D,SAAS,KAAK,CAACU,eAAe,IAAI,CAACC,WAAW,CAAC;YAAAC,SAAA,CAAAnO,CAAA;YAAA;UAAA;UAAA,OAAAmO,SAAA,CAAAlN,CAAA,IAC5EkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA+B,CAAC,CAAC;QAAA;UAAA,MAEtEgE,QAAQ,KAAKkC,SAAS,KAAK,OAAOlC,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACjB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;YAAA+D,SAAA,CAAAnO,CAAA;YAAA;UAAA;UAAA,OAAAmO,SAAA,CAAAlN,CAAA,IAC3EkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAoD,CAAC,CAAC;QAAA;UAAA,MAE3FoC,KAAK,KAAK8D,SAAS,IAAI,CAAC/D,YAAY,CAACC,KAAK,CAAC;YAAA0E,SAAA,CAAAnO,CAAA;YAAA;UAAA;UAAA,OAAAmO,SAAA,CAAAlN,CAAA,IACpCkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA4D,CAAC,CAAC;QAAA;UAAA,MAEnG6G,WAAW,KAAKX,SAAS,KAAK,OAAOW,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAAC9M,MAAM,GAAG,CAAC,CAAC;YAAA+M,SAAA,CAAAnO,CAAA;YAAA;UAAA;UAAA,OAAAmO,SAAA,CAAAlN,CAAA,IACjFkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAwE,CAAC,CAAC;QAAA;UAAA,MAE9G4G,eAAe,IAAI,CAACC,WAAW,IAAM,CAACD,eAAe,IAAIC,WAAY;YAAAC,SAAA,CAAAnO,CAAA;YAAA;UAAA;UAAA,OAAAmO,SAAA,CAAAlN,CAAA,IAC/DkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA0E,CAAC,CAAC;QAAA;UAIrHU,EAAE,CAACiB,GAAG,CAAC,uCAAuC,EAAE,CAACzC,MAAM,CAAC;YAAA,IAAA6H,KAAA,GAAAvL,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAAmM,SAAOlG,GAAG,EAAEoB,IAAI;cAAA,IAAA+E,SAAA,EAAAC,YAAA,EAAAC,OAAA,EAAAC,WAAA,EAAAC,YAAA,EAAA3D,OAAA,EAAA4D,eAAA,EAAAC,GAAA;cAAA,OAAA5M,YAAA,GAAAC,CAAA,WAAA4M,SAAA;gBAAA,kBAAAA,SAAA,CAAA7O,CAAA;kBAAA;oBAAA,KAClEmI,GAAG;sBAAA0G,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAIoH,OAAO,CAACC,KAAK,CAAC,kDAAkD,EAAEc,GAAG,CAAC;oBAAC,OAAA0G,SAAA,CAAA5N,CAAA,IAAQkI,IAAI,CAAC,IAAIpE,KAAK,CAAC,qCAAqC,CAAC,CAAC;kBAAA;oBAAA,IAC3IwE,IAAI;sBAAAsF,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA,OAAA6O,SAAA,CAAA5N,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;sBAAEhB,KAAK,EAAE;oBAAkB,CAAC,CAAC;kBAAA;oBAClEiH,SAAS,GAAG,mBAAmB;oBAC7BC,YAAY,GAAG,EAAE;oBACjBC,OAAO,GAAG,EAAE;oBACdC,WAAW,GAAG,KAAK;oBACvB,IAAIpD,QAAQ,KAAKkC,SAAS,IAAIlC,QAAQ,KAAK9B,IAAI,CAACQ,SAAS,EAAE;sBACvDyE,OAAO,CAAC/J,IAAI,CAAC,eAAe,CAAC;sBAC7B8J,YAAY,CAAC9J,IAAI,CAAC4G,QAAQ,CAAC;sBAC3BoD,WAAW,GAAG,IAAI;oBACtB;oBAAC,MACGhF,KAAK,KAAK8D,SAAS,IAAI9D,KAAK,KAAKF,IAAI,CAACE,KAAK;sBAAAoF,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA6O,SAAA,CAAAhO,CAAA;oBAAAgO,SAAA,CAAA7O,CAAA;oBAAA,OAEZ,IAAI0C,OAAO,CAAC,UAACC,OAAO,EAAE6K,MAAM,EAAK;sBACxDzF,EAAE,CAACiB,GAAG,CAAC,4DAA4D,EAAE,CAACS,KAAK,EAAElD,MAAM,CAAC,EAAE,UAAC4B,GAAG,EAAE2G,GAAG,EAAK;wBAChG,IAAI3G,GAAG,EAAEqF,MAAM,CAACrF,GAAG,CAAC;wBACpBxF,OAAO,CAACmM,GAAG,CAAC;sBAChB,CAAC,CAAC;oBACN,CAAC,CAAC;kBAAA;oBALIJ,YAAY,GAAAG,SAAA,CAAA7N,CAAA;oBAAA,KAMd0N,YAAY;sBAAAG,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA,OAAA6O,SAAA,CAAA5N,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;sBAAEhB,KAAK,EAAE;oBAA2C,CAAC,CAAC;kBAAA;oBAAAwH,SAAA,CAAA7O,CAAA;oBAAA;kBAAA;oBAAA6O,SAAA,CAAAhO,CAAA;oBAAA+N,GAAA,GAAAC,SAAA,CAAA7N,CAAA;oBAEtGoG,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAAuH,GAAO,CAAC;oBAAC,OAAAC,SAAA,CAAA5N,CAAA,IACzDkI,IAAI,CAAC,IAAIpE,KAAK,CAAC,4CAA4C,CAAC,CAAC;kBAAA;oBAExEyJ,OAAO,CAAC/J,IAAI,CAAC,WAAW,CAAC;oBACzB8J,YAAY,CAAC9J,IAAI,CAACgF,KAAK,CAAC;oBACxBgF,WAAW,GAAG,IAAI;kBAAC;oBAAA,MAEnBR,eAAe,IAAIC,WAAW;sBAAAW,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA6O,SAAA,CAAA7O,CAAA;oBAAA,OACRsD,MAAM,CAAC4H,OAAO,CAAC+C,eAAe,EAAE1E,IAAI,CAACU,aAAa,CAAC;kBAAA;oBAAnEc,OAAO,GAAA8D,SAAA,CAAA7N,CAAA;oBAAA,IACR+J,OAAO;sBAAA8D,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA,OAAA6O,SAAA,CAAA5N,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;sBAAEhB,KAAK,EAAE;oBAA8B,CAAC,CAAC;kBAAA;oBAAAwH,SAAA,CAAA7O,CAAA;oBAAA,OACvDsD,MAAM,CAAC+G,IAAI,CAAC6D,WAAW,EAAE,EAAE,CAAC;kBAAA;oBAApDS,eAAe,GAAAE,SAAA,CAAA7N,CAAA;oBACrBwN,OAAO,CAAC/J,IAAI,CAAC,mBAAmB,CAAC;oBACjC8J,YAAY,CAAC9J,IAAI,CAACkK,eAAe,CAAC;oBAClCF,WAAW,GAAG,IAAI;kBAAC;oBAAA,IAElBA,WAAW;sBAAAI,SAAA,CAAA7O,CAAA;sBAAA;oBAAA;oBAAA,OAAA6O,SAAA,CAAA5N,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;sBAAE3C,OAAO,EAAE;oBAAiD,CAAC,CAAC;kBAAA;oBAC9G4I,SAAS,IAAIE,OAAO,CAAC9F,IAAI,CAAC,IAAI,CAAC,GAAG,oBAAoB;oBACtD6F,YAAY,CAAC9J,IAAI,CAAC8B,MAAM,CAAC;oBACzBwB,EAAE,CAACC,GAAG,CAACsG,SAAS,EAAEC,YAAY,EAAE,UAASQ,SAAS,EAAE;sBAChD,IAAIA,SAAS,EAAE;wBAAE3H,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAE0H,SAAS,CAAC;wBAAE,OAAO5F,IAAI,CAAC,IAAIpE,KAAK,CAAC,2BAA2B,CAAC,CAAC;sBAAE,CAAC,CAAC;sBACtI,IAAI,IAAI,CAACiK,OAAO,GAAG,CAAC,EAAE;wBAClBjH,EAAE,CAACiB,GAAG,CAAC,uCAAuC,EAAE,CAACzC,MAAM,CAAC,EAAE,UAAC0I,QAAQ,EAAEC,WAAW,EAAK;0BACjF,IAAID,QAAQ,IAAI,CAACC,WAAW,EAAE;4BAAE9H,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAE4H,QAAQ,CAAC;4BAAE,OAAO9I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;8BAAE3C,OAAO,EAAE;4BAAkE,CAAC,CAAC;0BAAE;0BACpN,IAAMyJ,UAAU,GAAG;4BAAE5I,MAAM,EAAE2I,WAAW,CAAC/D,OAAO;4BAAE1B,KAAK,EAAEyF,WAAW,CAACzF,KAAK;4BAAE2B,IAAI,EAAE8D,WAAW,CAAC9D,IAAI;4BAAEC,QAAQ,EAAE6D,WAAW,CAACnF,SAAS;4BAAEuB,SAAS,EAAE4D,WAAW,CAAC3D,UAAU;4BAAEC,UAAU,EAAE0D,WAAW,CAACzD,WAAW;4BAAEC,kBAAkB,EAAEwD,WAAW,CAACvD,mBAAmB;4BAAEnF,MAAM,EAAE+C,IAAI,CAACqC;0BAAQ,CAAC;0BACxR,IAAMwD,QAAQ,GAAG7L,GAAG,CAACsI,IAAI,CAACsD,UAAU,EAAE1G,UAAU,EAAE;4BAAEqD,SAAS,EAAE;0BAAK,CAAC,CAAC;0BACtE3F,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;4BAAE3C,OAAO,EAAE,+BAA+B;4BAAE2D,KAAK,EAAE+F;0BAAS,CAAC,CAAC;wBACvF,CAAC,CAAC;sBACN,CAAC,MAAM;wBAAEjJ,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;0BAAE3C,OAAO,EAAE;wBAA4C,CAAC,CAAC;sBAAE;oBAC7F,CAAC,CAAC;kBAAC;oBAAA,OAAAmJ,SAAA,CAAA5N,CAAA;gBAAA;cAAA,GAAAoN,QAAA;YAAA,CACN;YAAA,iBAAAgB,IAAA,EAAAC,IAAA;cAAA,OAAAlB,KAAA,CAAArL,KAAA,OAAAD,SAAA;YAAA;UAAA,IAAC;QAAC;UAAA,OAAAqL,SAAA,CAAAlN,CAAA;MAAA;IAAA,GAAA8M,QAAA;EAAA,CACN;EAAA,iBAAAwB,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAA3B,KAAA,CAAA/K,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFuB,GAAG,CAAC2E,GAAG,CAAC,gBAAgB,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAC/D,IAAAuG,UAAA,GAA4BxJ,GAAG,CAACqD,IAAI;IAA5B+B,SAAS,GAAAoE,UAAA,CAATpE,SAAS;IAAEF,IAAI,GAAAsE,UAAA,CAAJtE,IAAI;EACvB,IAAIuE,GAAG,GAAG,yFAAyF;EACnG,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;;EAE1B;EACA,IAAI,CAAC,CAAC,aAAa,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAACzG,QAAQ,CAACuG,IAAI,CAAC,EAAE;IAC/D,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA6D,CAAC,CAAC;EACxG;EAEAU,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,oCAAoC,CAAC,CAAC;IAAE,CAAC,CAAC;IACrIoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;AAEFzL,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAEqD,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAChE,IAAA4G,UAAA,GAA4C7J,GAAG,CAACiB,IAAI;IAA5C6I,aAAa,GAAAD,UAAA,CAAbC,aAAa;IAAEC,gBAAgB,GAAAF,UAAA,CAAhBE,gBAAgB;EACvC,IAAAC,UAAA,GAA4BhK,GAAG,CAACqD,IAAI;IAA5B+B,SAAS,GAAA4E,UAAA,CAAT5E,SAAS;IAAEF,IAAI,GAAA8E,UAAA,CAAJ9E,IAAI;;EAEvB;EACA,IAAIA,IAAI,KAAK,aAAa,EAAE;IAAE,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAyD,CAAC,CAAC;EAAE;EAChI,IAAI,CAAC2I,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,IAAIA,aAAa,CAAC5F,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACpF,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA4D,CAAC,CAAC;EACvG;EACA,IAAI,CAAC4I,gBAAgB,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,CAAC7F,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC7F,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA+D,CAAC,CAAC;EAC1G;EAEAU,EAAE,CAACC,GAAG,CAAC,sFAAsF,EAAE,CAACsD,SAAS,EAAE0E,aAAa,EAAEC,gBAAgB,CAAC,EAAE,UAAS9H,GAAG,EAAE;IACvJ,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5HoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAE3C,OAAO,EAAE,mBAAmB;MAAE8F,UAAU,EAAE,IAAI,CAACjB;IAAO,CAAC,CAAC;EACnF,CAAC,CAAC;AACN,CAAC,CAAC;AAEFlG,GAAG,UAAO,CAAC,oBAAoB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACtE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAuI,UAAA,GAA4BjK,GAAG,CAACqD,IAAI;IAA5B+B,SAAS,GAAA6E,UAAA,CAAT7E,SAAS;IAAEF,IAAI,GAAA+E,UAAA,CAAJ/E,IAAI;EACvB,IAAIA,IAAI,KAAK,aAAa,EAAE;IAAE,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAyD,CAAC,CAAC;EAAE;;EAEhI;EACA,IAAI,CAACO,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAgC,CAAC,CAAC;EAC3E;EAEAU,EAAE,CAACC,GAAG,CAAC,gEAAgE,EAAE,CAACJ,EAAE,EAAE0D,SAAS,CAAC,EAAE,UAASnD,GAAG,EAAE;IACpG,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5H,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAkD,CAAC,CAAC;IAAE;IACrHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;AAEFnD,GAAG,CAAC2E,GAAG,CAAC,YAAY,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAC3D,IAAAkH,UAAA,GAAsFnK,GAAG,CAACqD,IAAI;IAAtF+B,SAAS,GAAA+E,UAAA,CAAT/E,SAAS;IAAEF,IAAI,GAAAiF,UAAA,CAAJjF,IAAI;IAAUkF,aAAa,GAAAD,UAAA,CAArB9J,MAAM;IAA6B0G,qBAAqB,GAAAoD,UAAA,CAAjC7E,UAAU;EAC1D,IAAA+E,UAAA,GAAyCrK,GAAG,CAACsK,KAAK;IAA1CC,UAAU,GAAAF,UAAA,CAAVE,UAAU;IAAEC,gBAAgB,GAAAH,UAAA,CAAhBG,gBAAgB;EAEpC,IAAIf,GAAG,mPAG+B;EACtC,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;EAE1B,IAAIF,IAAI,KAAK,aAAa,EAAE;IACxB;EAAA,CACH,MAAM,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IAClC;IACA,IAAI6B,qBAAqB,EAAE;MACvB0C,GAAG,+DAA+D,CAAC,CAAC;MACpEC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;IACtC,CAAC,MAAM;MACH,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA4D,CAAC,CAAC;IACvG;EACJ,CAAC,MAAM,IAAI+D,IAAI,KAAK,UAAU,EAAE;IAC5BuE,GAAG,4BAA4B;IAC/BC,MAAM,CAACnL,IAAI,CAAC6L,aAAa,CAAC;EAC9B,CAAC,MAAM;IACH,OAAOnK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAyD,CAAC,CAAC;EACpG;;EAEA;EACA,IAAMsJ,YAAY,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,UAAU,CAAC;EAClE,IAAIF,UAAU,KAAK,CAACE,YAAY,CAAC9L,QAAQ,CAAC4L,UAAU,CAAC,IAAKrF,IAAI,KAAK,gBAAgB,IAAIqF,UAAU,KAAK,aAAc,CAAC,EAAE;IACnH,OAAOtK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmF,CAAC,CAAC;EAC9H;EACA,IAAIqJ,gBAAgB,IAAIpD,KAAK,CAAC8C,QAAQ,CAACM,gBAAgB,CAAC,CAAC,EAAE;IACvD,OAAOvK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuC,CAAC,CAAC;EAClF;EAGA,IAAIoJ,UAAU,EAAE;IACZ,IAAIrF,IAAI,KAAK,aAAa,IAAKA,IAAI,KAAK,gBAAgB,KAAKqF,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,gBAAgB,CAAE,IAAKrF,IAAI,KAAK,UAAU,IAAIqF,UAAU,KAAK,UAAW,EAAE;MAC/Kd,GAAG,yBAAyB;MAC5BC,MAAM,CAACnL,IAAI,CAACgM,UAAU,CAAC;IAC3B,CAAC,MAAM;MACH;MACA,OAAOtK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA6D,CAAC,CAAC;IACxG;EACJ;EACA,IAAIqJ,gBAAgB,EAAE;IAClB;IACA,IAAItF,IAAI,KAAK,aAAa,IAAKA,IAAI,KAAK,gBAAgB,IAAIgF,QAAQ,CAACM,gBAAgB,CAAC,KAAKzD,qBAAsB,EAAE;MAC/G0C,GAAG,gCAAgC;MACnCC,MAAM,CAACnL,IAAI,CAACiM,gBAAgB,CAAC;IACjC,CAAC,MAAM;MACH,OAAOvK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAiE,CAAC,CAAC;IAC5G;EACJ;EAEAU,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAAE,CAAC,CAAC;IAC7HoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;AAEFzL,GAAG,UAAO,CAAC,gBAAgB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAClE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAgJ,UAAA,GAAyD1K,GAAG,CAACqD,IAAI;IAAzD+B,SAAS,GAAAsF,UAAA,CAATtF,SAAS;IAAEF,IAAI,GAAAwF,UAAA,CAAJxF,IAAI;IAAUyF,mBAAmB,GAAAD,UAAA,CAA3BrK,MAAM;EAC/B,IAAI6E,IAAI,KAAK,aAAa,EAAE;IAAE,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAqD,CAAC,CAAC;EAAE;EAC5H,IAAI+I,QAAQ,CAACxI,EAAE,CAAC,KAAKiJ,mBAAmB,EAAE;IAAE,OAAO1K,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiE,CAAC,CAAC;EAAE;;EAEtJ;EACA,IAAI,CAACO,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA4B,CAAC,CAAC;EACvE;EAEAU,EAAE,CAACC,GAAG,CAAC,oFAAoF,EAAE,CAACJ,EAAE,EAAE0D,SAAS,CAAC,EAAE,UAASnD,GAAG,EAAE;IACxH,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAAE,CAAC,CAAC;IACpH,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA8C,CAAC,CAAC;IAAE;IACjHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;AAEFnD,GAAG,CAACwB,IAAI,CAAC,8BAA8B,EAAEqD,iBAAiB;EAAA,IAAA4H,KAAA,GAAAjO,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAA6O,SAAO7K,GAAG,EAAEC,GAAG,EAAEgD,IAAI;IAAA,IAAA3C,MAAA,EAAAwK,UAAA,EAAAzK,MAAA,EAAAkD,KAAA,EAAA6B,SAAA,EAAA2F,cAAA,EAAAC,UAAA,EAAAC,aAAA,EAAAC,UAAA,EAAAC,UAAA,EAAApJ,QAAA,EAAA3B,OAAA,EAAAgL,GAAA;IAAA,OAAAtP,YAAA,GAAAC,CAAA,WAAAsP,SAAA;MAAA,kBAAAA,SAAA,CAAAvR,CAAA;QAAA;UAAO;UAC5EwG,MAAM,GAAKN,GAAG,CAACiB,IAAI,CAAnBX,MAAM;UAAAwK,UAAA,GACuB9K,GAAG,CAACqD,IAAI,EAArChD,MAAM,GAAAyK,UAAA,CAANzK,MAAM,EAAEkD,KAAK,GAAAuH,UAAA,CAALvH,KAAK,EAAE6B,SAAS,GAAA0F,UAAA,CAAT1F,SAAS,EAEhC;UACM2F,cAAc,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;UAAA,MACxC,CAACzK,MAAM,IAAI,CAACyK,cAAc,CAACpM,QAAQ,CAAC2B,MAAM,CAAC;YAAA+K,SAAA,CAAAvR,CAAA;YAAA;UAAA;UAAA,OAAAuR,SAAA,CAAAtQ,CAAA,IACpCkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA4B,CAAC,CAAC;QAAA;UAGjE6J,UAAU,GAAG;YACf,KAAK,EAAEnN,OAAO,CAACC,GAAG,CAACwN,mBAAmB;YAAQ;YAC9C,YAAY,EAAEzN,OAAO,CAACC,GAAG,CAACyN,mBAAmB,CAAC;UAClD,CAAC;UACKN,aAAa,GAAGD,UAAU,CAAC1K,MAAM,CAAC;UAAA,IACnC2K,aAAa;YAAAI,SAAA,CAAAvR,CAAA;YAAA;UAAA;UAAA,OAAAuR,SAAA,CAAAtQ,CAAA,IAAWkF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAgD,CAAC,CAAC;QAAA;UAAAkK,SAAA,CAAA1Q,CAAA;UAAA0Q,SAAA,CAAAvR,CAAA;UAAA,OAGhF,IAAI0C,OAAO,CAAC,UAACC,OAAO,EAAE6K,MAAM,EAAK;YACtDzF,EAAE,CAACiB,GAAG,CAAC,wDAAwD,EAAE,CAACzC,MAAM,CAAC,EAAE,UAAC4B,GAAG,EAAE2G,GAAG,EAAK;cACrF,IAAI3G,GAAG,EAAEqF,MAAM,CAACrF,GAAG,CAAC;cACpBxF,OAAO,CAACmM,GAAG,CAAC;YAChB,CAAC,CAAC;UACN,CAAC,CAAC;QAAA;UALIuC,UAAU,GAAAE,SAAA,CAAAvQ,CAAA;UAAA,MAMZqQ,UAAU,IAAIA,UAAU,CAACK,kBAAkB;YAAAH,SAAA,CAAAvR,CAAA;YAAA;UAAA;UAC3CoR,UAAU,GAAGC,UAAU,CAACK,kBAAkB;UAACH,SAAA,CAAAvR,CAAA;UAAA;QAAA;UAAAuR,SAAA,CAAAvR,CAAA;UAAA,OAEpBmE,cAAc,CAACwN,SAAS,CAACjR,MAAM,CAAC;YAAE+I,KAAK,EAAEA,KAAK;YAAE5B,QAAQ,EAAE;cAAEtB,MAAM,EAAEA,MAAM;cAAE+E,SAAS,EAAEA;YAAW;UAAG,CAAC,CAAC;QAAA;UAAxHrD,QAAQ,GAAAsJ,SAAA,CAAAvQ,CAAA;UACdoQ,UAAU,GAAGnJ,QAAQ,CAACL,EAAE;UACxBG,EAAE,CAACC,GAAG,CAAC,2DAA2D,EAAE,CAACoJ,UAAU,EAAE7K,MAAM,CAAC,EAAE,UAAC4B,GAAG,EAAK;YAC/F,IAAIA,GAAG,EAAEf,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEc,GAAG,CAAC;UAC3E,CAAC,CAAC;QAAC;UAAAoJ,SAAA,CAAAvR,CAAA;UAAA,OAEemE,cAAc,CAACyN,QAAQ,CAACC,QAAQ,CAACnR,MAAM,CAAC;YAC1DuH,QAAQ,EAAEmJ,UAAU;YACpBU,IAAI,EAAE,cAAc;YACpBC,UAAU,EAAE,CAAC;cAAEC,KAAK,EAAEb,aAAa;cAAEc,QAAQ,EAAE;YAAG,CAAC,CAAG;YACtD;YACAC,WAAW,KAAA5K,MAAA,CAAKvD,OAAO,CAACC,GAAG,CAACmO,YAAY,IAAI,uBAAuB,qEAAkE;YACrIC,UAAU,KAAA9K,MAAA,CAAKvD,OAAO,CAACC,GAAG,CAACmO,YAAY,IAAI,uBAAuB,oCAAiC;YACnGtK,QAAQ,EAAE;cAAEtB,MAAM,EAAEA,MAAM;cAAEC,MAAM,EAAEA;YAAQ;UAChD,CAAC,CAAC;QAAA;UARIF,OAAO,GAAAiL,SAAA,CAAAvQ,CAAA;UASbmF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEgK,GAAG,EAAE/L,OAAO,CAAC+L;UAAI,CAAC,CAAC;UAACd,SAAA,CAAAvR,CAAA;UAAA;QAAA;UAAAuR,SAAA,CAAA1Q,CAAA;UAAAyQ,GAAA,GAAAC,SAAA,CAAAvQ,CAAA;UAC7BoG,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAAiK,GAAO,CAAC;UAAEnI,IAAI,CAAAmI,GAAM,CAAC;QAAC;UAAA,OAAAC,SAAA,CAAAtQ,CAAA;MAAA;IAAA,GAAA8P,QAAA;EAAA,CAClG;EAAA,iBAAAuB,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAA1B,KAAA,CAAA/N,KAAA,OAAAD,SAAA;EAAA;AAAA,IAAC;AAEFuB,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAEqD,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAChE,IAAAsJ,UAAA,GAAkEvM,GAAG,CAACiB,IAAI;IAAlE4F,WAAW,GAAA0F,UAAA,CAAX1F,WAAW;IAAEtB,WAAW,GAAAgH,UAAA,CAAXhH,WAAW;IAAEiH,UAAU,GAAAD,UAAA,CAAVC,UAAU;IAAEC,QAAQ,GAAAF,UAAA,CAARE,QAAQ;IAAEC,KAAK,GAAAH,UAAA,CAALG,KAAK;EAC7D,IAAAC,UAAA,GAAmD3M,GAAG,CAACqD,IAAI;IAAnD+B,SAAS,GAAAuH,UAAA,CAATvH,SAAS;IAAEF,IAAI,GAAAyH,UAAA,CAAJzH,IAAI;IAAUkF,aAAa,GAAAuC,UAAA,CAArBtM,MAAM;;EAE/B;EACA,IAAI6E,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IAAE,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmD,CAAC,CAAC;EAAE;EACvJ,IAAI,OAAO0F,WAAW,KAAK,QAAQ,IAAIA,WAAW,IAAI,CAAC,EAAE;IACrD,OAAO5G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EACA,IAAI,OAAOoE,WAAW,KAAK,QAAQ,IAAIA,WAAW,IAAI,CAAC,EAAE;IACrD,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EACA,IAAI,CAACqL,UAAU,IAAI,CAACC,QAAQ,IAAIrF,KAAK,CAAC,IAAIwF,IAAI,CAACJ,UAAU,CAAC,CAACK,OAAO,CAAC,CAAC,CAAC,IAAIzF,KAAK,CAAC,IAAIwF,IAAI,CAACH,QAAQ,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE;IAC1G,OAAO5M,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA0C,CAAC,CAAC;EACrF;EACA,IAAI,IAAIyL,IAAI,CAACJ,UAAU,CAAC,IAAI,IAAII,IAAI,CAACH,QAAQ,CAAC,EAAE;IAC5C,OAAOxM,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EACA,IAAIuL,KAAK,KAAKrF,SAAS,IAAI,OAAOqF,KAAK,KAAK,QAAQ,EAAE;IAClD,OAAOzM,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EAEAU,EAAE,CAACiB,GAAG,CAAC,gEAAgE,EAAE,CAAC+D,WAAW,EAAEzB,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAE6K,QAAQ,EAAK;IAClH,IAAI7K,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAAE,CAAC,CAAC;IAC/I,IAAI,CAACiO,QAAQ,EAAE;MAAE,OAAO7M,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAsC,CAAC,CAAC;IAAE;IAChGU,EAAE,CAACiB,GAAG,CAAC,4EAA4E,EAAE,CAACyC,WAAW,EAAEH,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAEoE,QAAQ,EAAK;MAC9H,IAAIpE,GAAG,EAAE;QAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;QAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,8CAA8C,CAAC,CAAC;MAAE,CAAC,CAAC;MAC/I,IAAI,CAACwH,QAAQ,EAAE;QAAE,OAAOpG,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;UAAEhB,KAAK,EAAE;QAAsC,CAAC,CAAC;MAAE;MAChGU,EAAE,CAACC,GAAG,CACF,sGAAsG,EAAE,CAAC+E,WAAW,EAAEtB,WAAW,EAAEiH,UAAU,EAAEC,QAAQ,EAAEC,KAAK,CAAC,EAC/J,UAASK,SAAS,EAAE;QAChB,IAAIA,SAAS,EAAE;UAAE7L,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAE4L,SAAS,CAAC;UAAE,OAAO9J,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAAE,CAAC,CAAC;QACxIoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;UAAE3C,OAAO,EAAE,gCAAgC;UAAEwN,UAAU,EAAE,IAAI,CAAC3I;QAAO,CAAC,CAAC;MAChG,CACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC;AAEFlG,GAAG,CAAC2E,GAAG,CAAC,gBAAgB,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAC/D,IAAAgK,WAAA,GAA2DjN,GAAG,CAACsK,KAAK;IAA5DzD,WAAW,GAAAoG,WAAA,CAAXpG,WAAW;IAAEtB,WAAW,GAAA0H,WAAA,CAAX1H,WAAW;IAAE2H,UAAU,GAAAD,WAAA,CAAVC,UAAU;IAAEC,QAAQ,GAAAF,WAAA,CAARE,QAAQ;EACtD,IAAAC,UAAA,GAAsFpN,GAAG,CAACqD,IAAI;IAAtF+B,SAAS,GAAAgI,UAAA,CAAThI,SAAS;IAAEF,IAAI,GAAAkI,UAAA,CAAJlI,IAAI;IAAUkF,aAAa,GAAAgD,UAAA,CAArB/M,MAAM;IAA6B0G,qBAAqB,GAAAqG,UAAA,CAAjC9H,UAAU;EAE1D,IAAImE,GAAG,+UAI+B;EACtC,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;EAE1B,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3B,IAAI6B,qBAAqB,EAAE;MACvB0C,GAAG,oCAAoC;MACvCC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;IACtC,CAAC,MAAM;MACH,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA4D,CAAC,CAAC;IACvG;EACJ,CAAC,MAAM,IAAI+D,IAAI,KAAK,UAAU,EAAE;IAC5BuE,GAAG,4BAA4B;IAC/BC,MAAM,CAACnL,IAAI,CAAC6L,aAAa,CAAC;EAC9B;;EAEA;EACA,IAAIvD,WAAW,IAAIO,KAAK,CAAC8C,QAAQ,CAACrD,WAAW,CAAC,CAAC,EAAE;IAC7C,OAAO5G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuC,CAAC,CAAC;EAClF;EACA,IAAIoE,WAAW,IAAI6B,KAAK,CAAC8C,QAAQ,CAAC3E,WAAW,CAAC,CAAC,EAAE;IAC7C,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuC,CAAC,CAAC;EAClF;EACA,IAAI+L,UAAU,IAAI9F,KAAK,CAAC,IAAIwF,IAAI,CAACM,UAAU,CAAC,CAACL,OAAO,CAAC,CAAC,CAAC,EAAE;IACrD,OAAO5M,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EACA,IAAIgM,QAAQ,IAAI/F,KAAK,CAAC,IAAIwF,IAAI,CAACO,QAAQ,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,EAAE;IACjD,OAAO5M,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoC,CAAC,CAAC;EAC/E;EAGA,IAAI0F,WAAW,KAAK3B,IAAI,KAAK,aAAa,IAAKA,IAAI,KAAK,gBAAgB,IAAIgF,QAAQ,CAACrD,WAAW,CAAC,KAAKuD,aAAc,IAAKlF,IAAI,KAAK,UAAU,IAAIgF,QAAQ,CAACrD,WAAW,CAAC,KAAKuD,aAAc,CAAC,EAAE;IACvLX,GAAG,yBAAyB;IAC5BC,MAAM,CAACnL,IAAI,CAACgM,UAAU,CAAC,CAAC,CAAC;EAC7B;EACA,IAAIhF,WAAW,KAAKL,IAAI,KAAK,aAAa,IAAKA,IAAI,KAAK,gBAAgB,IAAIgF,QAAQ,CAAC3E,WAAW,CAAC,KAAKwB,qBAAsB,CAAC,EAAE;IAC3H0C,GAAG,oCAAoC;IACvCC,MAAM,CAACnL,IAAI,CAACgH,WAAW,CAAC;EAC5B;EACA,IAAI2H,UAAU,EAAE;IACZzD,GAAG,oCAAoC;IACvCC,MAAM,CAACnL,IAAI,CAAC2O,UAAU,CAAC;EAC3B;EACA,IAAIC,QAAQ,EAAE;IACV1D,GAAG,kCAAkC;IACrCC,MAAM,CAACnL,IAAI,CAAC4O,QAAQ,CAAC;EACzB;EAEAtL,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,oCAAoC,CAAC,CAAC;IAAE,CAAC,CAAC;IACrIoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;AAEFzL,GAAG,UAAO,CAAC,oBAAoB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACtE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAA2L,WAAA,GAAsFrN,GAAG,CAACqD,IAAI;IAAtF+B,SAAS,GAAAiI,WAAA,CAATjI,SAAS;IAAEF,IAAI,GAAAmI,WAAA,CAAJnI,IAAI;IAAUkF,aAAa,GAAAiD,WAAA,CAArBhN,MAAM;IAA6B0G,qBAAqB,GAAAsG,WAAA,CAAjC/H,UAAU;;EAE1D;EACA,IAAI,CAAC5D,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAgC,CAAC,CAAC;EAC3E;EAEA,IAAI+D,IAAI,KAAK,UAAU,EAAE;IACrB,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EAEA,IAAIsI,GAAG,gDAAgD;EACvD,IAAMC,MAAM,GAAG,CAAChI,EAAE,CAAC;EAEnB,IAAIwD,IAAI,KAAK,gBAAgB,EAAE;IAC3BuE,GAAG,8FAA8F;IACjGC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,EAAE3B,SAAS,CAAC;EACjD,CAAC,MAAM,IAAIF,IAAI,KAAK,aAAa,EAAE;IAC/BuE,GAAG,0EAA0E;IAC7EC,MAAM,CAACnL,IAAI,CAAC6G,SAAS,CAAC;EAC1B;EAEAvD,EAAE,CAACC,GAAG,CAAC2H,GAAG,EAAEC,MAAM,EAAE,UAASzH,GAAG,EAAE;IAC9B,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5H,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAkD,CAAC,CAAC;IAAE;IACrHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACAnD,GAAG,CAACwB,IAAI,CAAC,mBAAmB,EAAEqD,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACnE,IAAAqK,UAAA,GAA0DtN,GAAG,CAACiB,IAAI;IAA1DsM,KAAK,GAAAD,UAAA,CAALC,KAAK;IAAEC,WAAW,GAAAF,UAAA,CAAXE,WAAW;IAAEC,YAAY,GAAAH,UAAA,CAAZG,YAAY;IAAElI,WAAW,GAAA+H,UAAA,CAAX/H,WAAW;EACrD,IAAAmI,WAAA,GAA+D1N,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAAsI,WAAA,CAATtI,SAAS;IAAEF,IAAI,GAAAwI,WAAA,CAAJxI,IAAI;IAAc6B,qBAAqB,GAAA2G,WAAA,CAAjCpI,UAAU;EACnC,IAAMqI,YAAY,GAAG,IAAIf,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,IAAI1I,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EACA,IAAI,CAACoM,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACrJ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC5D,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAwD,CAAC,CAAC;EACnG;EACA,IAAI,CAACqM,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACtJ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC9E,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EACA,IAAIsM,YAAY,KAAKpG,SAAS,IAAI,OAAOoG,YAAY,KAAK,QAAQ,EAAE;IAChE,OAAOxN,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA6C,CAAC,CAAC;EACxF;EACA,IAAIoE,WAAW,KAAK8B,SAAS,IAAI,OAAO9B,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;IAAE;IACxF,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;;EAEA;EACA;EACA,IAAI+D,IAAI,KAAK,gBAAgB,IAAIK,WAAW,IAAIA,WAAW,KAAKwB,qBAAqB,EAAE;IACnF,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAgF,CAAC,CAAC;EAC3H;EAEAU,EAAE,CAACC,GAAG,CACF,wIAAwI,EACxI,CAACsD,SAAS,EAAEG,WAAW,EAAEgI,KAAK,EAAEC,WAAW,EAAEC,YAAY,EAAE,MAAM,EAAEE,YAAY,CAAC;EAAE;EAClF,UAAS1L,GAAG,EAAE;IACV,IAAIA,GAAG,EAAE;MACLf,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEc,GAAG,CAAC;MAC1D,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;IAC7D;IACAoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAE3C,OAAO,EAAE,mCAAmC;MAAEqO,YAAY,EAAE,IAAI,CAACxJ;IAAO,CAAC,CAAC;EACrG,CACJ,CAAC;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAlG,GAAG,CAAC2E,GAAG,CAAC,mBAAmB,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAClE,IAAA6K,WAAA,GAAgC9N,GAAG,CAACsK,KAAK;IAAjCjJ,MAAM,GAAAyM,WAAA,CAANzM,MAAM;IAAEkE,WAAW,GAAAuI,WAAA,CAAXvI,WAAW;EAC3B,IAAAwI,WAAA,GAA+D/N,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAA2I,WAAA,CAAT3I,SAAS;IAAEF,IAAI,GAAA6I,WAAA,CAAJ7I,IAAI;IAAc6B,qBAAqB,GAAAgH,WAAA,CAAjCzI,UAAU;EAEnC,IAAImE,GAAG,GAAG,gDAAgD;EAC1D,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;;EAE1B;EACA,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3B,IAAI6B,qBAAqB,EAAE;MACvB0C,GAAG,IAAI,+CAA+C,CAAC,CAAC;MACxDC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;IACtC,CAAC,MAAM;MACH,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA4D,CAAC,CAAC;IACvG;EACJ,CAAC,MAAM,IAAI+D,IAAI,KAAK,UAAU,EAAE;IAC5B;IACA,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAgE,CAAC,CAAC;EAC3G;;EAEA;EACA,IAAM6M,eAAe,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;EACtD,IAAI3M,MAAM,IAAI,CAAC2M,eAAe,CAACrP,QAAQ,CAAC0C,MAAM,CAAC,EAAE;IAC7C,OAAOpB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA8C,CAAC,CAAC;EACzF;EACA,IAAIoE,WAAW,IAAI6B,KAAK,CAAC8C,QAAQ,CAAC3E,WAAW,CAAC,CAAC,EAAE;IAC7C,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuC,CAAC,CAAC;EAClF;EAGA,IAAIE,MAAM,EAAE;IACRoI,GAAG,IAAI,iBAAiB;IACxBC,MAAM,CAACnL,IAAI,CAAC8C,MAAM,CAAC;EACvB;EACA;EACA,IAAIkE,WAAW,IAAIL,IAAI,KAAK,aAAa,EAAE;IACvCuE,GAAG,IAAI,sBAAsB;IAC7BC,MAAM,CAACnL,IAAI,CAACgH,WAAW,CAAC;EAC5B;EAEA1D,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAAE,CAAC,CAAC;IAC3IoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAzL,GAAG,CAACwJ,GAAG,CAAC,uBAAuB,EAAE3E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACtE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAuM,UAAA,GAAkEjO,GAAG,CAACiB,IAAI;IAAlEsM,KAAK,GAAAU,UAAA,CAALV,KAAK;IAAEC,WAAW,GAAAS,UAAA,CAAXT,WAAW;IAAEC,YAAY,GAAAQ,UAAA,CAAZR,YAAY;IAAEpM,MAAM,GAAA4M,UAAA,CAAN5M,MAAM;IAAEkE,WAAW,GAAA0I,UAAA,CAAX1I,WAAW;EAC7D,IAAA2I,WAAA,GAA+DlO,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAA8I,WAAA,CAAT9I,SAAS;IAAEF,IAAI,GAAAgJ,WAAA,CAAJhJ,IAAI;IAAc6B,qBAAqB,GAAAmH,WAAA,CAAjC5I,UAAU;;EAEnC;EACA,IAAIJ,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EACA,IAAI,CAACO,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EACA,IAAIoM,KAAK,KAAKlG,SAAS,KAAK,OAAOkG,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACrJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IAC3E,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EACA,IAAIqM,WAAW,KAAKnG,SAAS,KAAK,OAAOmG,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACtJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IAC7F,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EACA,IAAIsM,YAAY,KAAKpG,SAAS,IAAI,OAAOoG,YAAY,KAAK,QAAQ,EAAE;IAChE,OAAOxN,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA6C,CAAC,CAAC;EACxF;EACA,IAAM6M,eAAe,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;EACpD,IAAI3M,MAAM,KAAKgG,SAAS,IAAI,CAAC2G,eAAe,CAACrP,QAAQ,CAAC0C,MAAM,CAAC,EAAE;IAC3D,OAAOpB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA2B,CAAC,CAAC;EACtE;EACA,IAAIoE,WAAW,KAAK8B,SAAS,IAAI,OAAO9B,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;IACtF,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EAGA,IAAIiH,SAAS,GAAG,yBAAyB;EACzC,IAAMC,YAAY,GAAG,EAAE;EACvB,IAAMC,OAAO,GAAG,EAAE;EAElB,IAAIiF,KAAK,KAAKlG,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,WAAW,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAACgP,KAAK,CAAC;EAAE;EAChF;EACA,IAAIC,WAAW,KAAKnG,SAAS,KAAK,OAAOmG,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACtJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IAAE;IAC/F,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EACA,IAAIsM,YAAY,KAAKpG,SAAS,IAAI,OAAOoG,YAAY,KAAK,QAAQ,EAAE;IAChE,OAAOxN,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA6C,CAAC,CAAC;EACxF;EACA,IAAIE,MAAM,KAAKgG,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,YAAY,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAAC8C,MAAM,CAAC;EAAE;;EAEnF;EACA,IAAIkE,WAAW,KAAK8B,SAAS,EAAE;IAC3B,IAAInC,IAAI,KAAK,aAAa,EAAE;MACxBoD,OAAO,CAAC/J,IAAI,CAAC,iBAAiB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAACgH,WAAW,CAAC;IACnE,CAAC,MAAM,IAAIL,IAAI,KAAK,gBAAgB,EAAE;MAClC,IAAIK,WAAW,KAAKwB,qBAAqB,IAAIxB,WAAW,KAAK,IAAI,EAAE;QAAE;QACjE,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;UAAEhB,KAAK,EAAE;QAAwF,CAAC,CAAC;MACnI;MACA;MACAmH,OAAO,CAAC/J,IAAI,CAAC,iBAAiB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAACgH,WAAW,CAAC;IACnE;EACJ;EAGA,IAAI+C,OAAO,CAACpN,MAAM,KAAK,CAAC,EAAE;IAAE,OAAO+E,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiC,CAAC,CAAC;EAAE;EAEtGiH,SAAS,IAAIE,OAAO,CAAC9F,IAAI,CAAC,IAAI,CAAC,GAAG,8CAA8C;EAChF6F,YAAY,CAAC9J,IAAI,CAACmD,EAAE,EAAE0D,SAAS,CAAC;;EAEhC;EACA,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3BkD,SAAS,IAAI,+CAA+C,CAAC,CAAC;IAC9DsB,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;EACtC;EAEAlF,EAAE,CAACC,GAAG,CAACsG,SAAS,EAAEC,YAAY,EAAE,UAASpG,GAAG,EAAE;IAC1C,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAAE,CAAC,CAAC;IAClI,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAqD,CAAC,CAAC;IAAE;IACxHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAE3C,OAAO,EAAE;IAAoC,CAAC,CAAC;EAC1E,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACArB,GAAG,UAAO,CAAC,uBAAuB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACzE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAyM,WAAA,GAA+DnO,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAA+I,WAAA,CAAT/I,SAAS;IAAEF,IAAI,GAAAiJ,WAAA,CAAJjJ,IAAI;IAAc6B,qBAAqB,GAAAoH,WAAA,CAAjC7I,UAAU;;EAEnC;EACA,IAAI,CAAC5D,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EAEA,IAAI+D,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsD,CAAC,CAAC;EACjG;EAEA,IAAIsI,GAAG,GAAG,qEAAqE;EAC/E,IAAMC,MAAM,GAAG,CAAChI,EAAE,EAAE0D,SAAS,CAAC;;EAE9B;EACA,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3BuE,GAAG,IAAI,+CAA+C;IACtDC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;EACtC;EAEAlF,EAAE,CAACC,GAAG,CAAC2H,GAAG,EAAEC,MAAM,EAAE,UAASzH,GAAG,EAAE;IAC9B,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAAE,CAAC,CAAC;IAClI,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAqD,CAAC,CAAC;IAAE;IACxHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;;AAGF;AACAnD,GAAG,CAACwB,IAAI,CAAC,iBAAiB,EAAEqD,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACjE,IAAAmL,UAAA,GAA+EpO,GAAG,CAACiB,IAAI;IAA/EoN,cAAc,GAAAD,UAAA,CAAdC,cAAc;IAAExK,SAAS,GAAAuK,UAAA,CAATvK,SAAS;IAAEN,KAAK,GAAA6K,UAAA,CAAL7K,KAAK;IAAEmJ,KAAK,GAAA0B,UAAA,CAAL1B,KAAK;IAAEnH,WAAW,GAAA6I,UAAA,CAAX7I,WAAW;IAAE+I,YAAY,GAAAF,UAAA,CAAZE,YAAY,CAAc,CAAC;EACzF,IAAAC,WAAA,GAA+DvO,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAAmJ,WAAA,CAATnJ,SAAS;IAAEF,IAAI,GAAAqJ,WAAA,CAAJrJ,IAAI;IAAc6B,qBAAqB,GAAAwH,WAAA,CAAjCjJ,UAAU;EACnC,IAAMkJ,gBAAgB,GAAG,IAAI5B,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnD;EACA,IAAI1I,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiD,CAAC,CAAC;EAC5F;EACA,IAAI,OAAOkN,cAAc,KAAK,QAAQ,IAAIA,cAAc,IAAI,CAAC,EAAE;IAC3D,OAAOpO,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EACA,IAAI,CAAC0C,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACxE,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAwD,CAAC,CAAC;EACnG;EACA,IAAI,CAACoC,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IAChC,OAAOtD,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAqC,CAAC,CAAC;EAChF;EACA;EACA,IAAI,CAACmN,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAIA,YAAY,CAACpK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACjF,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA4B,CAAC,CAAC;EACvE;EACA,IAAIuL,KAAK,KAAKrF,SAAS,IAAI,OAAOqF,KAAK,KAAK,QAAQ,EAAE;IAClD,OAAOzM,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EACA,IAAIoE,WAAW,KAAK8B,SAAS,IAAI,OAAO9B,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;IACtF,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;;EAGA;EACAU,EAAE,CAACiB,GAAG,CAAC,iGAAiG,EAAE,CAACuL,cAAc,EAAEjJ,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAEwM,UAAU,EAAK;IACxJ,IAAIxM,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAAE,CAAC,CAAC;IAChJ,IAAI,CAAC4P,UAAU,EAAE;MAAE,OAAOxO,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA4D,CAAC,CAAC;IAAE;;IAExH;IACA,IAAI+D,IAAI,KAAK,gBAAgB,IAAIuJ,UAAU,CAAClJ,WAAW,KAAKwB,qBAAqB,IAAI0H,UAAU,CAAClJ,WAAW,KAAK,IAAI,EAAE;MAClH,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA+F,CAAC,CAAC;IAC1I;IAEAU,EAAE,CAACC,GAAG,CACF,2JAA2J,EAC3J,CAACsD,SAAS,EAAEG,WAAW,IAAIkJ,UAAU,CAAClJ,WAAW,EAAE8I,cAAc,EAAExK,SAAS,EAAEN,KAAK,EAAE+K,YAAY,EAAE5B,KAAK,EAAE8B,gBAAgB,CAAC;IAAE;IAC7H,UAASzB,SAAS,EAAE;MAChB,IAAIA,SAAS,EAAE;QAAE7L,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAE4L,SAAS,CAAC;QAAE,OAAO9J,IAAI,CAAC,IAAIpE,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAAE,CAAC,CAAC;MAC1IoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAE3C,OAAO,EAAE,+BAA+B;QAAEkP,WAAW,EAAE,IAAI,CAACrK;MAAO,CAAC,CAAC;IAChG,CACJ,CAAC;EACL,CAAC,CAAC;AACN,CAAC,CAAC;AAEFlG,GAAG,CAAC2E,GAAG,CAAC,iBAAiB,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAChE,IAAA0L,WAAA,GAAgD3O,GAAG,CAACsK,KAAK;IAAjD+D,cAAc,GAAAM,WAAA,CAAdN,cAAc;IAAEhN,MAAM,GAAAsN,WAAA,CAANtN,MAAM;IAAEkE,WAAW,GAAAoJ,WAAA,CAAXpJ,WAAW,CAAe,CAAC;EAC3D,IAAAqJ,WAAA,GAAsF5O,GAAG,CAACqD,IAAI;IAAtF+B,SAAS,GAAAwJ,WAAA,CAATxJ,SAAS;IAAEF,IAAI,GAAA0J,WAAA,CAAJ1J,IAAI;IAAUkF,aAAa,GAAAwE,WAAA,CAArBvO,MAAM;IAA6B0G,qBAAqB,GAAA6H,WAAA,CAAjCtJ,UAAU;EAE1D,IAAImE,GAAG,6OAGoC;EAC3C,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;;EAE1B;EACA,IAAM4I,eAAe,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;EAC1E,IAAI3M,MAAM,IAAI,CAAC2M,eAAe,CAACrP,QAAQ,CAAC0C,MAAM,CAAC,EAAE;IAC7C,OAAOpB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA4C,CAAC,CAAC;EACvF;EACA,IAAIkN,cAAc,IAAIjH,KAAK,CAAC8C,QAAQ,CAACmE,cAAc,CAAC,CAAC,EAAE;IACnD,OAAOpO,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA0C,CAAC,CAAC;EACrF;EACA,IAAIoE,WAAW,IAAI6B,KAAK,CAAC8C,QAAQ,CAAC3E,WAAW,CAAC,CAAC,EAAE;IAC7C,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuC,CAAC,CAAC;EAClF;EAEA,IAAIE,MAAM,EAAE;IACRoI,GAAG,gCAAgC;IACnCC,MAAM,CAACnL,IAAI,CAAC8C,MAAM,CAAC;EACvB;EAEA,IAAI6D,IAAI,KAAK,gBAAgB,EAAE;IAC3B,IAAI6B,qBAAqB,EAAE;MACvB0C,GAAG,yEAAyE,CAAC,CAAC;MAC9EC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;IACtC,CAAC,MAAM;MACH,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAA4D,CAAC,CAAC;IACvG;EACJ,CAAC,MAAM,IAAI+D,IAAI,KAAK,UAAU,EAAE;IAC5BuE,GAAG,iCAAiC;IACpCC,MAAM,CAACnL,IAAI,CAAC6L,aAAa,CAAC;EAC9B,CAAC,MAAM;IACH,OAAOnK,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA8D,CAAC,CAAC;EACzG;;EAEA;EACA,IAAIkN,cAAc,EAAE;IAChB5E,GAAG,wCAAwC;IAC3CC,MAAM,CAACnL,IAAI,CAAC8P,cAAc,CAAC;EAC/B;EACA;EACA,IAAI9I,WAAW,IAAIL,IAAI,KAAK,aAAa,EAAE;IACvCuE,GAAG,qCAAqC;IACxCC,MAAM,CAACnL,IAAI,CAACgH,WAAW,CAAC;EAC5B;EAGA1D,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,qCAAqC,CAAC,CAAC;IAAE,CAAC,CAAC;IACvIoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAzL,GAAG,CAACwJ,GAAG,CAAC,qBAAqB,EAAE3E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACpE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAmN,UAAA,GAAmG7O,GAAG,CAACiB,IAAI;IAAnG4C,SAAS,GAAAgL,UAAA,CAAThL,SAAS;IAAEN,KAAK,GAAAsL,UAAA,CAALtL,KAAK;IAAElC,MAAM,GAAAwN,UAAA,CAANxN,MAAM;IAAEyN,UAAU,GAAAD,UAAA,CAAVC,UAAU;IAAEpC,KAAK,GAAAmC,UAAA,CAALnC,KAAK;IAAEnH,WAAW,GAAAsJ,UAAA,CAAXtJ,WAAW;IAAE8I,cAAc,GAAAQ,UAAA,CAAdR,cAAc;IAAEC,YAAY,GAAAO,UAAA,CAAZP,YAAY;EAC9F,IAAAS,WAAA,GAA+D/O,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAA2J,WAAA,CAAT3J,SAAS;IAAEF,IAAI,GAAA6J,WAAA,CAAJ7J,IAAI;IAAc6B,qBAAqB,GAAAgI,WAAA,CAAjCzJ,UAAU;;EAEnC;EACA,IAAIJ,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA2D,CAAC,CAAC;EACtG;EACA,IAAI,CAACO,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiC,CAAC,CAAC;EAC5E;EACA,IAAI0C,SAAS,KAAKwD,SAAS,KAAK,OAAOxD,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IACvF,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EACA,IAAIoC,KAAK,KAAK8D,SAAS,IAAI,CAAC/D,YAAY,CAACC,KAAK,CAAC,EAAE;IAC7C,OAAOtD,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA4D,CAAC,CAAC;EACvG;EACA,IAAImN,YAAY,KAAKjH,SAAS,KAAK,OAAOiH,YAAY,KAAK,QAAQ,IAAIA,YAAY,CAACpK,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IAChG,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuD,CAAC,CAAC;EAClG;EACA,IAAM6M,eAAe,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC;EACxE,IAAI3M,MAAM,KAAKgG,SAAS,IAAI,CAAC2G,eAAe,CAACrP,QAAQ,CAAC0C,MAAM,CAAC,EAAE;IAC3D,OAAOpB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA2B,CAAC,CAAC;EACtE;EACA,IAAI2N,UAAU,KAAKzH,SAAS,IAAI,OAAOyH,UAAU,KAAK,QAAQ,EAAE;IAAE;IAC9D,OAAO7O,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA2C,CAAC,CAAC;EACtF;EACA,IAAIuL,KAAK,KAAKrF,SAAS,IAAI,OAAOqF,KAAK,KAAK,QAAQ,EAAE;IAClD,OAAOzM,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EACA,IAAIoE,WAAW,KAAK8B,SAAS,IAAI,OAAO9B,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;IACtF,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EACA,IAAIkN,cAAc,KAAKhH,SAAS,IAAI,OAAOgH,cAAc,KAAK,QAAQ,IAAIA,cAAc,KAAK,IAAI,EAAE;IAC/F,OAAOpO,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAuD,CAAC,CAAC;EAClG;EAGA,IAAIiH,SAAS,GAAG,wBAAwB;EACxC,IAAMC,YAAY,GAAG,EAAE;EACvB,IAAMC,OAAO,GAAG,EAAE;;EAElB;EACA,IAAIzE,SAAS,KAAKwD,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,eAAe,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAACsF,SAAS,CAAC;EAAE;EAC5F,IAAIN,KAAK,KAAK8D,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,WAAW,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAACgF,KAAK,CAAC;EAAE;EAChF,IAAI+K,YAAY,KAAKjH,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,kBAAkB,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAAC+P,YAAY,CAAC;EAAE;EACrG,IAAIjN,MAAM,KAAKgG,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,YAAY,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAAC8C,MAAM,CAAC;EAAE;EACnF,IAAIyN,UAAU,KAAKzH,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,gBAAgB,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAACuQ,UAAU,CAAC;EAAE;EAC/F,IAAIpC,KAAK,KAAKrF,SAAS,EAAE;IAAEiB,OAAO,CAAC/J,IAAI,CAAC,WAAW,CAAC;IAAE8J,YAAY,CAAC9J,IAAI,CAACmO,KAAK,CAAC;EAAE;;EAEhF;EACA,IAAInH,WAAW,KAAK8B,SAAS,EAAE;IAC3B,IAAInC,IAAI,KAAK,aAAa,EAAE;MACxBoD,OAAO,CAAC/J,IAAI,CAAC,iBAAiB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAACgH,WAAW,CAAC;IACnE,CAAC,MAAM,IAAIL,IAAI,KAAK,gBAAgB,EAAE;MAClC,IAAIK,WAAW,KAAKwB,qBAAqB,IAAIxB,WAAW,KAAK,IAAI,EAAE;QAAE;QACjE,OAAOtF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;UAAEhB,KAAK,EAAE;QAA8E,CAAC,CAAC;MACzH;MACA;MACAmH,OAAO,CAAC/J,IAAI,CAAC,iBAAiB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAACgH,WAAW,CAAC;IACnE;EACJ;EACA,IAAI8I,cAAc,KAAKhH,SAAS,EAAE;IAC7B,IAAInC,IAAI,KAAK,aAAa,EAAE;MACzBoD,OAAO,CAAC/J,IAAI,CAAC,oBAAoB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAAC8P,cAAc,CAAC;IACzE,CAAC,MAAM,IAAInJ,IAAI,KAAK,gBAAgB,EAAE;MAClC;MACArD,EAAE,CAACiB,GAAG,CAAC,iGAAiG,EAAE,CAACuL,cAAc,EAAEjJ,SAAS,CAAC,EAAE,UAACnD,GAAG,EAAE+M,GAAG,EAAK;QACjJ,IAAI/M,GAAG,EAAE;UAAEf,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEc,GAAG,CAAC;UAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAAE,CAAC,CAAC;QAChJ,IAAI,CAACmQ,GAAG,EAAE;UAAE,OAAO/O,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAA4D,CAAC,CAAC;QAAE;QACjH,IAAI6N,GAAG,CAACzJ,WAAW,KAAK,IAAI,IAAIyJ,GAAG,CAACzJ,WAAW,KAAKwB,qBAAqB,EAAE;UACvE,OAAO9G,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;YAAEhB,KAAK,EAAE;UAAkG,CAAC,CAAC;QAC7I;MACJ,CAAC,CAAC;MACFmH,OAAO,CAAC/J,IAAI,CAAC,oBAAoB,CAAC;MAAE8J,YAAY,CAAC9J,IAAI,CAAC8P,cAAc,CAAC;IACzE;EACJ;EAGA,IAAI/F,OAAO,CAACpN,MAAM,KAAK,CAAC,EAAE;IAAE,OAAO+E,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiC,CAAC,CAAC;EAAE;EAEtGiH,SAAS,IAAIE,OAAO,CAAC9F,IAAI,CAAC,IAAI,CAAC,GAAG,4CAA4C;EAC9E6F,YAAY,CAAC9J,IAAI,CAACmD,EAAE,EAAE0D,SAAS,CAAC;;EAEhC;EACA,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3BkD,SAAS,IAAI,+CAA+C,CAAC,CAAC;IAC9DsB,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;EACtC;EAEAlF,EAAE,CAACC,GAAG,CAACsG,SAAS,EAAEC,YAAY,EAAE,UAASpG,GAAG,EAAE;IAC1C,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC9H,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAmD,CAAC,CAAC;IAAE;IACtHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAE3C,OAAO,EAAE;IAAkC,CAAC,CAAC;EACxE,CAAC,CAAC;AACN,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACArB,GAAG,UAAO,CAAC,qBAAqB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACvE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAuN,WAAA,GAA+DjP,GAAG,CAACqD,IAAI;IAA/D+B,SAAS,GAAA6J,WAAA,CAAT7J,SAAS;IAAEF,IAAI,GAAA+J,WAAA,CAAJ/J,IAAI;IAAc6B,qBAAqB,GAAAkI,WAAA,CAAjC3J,UAAU;;EAEnC;EACA,IAAI,CAAC5D,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAiC,CAAC,CAAC;EAC5E;EAEA,IAAI+D,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IACrD,OAAOjF,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAoD,CAAC,CAAC;EAC/F;EAEA,IAAIsI,GAAG,GAAG,kEAAkE;EAC5E,IAAMC,MAAM,GAAG,CAAChI,EAAE,EAAE0D,SAAS,CAAC;;EAE9B;EACA,IAAIF,IAAI,KAAK,gBAAgB,EAAE;IAC3BuE,GAAG,IAAI,+CAA+C;IACtDC,MAAM,CAACnL,IAAI,CAACwI,qBAAqB,CAAC;EACtC;EAEAlF,EAAE,CAACC,GAAG,CAAC2H,GAAG,EAAEC,MAAM,EAAE,UAASzH,GAAG,EAAE;IAC9B,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC9H,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAmD,CAAC,CAAC;IAAE;IACtHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnD,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAEqD,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAChE,IAAAiM,WAAA,GAA+DlP,GAAG,CAACiB,IAAI;IAA/DsM,KAAK,GAAA2B,WAAA,CAAL3B,KAAK;IAAE4B,SAAS,GAAAD,WAAA,CAATC,SAAS;IAAEC,SAAS,GAAAF,WAAA,CAATE,SAAS;IAAEC,QAAQ,GAAAH,WAAA,CAARG,QAAQ;IAAE7B,WAAW,GAAA0B,WAAA,CAAX1B,WAAW;EAC1D,IAAA8B,WAAA,GAA8BtP,GAAG,CAACqD,IAAI;IAA9B+B,SAAS,GAAAkK,WAAA,CAATlK,SAAS;IAAE/E,MAAM,GAAAiP,WAAA,CAANjP,MAAM;EACzB,IAAMkP,WAAW,GAAG,IAAI3C,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;;EAE5C;EACA,IAAI,CAACL,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACrJ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC5D,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA6D,CAAC,CAAC;EACxG;EACA,IAAI,CAACgO,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACjL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACxE,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAwD,CAAC,CAAC;EACnG;EACA,IAAI,CAACiO,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAAClL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACxE,OAAOjE,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAwD,CAAC,CAAC;EACnG;EACA;EACA,IAAMqO,QAAQ,GAAG,gCAAgC;EACjD,IAAI,CAACH,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAI,CAACG,QAAQ,CAAChM,IAAI,CAAC6L,QAAQ,CAAC,EAAE;IACvE,OAAOpP,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAA8D,CAAC,CAAC;EACzG;EACA,IAAIqM,WAAW,KAAKnG,SAAS,IAAI,OAAOmG,WAAW,KAAK,QAAQ,EAAE;IAC9D,OAAOvN,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAsC,CAAC,CAAC;EACjF;EAEAU,EAAE,CAACC,GAAG,CACF,8IAA8I,EAC9I,CAACsD,SAAS,EAAE/E,MAAM,EAAEkN,KAAK,EAAE4B,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAE7B,WAAW,EAAE+B,WAAW,CAAC,EACpF,UAAStN,GAAG,EAAE;IACV,IAAIA,GAAG,EAAE;MACLf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MACxD,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAAC;IACnE;IACAoB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAE3C,OAAO,EAAE,uCAAuC;MAAEiQ,UAAU,EAAE,IAAI,CAACpL;IAAO,CAAC,CAAC;EACvG,CACJ,CAAC;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAlG,GAAG,CAAC2E,GAAG,CAAC,gBAAgB,EAAEE,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EAC/D,IAAAyM,WAAA,GAAoC1P,GAAG,CAACqD,IAAI;IAApC+B,SAAS,GAAAsK,WAAA,CAATtK,SAAS;IAAE/E,MAAM,GAAAqP,WAAA,CAANrP,MAAM;IAAE6E,IAAI,GAAAwK,WAAA,CAAJxK,IAAI;EAE/B,IAAIuE,GAAG,GAAG,8CAA8C;EACxD,IAAMC,MAAM,GAAG,CAACtE,SAAS,CAAC;;EAE1B;EACA,IAAIF,IAAI,KAAK,aAAa,EAAE;IACxBuE,GAAG,IAAI,kBAAkB;IACzBC,MAAM,CAACnL,IAAI,CAAC8B,MAAM,CAAC;EACvB;EAEAwB,EAAE,CAAC8H,GAAG,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACzH,GAAG,EAAE2H,IAAI,EAAK;IAC/B,IAAI3H,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,oCAAoC,CAAC,CAAC;IAAE,CAAC,CAAC;IACrIoB,GAAG,CAACkC,IAAI,CAACyH,IAAI,CAAC;EAClB,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAzL,GAAG,UAAO,CAAC,oBAAoB,EAAE6E,iBAAiB,EAAE,UAAChD,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAAE;EACtE,IAAQvB,EAAE,GAAK1B,GAAG,CAAC0J,MAAM,CAAjBhI,EAAE;EACV,IAAAiO,WAAA,GAAoC3P,GAAG,CAACqD,IAAI;IAApC+B,SAAS,GAAAuK,WAAA,CAATvK,SAAS;IAAE/E,MAAM,GAAAsP,WAAA,CAANtP,MAAM;IAAE6E,IAAI,GAAAyK,WAAA,CAAJzK,IAAI;;EAE/B;EACA,IAAI,CAACxD,EAAE,IAAI0F,KAAK,CAAC8C,QAAQ,CAACxI,EAAE,CAAC,CAAC,EAAE;IAC5B,OAAOzB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;MAAEhB,KAAK,EAAE;IAAgC,CAAC,CAAC;EAC3E;EAEA,IAAIsI,GAAG,GAAG,gEAAgE;EAC1E,IAAMC,MAAM,GAAG,CAAChI,EAAE,EAAE0D,SAAS,CAAC;;EAE9B;EACA,IAAIF,IAAI,KAAK,aAAa,EAAE;IACxBuE,GAAG,IAAI,kBAAkB;IACzBC,MAAM,CAACnL,IAAI,CAAC8B,MAAM,CAAC;EACvB;EAEAwB,EAAE,CAACC,GAAG,CAAC2H,GAAG,EAAEC,MAAM,EAAE,UAASzH,GAAG,EAAE;IAC9B,IAAIA,GAAG,EAAE;MAAEf,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEc,GAAG,CAAC;MAAE,OAAOgB,IAAI,CAAC,IAAIpE,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5H,IAAI,IAAI,CAACiK,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO7I,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;QAAEhB,KAAK,EAAE;MAAkD,CAAC,CAAC;IAAE;IACrHlB,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACAnD,GAAG,CAAC2E,GAAG,CAAC,KAAK,EAAE,UAAC9C,GAAG,EAAEC,GAAG,EAAK;EACzB;EACAA,GAAG,CAAC2P,QAAQ,CAACrS,IAAI,CAACiF,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAC1D,CAAC,CAAC;;AAEF;AACA;AACAtE,GAAG,CAACe,GAAG,CAAC,UAAC+C,GAAG,EAAEjC,GAAG,EAAEC,GAAG,EAAEgD,IAAI,EAAK;EAC7B/B,OAAO,CAACC,KAAK,qBAAAC,MAAA,CAAqBa,GAAG,CAAC4N,KAAK,CAAE,CAAC,CAAC,CAAC;EAChD;EACA5P,GAAG,CAACoB,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC;IACjBhB,KAAK,EAAE;IACP;IACA;IACA;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA,IAAIlE,OAAO,CAAC6S,IAAI,KAAKC,MAAM,EAAE;EACzB;EACA5R,GAAG,CAAC6R,MAAM,CAAC7Q,IAAI,EAAE,YAAM;IACnB+B,OAAO,CAACO,GAAG,uDAAAL,MAAA,CAAuDjC,IAAI,CAAE,CAAC;EAC7E,CAAC,CAAC;AACN,CAAC,MAAM;EACH;EACA4Q,MAAM,CAACE,OAAO,GAAG9R,GAAG;AACxB","ignoreList":[]}},"mtime":1750315066447}}